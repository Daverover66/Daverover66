###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   02/19/2019
#   @template       :   morning_briefing
#   @description    :   text for morning briefing.
#
#   @modified by    :   Dave Forrester (Daverover66)
#   @date           :   01/04/2024
###############################################################################

>
  {%- macro getReport() -%} 
    <p>
      {% if now().strftime('%H')|int < 12 %} 
        Good morning. 
      {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %} 
        Good afternoon. 
      {% else %}  
        Good evening. 
      {% endif %} 
    </p>
    <p>
      {% if is_state('binary_sensor.morning','on') %} 
        {{ [
            'Today is ',
            'In case you have not been keeping track, today is ',
            'Do you know what day of the week it is? <prosody pitch="high">No!</prosody> Well today is ',
            'This may or may not be good news, but today is '
              ]|random }}{{states('sensor.day_of_week') }}, {{ as_timestamp(now()) | timestamp_custom('%d %B %Y') }}. The time is {{ now().strftime("%I:%M %p") }}.
      {% else %} 
        {{ [
            'You have missed half of ',
            'In case you have not been keeping track today is ',
            'Do you know what day of the week it is? No? Well today is ',
            'Now that you are awake I can tell you that today is '
              ]|random }}{{states('sensor.day_of_week') }}, {{ as_timestamp(now()) | timestamp_custom('%d %B %Y') }} and it is now {{ now().strftime("%I:%M %p") }}.
      {% endif %}
    </p>
    <p>
        {% if is_state('sensor.days_until_christmas','0') %} 
          we wish you a merry christmas, we wish you a merry christmas, we 
          wish you a merry christmas, and a happy new year.
          Yes, today is christmas day.  Have a festive time and don't eat 
          too many mince pies.
        {% endif %}
    </p>
    <p>
      The Temperature in Clovenfords is {{states('sensor.outside_temperature')|round}} degrees  
      {% if is_state('weather.forecast_home', 'rainy') %} 
        {{ [ 
            'with rain.',  
            'with showers.' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'cloudy') %} 
        {{ [ 
            'with clouds.',  
            'with cloudy skies.' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'partlycloudy') %} 
        {{ [ 
            'with some clouds.',  
            'with partly cloudy skies.', 
            'with scattered clouds' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'fog') %} 
        {{ [ 
            'and foggy.',  
            'with fog.' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'sunny') %} 
        {% if is_state('sun.sun', 'above_horizon') %} 
          {{ [ 
              'and sunny.',  
              'with sun.' 
              ] | random }} 
        {% else %} 
          {{ [ 
              'and clear.',  
              'with clear skies.' 
                ] | random }} 
        {% endif %} 
      {% else %} 
        and {{ states.weather.forecast_home.state }} 
      {% endif %}
    </p>
    <p>
      {% if is_state('binary_sensor.evening','on') %}
          The overnight forecast says we can expect {{ states('weather.forecast_home') }} weather. With a low of {{ states('sensor.overnight_low_temp')}} degrees celsius.
        {% else %}
          The current forecast says we should expect 
          {% if is_state('weather.forecast_home','partlycloudy') %} partly cloudy 
          {% elif is_state('weather.forecast_home','fog') %} foggy
          {% else %}
          {{ states('weather.forecast_home') }} 
          {% endif %} weather. With a high of {{ states('sensor.overnight_high_temp')}} degrees celsius.
        {% endif %}
    </p>
    <p>
      {% if is_state('sun.sun', 'below_horizon') %} 
        You have 
        {% set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() %} 
        {% set hours = seconds / 60 %} 
          {% if seconds / ( 60 * 60 ) > 1 %} 
            {{ (seconds //  ( 60 * 60 )) | int }} hours 
          {% else %} 
            {{ (seconds // 60) | int }} minutes 
          {% endif %} 
            {{ [ 
                'until the sun rises.', 
                'until the sun is up.', 
                'before the sun officially rises. ' 
                ]|random }} 
      {% else %} 
        You have 
        {% set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %} 
        {% set hours = seconds / 60 %} 
          {% if seconds / ( 60 * 60 ) > 1 %} 
            {{ (seconds //  ( 60 * 60 )) | int }} hours 
          {% else %} 
            {{ (seconds // 60) | int }} minutes 
          {% endif %} 
            {{ [ 
                'until the sun sets for the day.', 
                'until the sun slips below the horizon.', 
                'before the sun officially sets. ' 
                ]|random }} 
      {% endif %} 
    </p>
    <p>
      {% set e_list = state_attr('sensor.calendar_events', 'calendar_response')['calendar.forrester_events']['events'] | sort(attribute= 'start') | list %}
            You have {{ e_list | count }}
      {% if (e_list | count) >1 or (e_list | count) <1 %} 
            events in your calendar today. 
      {% elif (e_list | count) ==1 %} 
            event in your calendar today. 
      {% endif %}
      {%- for e in e_list %}
            {{ ['. Then you have ','. Next is ', '. Followed by ']|random if not loop.first else ['First up is ', 'First is ']|random}}
            {{- e.summary }}, starting at {{ (as_timestamp(e.start|as_datetime)) | timestamp_custom ('%H:%M')}}, {{-[' for ', ' and lasting for ', ' which lasts ']|random}}{{- ((e.end|as_datetime - e.start|as_datetime).total_seconds()/3600)|round }} 
        {%- if  ((e.end|as_datetime - e.start|as_datetime).total_seconds()/3600)|round >1 -%}
              hours.
        {%- else -%}
              hour
        {% endif %}
      {%- endfor %}
    </p>
    <p>
      {{ ['My latest smart device sensor sweep has detected that','Smart device sensors have detected that','My smart device crystal ball has revealed that'] | random }} 
        {% set batts_count = expand('group.critical_batteries') 
          | rejectattr('state', 'eq', '100')
          | selectattr('state', 'lt', '20') | list | count %}
        {% if batts_count > 0 %}
        {% set batts = expand('group.critical_batteries') 
          | rejectattr('state', 'eq', '100')
          | selectattr('state', 'lt', '20') | list %}
        {% for bat in batts %}
          The {{ bat.name }} is at {{ bat.state }}%. 
          {{ ['This is lower than the minimum thresshold for satisfactory operation.',
              'Any lower and it will cease to function.',
              'That is pretty low'] | random }}
          {{ ['So perhaps you should replace the batteries before it dies.',
              'So it might be time for replacement batteries',
              'So I guess you know what to do.' ] | random }}
          {% endfor %}
          {% else %} 
              you have no batteries to replace today.
          {% endif %}
    </p>
    <p>
          As for your mobile device batteries. 
        {% set batts_count = expand('group.rechargeable_batteries') 
          | rejectattr('state', 'eq', '100')
          | selectattr('state', 'lt', '20') | list | count %}
        {% if batts_count > 0 %}
        {% set batts = expand('group.rechargeable_batteries') 
          | rejectattr('state', 'eq', '100')
          | selectattr('state', 'lt', '20') | list %}
        {% for bat in batts %}
          {{ bat.name }} is at {{ bat.state }}%. 
          {{ ['This is lower than the minimum thresshold for satisfactory operation.',
              'Any lower and it will cease to function.',
              'That is pretty low'] | random }}
          {{ ['So perhaps you should recharge the battery before it dies.',
              'So it might be time to recharge the battery',
              'So I guess you know what to do.' ] | random }}
          {% endfor %}
          {% else %} 
            you have no batteries to recharge at this time. 
          {% endif %}
    </p>
    <p>
      {% set charge_level = states('sensor.battery_state_of_charge') | float(0) %}
      {% set time = states('sensor.solar_battery_time_to_empty')%}
      {% set solar_forecast = states('sensor.energy_production_today_3') | float(0) | round (2) %}
      {% set season =  states('sensor.season') %}
      {% if charge_level >= 99.5 %} 
        The home battery is full of lovely clean electrons. The estimated solar production for today is {{ solar_forecast }}kWh.
        {% if season == "spring" or season == "summer" %}
          As it is {{ season }}
          {% if solar_forecast > 20 %}
            {{ ['there should be plenty of sunshine for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% else %}
            {{ ['there should be enough energy between solar and the battery for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% endif %}
        {% else %}
          As it is {{ season }}
          {% if solar_forecast > 20 %}
            {{ ['there should be plenty of sunshine for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% else %}
            {{ ['there should be enough energy between solar and the battery for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% endif %}
        {% endif %}
      {% elif charge_level < 99.5 %}
        The home battery has {{ charge_level }}% charge remaining, and is
        {% if time == "Charging" %} 
          currently charging from solar.  The estimated solar production for today is {{ states('sensor.energy_production_today_3') | round (2)}}kWh.
          {% if states('sensor.energy_production_today_3') | float(0) > 30 %}
            {{ ['so there is a good chance the battery will be topped up with glorious sunshine today.',
                'so I expect terawatts of energy to flow from sol to the battery.',
                'so you could probably watch as lovely solar electrons slowly fill the battery.'] | random }} 
          {% endif %}
        {% else %} 
          estimated to last until {{ states('sensor.solar_battery_empty_time') }}, at the current rate of consumption.      
        {% endif %}
          {% if is_state('sensor.solar_battery_daytime_topup_needed','true') or states('sensor.battery_state_of_charge') | float(0) < 10 %}   
                The battery may need a top up from the grid later. Leave it to me, and I will pick
                the best time 
              {{ ['to avoid paying extortionate peak prices.',
                  'to minimise the impact on your bank balance.',
                  'to prevent it running out in the middle of peak rate.'] | random }}
          {% else %}
                {{ ['So there should be enough energy in the battery, to see you through the day.'] | random }}
          {% endif %}
              Incidentally, 
              {{ ['The cheapest half hour charging slot is at,',
                  'The misers among you will most likely charge at,',
                  'The most carbon friendly slot is at,'] | random }}
          {% if is_state('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','on') %}
                  a time to be determined once the currently active slot has closed
          {% else %}
                {{ as_timestamp(state_attr('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','next_time'))|timestamp_custom ('%I:%M %p')}}, 
                  when the price will be {{ (state_attr('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','next_min_cost') *100) | round(1)}} pence per kWh.
                  If you want to charge it outside of that window, 
                {{ ['you know what to do.','on your own head be it.','you had better get your credit card out.'] | random }}   
          {% endif %}   
      {% endif %}
      </p>
      <p>
          {% set topup = states('sensor.rolec_energy_consumption_monthly') | float(0) %}
          {{ ['My sensors are unable to determine the charge level of the battery in the car.',
              'There is a damping field blocking access to the car battery.',
              'My logic circuits are particularly fuzzy today and I am having trouble sensing the charge level of the car battery.'] | random }}
          {% if topup > 5 %}
              However, I have detected that it has been topped up this month with {{ topup | round(1) }}kWh of lovely cheap energy.
              So it should be good for another {{ (topup * 3.5) | round()}} miles.
          {% else %} I can tell you that the car has not been charged this month.
          {{ ['So it might need a topup today.',
              'If it has had a lot of use it might need a topup today.',
              'If you have done a lot of mileage, the battery might need a topup today.'] | random }}
          {% endif %}
            If you think that it needs it, the best time for a half hour topup is at 
            {% if is_state('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','on') %}
                a time to be determined once the currently active slot has closed.
            {% else %}
            {% set time_start = state_attr('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','next_time')%}
              {{ as_timestamp(time_start) | timestamp_custom ('%I:%M %p')}}.  When the price will be {{ ((state_attr('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','next_min_cost'))*100)|round(1)}} pence per kWh.
            {% endif %}   A full 4 hour charge can be started at
            {% if is_state('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','on') %}
              a time to be determined once the current period has ended.
            {% elif state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_time') is none %}
              a time to be determined once a new target sensor has been calculated. 
            {% else %}
              {{as_timestamp(state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_time'))|timestamp_custom ('%I:%M %p') }}.  When the price will be {{ (state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_min_cost') *100) | round(1)}} pence per kWh.
            {% endif %}
            So if you want to charge it outside of that time,
          {{ ['you know what to do.','on your own head be it.',' you had better get your credit card out.'] | random }}
      </p>
      <p>
        {% if is_state('binary_sensor.workday_sensor','off') %}
          {% if is_state('calendar.school_holidays','on') and is_state('calendar.gem_holidays','on')%}
            {{ ['Its the weekend and its a holiday, so come on mummy, get the big breakfast on',
              'The working week is done and its holiday time.  Time for all those weekend and holiday jobs',
              '<emphasis_level="reduced">Hooray.</emphasis> Its the weekend and a holiday. So make the most of it '] | random }}
          {% else %}
            {{ ['Its the weekend, so come on mummy, get the big breakfast on',
                'The working week is done.  Time for all those weekend jobs',
                '<emphasis_level="reduced">Hooray.</emphasis> Its the weekend. So make the most of it '] | random }}
          {% endif %}
        {% elif is_state('calendar.school_holidays','on') and is_state('calendar.gem_holidays','on') %}
          {{ ['Its a school holiday today and Mummy is off too',
              'No school today and mummy too can play. Hooray!',
              'schools out and mummy is in da hoose'] | random }}
        {% elif is_state('calendar.school_holidays','on') and is_state('calendar.gem_holidays','off') %}
          {{ ['Its a school holiday today and mummy is working',
              'No school today, but mummy cant play',
              'schools out, but mummy is not,sorry'] | random }}
        {% elif is_state('calendar.school_holidays','off') and is_state('calendar.gem_holidays','off') %}
          {{ ['There are no holidays today',
              'Work and school for everyone today. Yippee!'] | random }}
        {% endif %}
      </p>

      {%- endmacro-%}
            
      {# a macro that removes all newline characters, empty spaces, and returns formatted text  #} 
      {%- macro cleanup(data) -%} 
        {%- for item in data.split("\n")  if item | trim != "" -%} 
          {{ item | trim }} {% endfor -%} 
      {%- endmacro -%} 

      {# a macro to call all macros :)  #} 
      {%- macro mother_of_all_macros() -%} 
        {{ getReport() }} 
      {%- endmacro -%} 

      {# Call the macro  #} 
        {{- cleanup(mother_of_all_macros()) -}}
