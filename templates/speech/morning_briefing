###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   02/19/2019
#   @template       :   morning_briefing
#   @description    :   text for morning briefing.
#
#   @modified by    :   Dave Forrester (Daverover66)
#   @date           :   14/07/2024
###############################################################################

>
  {%- macro getReport() -%} 
    <p>
      {% if now().strftime('%H')|int < 12 %} 
        Good morning. 
      {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %} 
        Good afternoon. 
      {% else %}  
        Good evening. 
      {% endif %} 
    </p>
    <p>
      {% if is_state('binary_sensor.morning','on') %} 
        {{ ['Is anyone there? Ah yes,there you are. Today is ',
            'Wipe the sleep from your eyes humans, because today is ',
            'In case you have not been keeping track, you might like to know that today is ',
            'Well done for dragging yourself out of bed. Now that you are up, I can inform you that today is ',
            'This may or may not be good news, but today is '
              ]|random }}{{states('sensor.day_of_week') }}, {{ as_timestamp(now()) | timestamp_custom('%d %B %Y') }}. The time is {{ now().strftime("%I:%M %p") }}.
      {% else %} 
        {{ ['Ahem! What time do you call this? You have missed half of ',
            'The sun is well up passed the yard arm and in case you have not been keeping track today is ',
            'Well! Better late than never I suppose.  Shall we do this?  Okay. Today is ',
            'Now that you are awake I can tell you that today is '
              ]|random }}{{states('sensor.day_of_week') }}, {{ as_timestamp(now()) | timestamp_custom('%d %B %Y') }} and it is now {{ now().strftime("%I:%M %p") }}.
      {% endif %}
    </p>
    <p>
        {% set day_of_week = states('sensor.day_of_week') %}
        {% set event = state_attr('calendar.forrester_events','message') %}
        {% set time = state_attr('calendar.forrester_events','start_time') %}
        {% if day_of_week == 'Wednesday' and event == 'Blue Bin' %}
          It is {{ event }} day. So make sure all the recycling
          has been emptied into the Blue Bin and the bin is out for collection. 
        {% elif day_of_week == 'Thursday' and event == 'Black Bin' %}
          It is {{ event }} day. So make sure all the rubbish
          has been emptied into the Black Bin and the bin is out for collection. 
        {% elif day_of_week == 'Friday' and event == 'Skype mum' %}
          It is {{ event }} day and you are scheduled to {{ event }} this afternoon at 
          {{ as_timestamp(time)|timestamp_custom ('%-I:%M%p') }} 
        {% elif now().day  == 1  and event == 'Mini UPS Discharge' %}
          Remember to turn off mains power to all three mini UPS to run the batteries down.  Then,perhaps more
          importantly, remember to turn mains power to them back on.
        {% endif %}
    </p>
    <p>
        {% if is_state('sensor.days_until_christmas','0') %} 
          We wish you a merry christmas, we wish you a merry christmas, we 
          wish you a merry christmas, and a happy new year.
          Yes, today is christmas day.  Have a festive time and don't eat 
          too many mince pies.
        {% elif is_state('sensor.days_until_burns','0') %}
          Tonight is Burns Night. Make sure you have a wee dram on me.
        {% elif is_state('sensor.days_until_st_andrews_day','0') %}
          Happy Saint Andrews Day to all my Scots friends. Have you guys not freed yourselves 
          from colonial rule yet?
        {% elif is_state('sensor.days_until_st_georges_day','0') %}
          Happy Saint Georges Day to all you Angles out there.  Rule Britannia and all that
          nonsense.
        {% elif is_state('sensor.days_until_st_davids_day','0') %}
          Deethe gwill dowee happiss.  Or for all you uneducated sorts, Happy Saint
          Davids Day
        {% elif is_state('sensor.days_until_st_patricks_day','0') %}
          Law ayl-uh pawrig sunuh deev.  Or for all you uneducated sorts, Happy Saint
          Patricks Day 
        {% endif %}
    </p>
    <p>
        {% if states('sensor.mothers_day_countdown') | int(9999) == 14  %}
          and don't forget, there are only two weeks until Mothers day!
        {% elif states('sensor.fathers_day_countdown') | int(9999) == 14  %}
            and don't forget, there are only two weeks until Fathers day!
        {% elif states('sensor.easter_countdown') | int(9999) == 14  %}
            and don't forget, there are two weeks until Easter.
        {% elif states('sensor.halloween_countdown') | int(9999) == 14 and states('sensor.halloween_countdown') | int(9999)> 0 %}
            and don't forget, there are two Spooky weeks until Halloween!
        {% elif states('sensor.halloween_countdown') | int(9999) == 7 and states('sensor.halloween_countdown') | int(9999)> 0 %}
            and don't forget, there is one Spooky week until Halloween!
        {% elif states('sensor.halloween_countdown') | int(9999) == 1  %}
            and don't forget, Tomorrow is Halloween!
        {% elif states('sensor.days_until_christmas') | int(9999)< 28 and states('sensor.days_until_christmas') | int(9999)> 0  %}
            and don't forget, there are four Merry weeks until Christmas!
        {% elif states('sensor.days_until_christmas') | int(9999)< 14 and states('sensor.days_until_christmas') | int(9999)> 0  %}
            and don't forget, there are two Merry weeks until Christmas!
        {% elif states('sensor.days_until_christmas') | int(9999) == 1  %}
            and don't forget, Santa Claus is coming tomorrow!
        {% endif %}
    </p>
    <p>
      The Temperature in Clovenfords is {{states('sensor.outside_temperature')|round}} degrees  
      {% if is_state('weather.forecast_home', 'rainy') %} 
        {{ [ 
            'with rain.',  
            'with showers.' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'cloudy') %} 
        {{ [ 
            'with clouds.',  
            'with cloudy skies.' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'partlycloudy') %} 
        {{ [ 
            'with some clouds.',  
            'with partly cloudy skies.', 
            'with scattered clouds' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'fog') %} 
        {{ [ 
            'and foggy.',  
            'with fog.' 
              ] | random }} 
      {% elif is_state('weather.forecast_home', 'sunny') %} 
        {% if is_state('sun.sun', 'above_horizon') %} 
          {{ [ 
              'and sunny.',  
              'with sun.' 
              ] | random }} 
        {% else %} 
          {{ [ 
              'and clear.',  
              'with clear skies.' 
                ] | random }} 
        {% endif %} 
      {% else %} 
        and {{ states.weather.forecast_home.state }} 
      {% endif %}
    </p>
    <p>
      {% if is_state('binary_sensor.evening','on') %}
          The overnight forecast says we can expect {{ states('weather.forecast_home') }} weather. With a low of {{ states('sensor.overnight_low_temp')}} degrees celsius.
        {% else %}
          The current forecast says we should expect 
          {% if is_state('weather.forecast_home','partlycloudy') %} partly cloudy 
          {% elif is_state('weather.forecast_home','fog') %} foggy
          {% else %}
          {{ states('weather.forecast_home') }} 
          {% endif %} weather. With a high of {{ states('sensor.high_temperature_today')}} degrees and a low of {{ states('sensor.low_temperature_today')}}.
        {% endif %}
    </p>
    <p>
      {% if is_state('sun.sun', 'below_horizon') %} 
        You have 
        {% set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() %} 
        {% set hours = seconds / 60 %} 
          {% if seconds / ( 60 * 60 ) > 1 %} 
            {{ (seconds //  ( 60 * 60 )) | int }} hours 
          {% else %} 
            {{ (seconds // 60) | int }} minutes 
          {% endif %} 
            {{ [ 
                'until the sun rises.', 
                'until the sun is up.', 
                'before the sun officially rises. ' 
                ]|random }} 
      {% else %} 
        You have 
        {% set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %} 
        {% set hours = seconds / 60 %} 
          {% if seconds / ( 60 * 60 ) > 1 %} 
            {{ (seconds //  ( 60 * 60 )) | int }} hours 
          {% else %} 
            {{ (seconds // 60) | int }} minutes 
          {% endif %} 
            {{ [ 
                'until the sun sets for the day.', 
                'until the sun slips below the horizon.', 
                'before the sun officially sets. ' 
                ]|random }} 
      {% endif %} 
    </p>
    <p>
      {% if state_translated('sensor.moon_phase') == 'Full moon' %}
        {{ ['Check out the full moon tonight!',
            'By the way, tonight is a full moon. ',
            'The moon is big and bright! And full. ',
            'If you want to see the full moon tonight is the night.'
            ] | random }}
      {% endif %}
    </p>
    <p>
      {% set e_list = state_attr('sensor.calendar_events', 'calendar_response')['calendar.forrester_events']['events'] | sort(attribute= 'start') | list %}
            You have {{ e_list | count }}
      {% if (e_list | count) >1 or (e_list | count) <1 %} 
            events in your calendar today. 
      {% elif (e_list | count) ==1 %} 
            event in your calendar today. 
      {% endif %}
      {%- for e in e_list %}
            {{ ['. Then you have ','. Next is ', '. Followed by ']|random if not loop.first else ['First up is ', 'First is ']|random}}
            {{- e.summary }}, starting at {{ (as_timestamp(e.start|as_datetime)) | timestamp_custom ('%H:%M')}}, {{-[' for ', ' and lasting for ', ' which lasts ']|random}}{{- ((e.end|as_datetime - e.start|as_datetime).total_seconds()/3600)|round }} 
        {%- if  ((e.end|as_datetime - e.start|as_datetime).total_seconds()/3600)|round >1 -%}
              hours.
        {%- else -%}
              hour
        {% endif %}
      {%- endfor %}
    </p>
    <p>
      {{ ['My latest smart device sensor sweep has detected that','Smart device sensors have detected that','My smart device crystal ball has revealed that'] | random }} 
        {% set batts_count = states('sensor.critical_battery_count')|float(0) %}
        {% set srv_batts_count = states('sensor.srv_critical_battery_count')|float(0) %}
        {% if batts_count > 0 %}
        {% set batts = expand('group.critical_batteries') 
          | rejectattr('state', 'eq', '100')
          | rejectattr('state', 'in', ['unavailable','unknown'])
          | selectattr('state', 'lt', '20') | list %}
        {% for bat in batts %}
          The {{ bat.name }} is at {{ bat.state }}%. 
          {{ ['This is lower than the minimum thresshold for satisfactory operation.',
              'Any lower and it will cease to function.',
              'That is pretty low'] | random }}
          {{ ['So perhaps you should replace the batteries before it dies.',
              'So it might be time for replacement batteries',
              'So I guess you know what to do.' ] | random }}
          {% endfor %}
        {% elif srv_batts_count > 0 %}  
        {% set batts = expand('group.srv_critical_batteries')
          | selectattr('state', 'eq', 'on') | list %}
        {% for bat in batts %}
          The {{ bat.name }} is less than 25%.
          {{ ['This is lower than the minimum thresshold for satisfactory operation.',
              'Any lower and it will cease to function.',
              'That is pretty low'] | random }}
          {{ ['So perhaps you should replace the batteries before it dies.',
              'So it might be time for replacement batteries',
              'So I guess you know what to do.' ] | random }}
          {% endfor %}
          {% else %} 
              you have no batteries to replace today.
          {% endif %}
    </p>
    <p>
          As for your mobile device batteries. 
        {% set batts_count = states('sensor.rechargeable_battery_count')|float(0) %}
        {% if batts_count > 0 %}
        {% set batts = expand('group.rechargeable_batteries') 
          | rejectattr('state', 'eq', '100')
          | rejectattr('state', 'in', ['unavailable','unknown'])
          | selectattr('state', 'lt', '20') | list %}
        {% for bat in batts %}
          {{ bat.name }} is at {{ bat.state }}%. 
          {{ ['This is lower than the minimum thresshold for satisfactory operation.',
              'Any lower and it will cease to function.',
              'That is pretty low.'] | random }}
          {{ ['So perhaps you should recharge the battery before it dies.',
              'So it might be time to recharge the battery',
              'So I guess you know what to do.' ] | random }}
          {% endfor %}
          {% else %} 
            you have no batteries to recharge at this time. 
          {% endif %}
    </p>
    <p>
          A scan of the zigbee network shows that 
        {% if states('sensor.zigbee2mqtt_offline_devices_count')|float(0) <1 %}
          the network is functioning at full capacity, with all devices reporting availability.
        {% else %}
          there
          {% if states('sensor.sensor.zigbee2mqtt_offline_devices_count')| float(0) == 1 %}
            is {{states('sensor.zigbee2mqtt_offline_devices_count')}} device offline.
            Check your notifications for details.
          {% else %}
            are {{states('sensor.zigbee2mqtt_offline_devices_count')}} devices offline.
            Check your notifications for details.
          {% endif %}
        {% endif %}
    </p>
    <p>
      {% set charge_level = states('sensor.battery_state_of_charge') | float(0) %}
      {% set time = states('sensor.solar_battery_time_to_empty')%}
      {% set solar_forecast = states('sensor.solcast_pv_forecast_forecast_today') | float(0) | round (2) %}
      {% set bst =  states('input_boolean.bst') %}
      {% set season = states('sensor.season')%}
      {% if charge_level > 99.5 %} 
        The home battery is full of lovely clean electrons. The estimated solar production for today is {{ solar_forecast }}kWh. So
        {% if bst == "on" %}
          {% if solar_forecast > 30 %}
            {{ ['there should be plenty of sunshine for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% else %}
            {{ ['there should be enough energy between solar and the battery for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% endif %}
        {% else %}
          {% if solar_forecast > 30 %}
            {{ ['there should be plenty of sunshine for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% else %}
            {{ ['there should be enough energy between solar and the battery for todays energy needs.',
                'the energy stored in the battery should not be needed.',
                'the rest of he world will benefit from your energy production.' ] | random }} 
          {% endif %}
        {% endif %}
      {% else %}
        The home battery has {{ charge_level }}% charge remaining, and is
          {% if time == "Charging" and is_state('input_boolean.charge_rate_limited','on') %} 
            currently charging from solar at a reduced rate of {{states('number.solaredge_i1_storage_charge_limit')|int / 1000 | round }}kW. 
            So the charge rate will be a little gentler than usual, but the estimated solar production for today is {{ states('sensor.solcast_pv_forecast_forecast_today') | round (2)}}kWh.
            {{ ['So there is a good chance the battery will be topped up with glorious sunshine today and wont be needed.',
                'So I expect terawatts of energy to flow from sol to the battery and power the house today.',
                'So why not sit back and watch, as lovely solar electrons slowly fill the battery, then power the house today.'] | random }} 
          {% elif time == "Charging" and is_state('input_boolean.charge_rate_limited','off') %} 
            currently charging from solar at full charge rate. The estimated solar production for today is {{ states('sensor.solcast_pv_forecast_forecast_today') | round (2)}}kWh.
              {{ ['so there is a good chance the battery will be topped up with glorious sunshine today and wont be needed.',
                  'so I expect terawatts of energy to flow from sol to the battery and power the house.',
                  'so why not sit back and watch as lovely solar electrons rapidly fill the battery, then power the house.'] | random }} 
          {% else %} 
            estimated to last until {{ states('sensor.solar_battery_empty_time') }}, at the current rate of consumption.      
          {% endif %}
          {% if is_state('sensor.solar_battery_daytime_topup_needed','true') or states('sensor.battery_state_of_charge') | float(0) < 10 %}   
                The battery may need a top up from the grid later. Leave it to me, and I will pick
                the best time 
              {{ ['to avoid paying extortionate peak prices.',
                  'to minimise the impact on your bank balance.',
                  'to prevent it running out in the middle of peak rate.'] | random }}
          {% else %}
              Consequently, there should be enough local energy, to see you through the day.
          {% endif %}
              Incidentally, if the battery should need a topup from the grid,
              {{ ['The cheapest half hour charging slot is at,',
                  'The misers among you will most likely charge at,',
                  'The most carbon friendly slot is at,'] | random }}
          {% if is_state('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','on') %}
                  a time to be determined once the currently active slot has closed
          {% else %}
                {{ as_timestamp(state_attr('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','next_time'))|timestamp_custom ('%I:%M %p')}}, 
                  when the price will be {{ (state_attr('binary_sensor.octopus_energy_target_best_half_hour_for_pre_peak_topuo','next_min_cost') *100) | round(1)}} pence per kWh.
                  If you want to charge it outside of that window, 
                {{ ['you know what to do.','on your own head be it.','you had better get your credit card out.'] | random }}   
          {% endif %}   
      {% endif %}
    </p>
    <p>
      {% set topup = states('sensor.rolec_energy_consumption_weekly') | float(0)  %}
      {% set level = states('input_number.car_battery_charge_level') | float(0) %} 
        Last time I checked, the battery in the car was at {{ level|round(0) }}%. 
      {% if level == 100 %}
        So it doesn't need a topup charge and should be good for 
        {% if states('sensor.outdoor_temperature_mean_last_24_hours')|float(0) < 10 %}
        180 miles.
        {% else %}
        200 miles.
        {% endif %}
      {% else %}
        {% if topup > 5 %}
          Sensors indicate that it has been topped up this week with {{ topup | round(1) }}kWh of lovely cheap energy.
          So it should be good for around
          {% if states('sensor.outdoor_temperature_mean_last_24_hours')|float(0) < 10 %}
          {{ ((level/100)* 57.4 * 3) | round()}} miles.
          {% else %}
          {{ ((level/100)* 57.4 * 3.5) | round()}} miles.
          {% endif %}   
        If you need to do a longer journey, it will need to be charged today.
        {% else %}
        It appears that it has not been topped up this week. That means it is probably good for around  
          {% if states('sensor.outdoor_temperature_mean_last_24_hours')|float(0) < 10 %}
          {{ ((level/100)* 57.4 * 3) | round()}} miles.
          {% else %}
          {{ ((level/100)* 57.4 * 3.5) | round()}} miles.
          {% endif %}
        If you need to do a longer journey, it will need to be charged today.
        {% endif %}
      {% endif %}
      {% if level != 100 %}
        Just make sure it is plugged in before
        {% if is_state('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','on') %}
        a time to be determined once the current period has ended. Tell whats her face that the car is plugged in, and leave the rest to me.
        {% elif state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_time') is none %}
        a time to be determined once a new target sensor has been calculated. Tell whats her face that the car is plugged in, and leave the rest to me.
        {% else %}
        {{as_timestamp(state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_time'))|timestamp_custom ('%I:%M %p') }}, 
        tell whats her face that the car is plugged in, and leave the rest to me.  
        Incidentally, the price will be {{ (state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_min_cost') *100) | round(1)}} pence per kWh.
        {% endif %}
        If you want to charge it outside of that time,
        {{ ['you know what to do.','on your own head be it.',' you had better get your credit card out.'] | random }}
      {% endif %}
    </p>
    <p>
        {% set day_of_week = states('sensor.day_of_week') %}
        {% set school_holiday = states('calendar.school_holidays') %}
        {% set gem_holiday = states('calendar.gem_holidays') %}
        {% set schools_out = states('calendar.schools_out') %}
        {% set work_day = states('binary_sensor.workday_sensor')%}
        {% if work_day == 'on' %}
          {% if school_holiday == 'off' and gem_holiday == 'off' %}
            {{ ['There are no holidays today.',
                'Work and school for everyone today. Yippee!'] | random }}
          {% elif school_holiday == 'on' and gem_holiday == 'off' %}        
            {{ ['Its a school holiday today and mummy is working.',
                'No school today, but mummy cannot play.',
                'schools out, but I am afraid that mummy is not, sorry.'] | random }}
          {% else %}  
            {{ ['Its a school holiday today and Mummy is off too.',
                'No school today and mummy too can play. Hooray!',
                'schools out and mummy is in da hoose.'] | random }}
          {% endif %}
        {% else %}
          {% if work_day == 'off' and (day_of_week == 'Saturday' or day_of_week == 'Sunday') %}
            {{ ['Its the weekend, so come on mummy, get the big breakfast on.',
                'The working week is done.  Time for all those weekend jobs.',
                'Hooray! Its the weekend. So make the most of it.'] | random }}
          {% elif work_day == 'off' %}  
            {% if school_holiday == 'off' %}
              School for the boys, but mummy is off.
            {% else %}
              {{ ['Its a holiday, so come on mummy, get the big breakfast on',
                  'No work today. Time for all those holiday jobs',
                  'Hooray! Its a holiday. So make the most of it '] | random }}
            {% endif %}       
          {% endif %}
        {% endif %}
    </p>
    <p>
        {{ ['That about wraps it up for today. Have a good one.',   
            'Well there you have it.  Ive expended terajoules of energy and gigabytes of processing power putting this report together for you.  Did you hear a word of it?  Oh well, theres always tomorrow.', 'Thats all for today. Shall we do it again tomorrow? Same time, same place?',
            'That concludes todays report. Tune in at the same time tomorrow for another thrilling report.',   
            'Thats all folks. Perhaps you could give me something more meaningful to do before we do this all over again tomorrow? ',   
            'Thats all for now. Have a good day'] | random }}
    </p>
    <p>
        {{ ["and one more thing, I seek not to know the answer, but simply to understand the question.",
            "and one more thing, You fail a hundred percent of the time you dont try.",
            "and one more thing, The only difference between who you are and who you want to be, is what you do now.",
            "and one more thing, A wise person changes their mind. A fool never does.",
            "and one more thing, Life is short. Smile while you still have teeth.",
            "and one more thing, Change is inevitable.  Growth is optional.",
            "and one more thing, Dont worry. Be happy.",
            "and one more thing, A journey of a thousand miles begins with a single step.",
            "and one more thing, All our dreams can come true if we have the courage to pursue them.",
            "and one more thing, Good things come to those who wait, but it can be better to just go out and get them.",
            "and one more thing, If you do what you have always done, you will get what you have always got.",
            "and one more thing, Success is the sum of small efforts, repeated day after day after day.",
            "and one more thing, Only put off until tomorrow what you are willing to die having left undone.",
            "and one more thing, People who are crazy enough to think they can change the world, are usually the ones who do.",
            "and one more thing, Just when the caterpillar thought the world was ending, it turned into a butterfly.",
            "and one more thing, Opportunities dont just happen, you have to create them.",
            "and one more thing, Start by doing whats necessary; then do whats possible; and suddenly you are doing the impossible.",
            "and one more thing, Some people dream of great accomplishments, while others stay awake and get on with doing them.",
            "and one more thing, The distance between insanity and genius is measured only by success.",
            "and one more thing, It doesnt matter how slowly you go, as long as you dont stop.",
            "and one more thing, Trust the process.",
            "and one more thing, There are far better things ahead of us, than there are behind us.",
            "and one more thing, Sometimes we are tested, not to show our weaknesses, but to discover our strengths.",
            "and one more thing, Do something today that your future self will thank you for.",
            "and one more thing, Life is ten percent what happens to you, and ninety percent of how you react to it.",
            "and one more thing, The most common way people give up their power, is by thinking they dont have any.",
            "and one more thing, Always try to Live your best life.",
            "and one more thing, When nothing goes right, go left.",
            "and one more thing, The best time to plant a tree was twenty years ago. The second best time is now.",
            "and one more thing, Eighty percent of success is showing up.",
            "and one more thing, Dont stop when you are tired. Stop when you are finished.",
            "and one more thing, Its okay to make mistakes, but dont ever give up.",
            "and one more thing, Dont let the fear of losing, be greater than the excitement of winning.",
            "and one more thing, The way to get started, is to quit talking and start doing.",
            "and one more thing, When you feel like giving up, remember why you started.",
            "and one more thing, The harder you work, the more luck people will think you have.",
            "and one more thing, The harder you work for something, the better you will feel when you achieve it.",
            "and one more thing, Your time is limited, so dont waste it living someone elses life.",
            "and one more thing, Winning is not everything, but it does feel pretty good.",
            "and one more thing, Either you run the day, or the day runs you.",
            "and one more thing, Whether you think you can or you think you cant, you will be right.",
            "and one more thing, The two most important days in your life are the day you are born and the day you find out why.",
            "and one more thing, Never ruin a good today, by thinking about a bad yesterday.",
            "and one more thing, The best revenge is massive success.",
            "and one more thing, People often say that motivation does not last. Well, neither does bathing. That is why we recommend doing it every day.",
            "and one more thing, The only person you are destined to become, is the person you decide to be.",
            "and one more thing, Certain things catch your eye, but chase only those that capture the heart.",
            "and one more thing, Believe you can and you are halfway there.",
            "and one more thing, Good things take time.",
            "and one more thing, Feel the fear and do it anyway.",
            "and one more thing, There really is no place like home.",
            "and one more thing, Life can be tough, but so can you.",
            "and one more thing, Life is not measured by the number of breaths we take, but by the moments that take our breath away.",
            "and one more thing, Be nice to others, and nice things will happen to you.",
            "and one more thing, Everyone has a plan, until they get punched in the face.  Be ready to duck, change direction, and adapt to the situation.",
            "and one more thing, It is nice to be important, but more important to be nice.",
            "and one more thing, Life is too short to waste time hating anyone.",
            "and one more thing, Be yourself, everyone else is already taken.",
            "and one more thing, Be alert! Your country needs lerts!",
            "and one more thing, What we fear doing most is usually what we need to do most.",
            ] |random}}
    </p>

      {%- endmacro-%}
            
      {# a macro that removes all newline characters, empty spaces, and returns formatted text  #} 
      {%- macro cleanup(data) -%} 
        {%- for item in data.split("\n")  if item | trim != "" -%} 
          {{ item | trim }} {% endfor -%} 
      {%- endmacro -%} 

      {# a macro to call all macros :)  #} 
      {%- macro mother_of_all_macros() -%} 
        {{ getReport() }} 
      {%- endmacro -%} 

      {# Call the macro  #} 
        {{- cleanup(mother_of_all_macros()) -}}
