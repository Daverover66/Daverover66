Car battery
{% set topup = states('sensor.rolec_energy_consumption_daily') | float(0) %}
{{ ['My sensors are unable to determine the charge level of the battery in the car.',
    'There is a damping field blocking access to the car battery.',
    'My logic circuits are particularly fuzzy today and I am having trouble sensing the charge level of the car battery.'] | random }}
{% if topup < 0.5 %}
  However, it was topped up last night with {{ topup }}kWh of lovely cheap energy
  {{ ['So unless it is still very low, it should not need a further topup today.',
      'So it should be good for another few miles.',
      'So the battery should not need a further topup today.'] | random }}
{% else %}
{{ ['So the car might need a topup today.',
    'If it has had a lot of use it might need a topup today.',
    'If it has not been charged for a while, the battery might need a topup today.'] | random }}
{% endif %}
  If you feel that it does need a topup, the best time for a half hour topup is at 
{% set time_start = state_attr('binary_sensor.octopus_energy_target_home_battery_topup','next_time')%}
  {{ as_timestamp(time_start) | timestamp_custom ('%H:%M')}}.
  A full 4 hour charge can be started at
{{states('sensor.ev_charge_end_time') }}.
 So if you want to charge it outside of that time,
{{ ['you know what to do.','on your own head be it.',' you had better get your credit card out.'] | random }}

Time to empty
{%- set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
{%- if battery_power == 0 %}
  {%- set battery_power = 0.01 %}
{%- else %}
  {% set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
{%- endif %}
{%- set max_energy_w = (states('sensor.solaredge_b1_maximum_energy') | float(0) * 1000) %}
{%- set energy_remaining = states('sensor.solaredge_b1_state_of_energy') | float(0)%}
{%- set energy_used_w = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_w %}
{%- set energy_remaining_w = max_energy_w - energy_used_w %}
{%- set hrs_to_empty =  (energy_remaining_w | float / battery_power | float) | round(2) %}
{%- if energy_remaining == 0 %}
  Empty
{% elif hrs_to_empty < 1%}
  {{ '%02d:%02d' | format((hrs_to_empty * -1| int),((hrs_to_empty*60) % 60) | round(0)) }}
{% elif states('sensor.battery_state_of_charge') | float(0) == 100 %}
  Full
{% else %}
  Charging 
{% endif %}

Time to full solar
{%- set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
{%- if battery_power == 0 %}
  {%- set battery_power = 0.01 %}
{%- else %}
  {% set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
{%- endif %}
{%- set max_energy_w = (states('sensor.solaredge_b1_maximum_energy') | float(0) * 1000) %}
{%- set energy_used_w = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_w %}
{%- set hrs_to_full =  (energy_used_w / battery_power) | round(2) %}
{%- if states('sensor.battery_state_of_charge') | float(0) == 100 %}
  Full
{% elif battery_power*-1 > 0.01 %}
  Discharging    
{% else %}
  {{ '%02d:%02d' | format((hrs_to_full | int),((hrs_to_full*60) % 60) | round(0)) }}
{% endif %}       

Time to full Grid
{%- set battery_power = (states('sensor.solaredge_b1_dc_power') | int * -1) %}
{%- if battery_power == 0 %}
{%- set battery_power = 0.01 %}
{%- endif %}
{%- set max_energy_w = (states('sensor.solaredge_b1_maximum_energy') | float(0) * 1000) %}
{%- set energy_used_w = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_w %}
{%- set hrs_to_full =  (energy_used_w / 3900) | round(2) %}
{%- if states('sensor.battery_state_of_charge') | float(0) == 100 %}
  Not Needed
{% else %}
  {{ '%02d:%02d' | format((hrs_to_full | int),((hrs_to_full*60) % 60) | round(0)) }}
{% endif %}
### home battery report for morning briefing ### 
{%- macro getReport() -%} 
        {% set charge_level = states('sensor.battery_state_of_charge') | float(0) %}
        {% set time = states('sensor.solar_battery_time_to_empty')%}
        {% set solar_forecast = states('sensor.energy_production_today_3') | float(0) | round (2) %}
        {% set season =  states('sensor.season') %}
        {% if charge_level >= 99.5 %} 
          The home battery is full of lovely clean electrons. The estimated solar production for today is {{ solar_forecast }}kWh.
          {% if season == "spring" or season == "summer" %}
            As it is {{ season }}
            {% if solar_forecast > 20 %}
              {{ ['there should be plenty of sunshine for todays energy needs.',
                  'the energy stored in the battery should not be needed.',
                  'the rest of he world will benefit from your energy production.' ] | random }} 
            {% else %}
               {{ ['there should be enough energy between solar and the battery for todays energy needs.',
                  'the energy stored in the battery should not be needed.',
                  'the rest of he world will benefit from your energy production.' ] | random }} 
            {% endif %}
          {% else %}
            As it is {{ season }}
            {% if solar_forecast > 20 %}
              {{ ['there should be plenty of sunshine for todays energy needs.',
                  'the energy stored in the battery should not be needed.',
                  'the rest of he world will benefit from your energy production.' ] | random }} 
            {% else %}
               {{ ['there should be enough energy between solar and the battery for todays energy needs.',
                  'the energy stored in the battery should not be needed.',
                  'the rest of he world will benefit from your energy production.' ] | random }} 
            {% endif %}
          {% endif %}
        {% elif charge_level < 99.5 %}
          The home battery has {{ charge_level }}% charge remaining, and is
          {% if time == "Charging" %} 
            currently charging from solar. With 
          {% elif time > "23"%} 
            estimated to last all day at the current rate of consumption. Of course that is unlikely. So with
          {% elif time < "23" %}      
            estimated to last another {{ strptime(time,'%H:%M').hour }} hours at the current rate of consumption. With 
          {% endif %}
            the estimated solar production for today being {{ states('sensor.energy_production_today_3') | round (2)}}kWh. 
          {% if states('sensor.energy_production_today_3') | float(0) > 20 %}
            {{ ['there is a good chance the battery will be topped up with glorious sunshine today.',
                'I expect terawatts of energy to flow from sol to the battery.',
                'you could probably watch as lovely solar electrons slowly fill the battery.'] | random }} 
          {% else %}   
            {{ ['the battery may need a top up from the grid later, ',
                'may I suggest you give it a wee topup from the grid,',
                'I would respectfully suggest you top it up from the grid,'] | random }}
            {{ ['if you want to avoid paying extortionate peak prices.',
                'if you value your bank balance.',
                'or you might find it running out in the middle of peak rate.'] | random }}
            {{ ['The cheapest half hour charging slot is at,',
                'The misers among you will most likely charge at,',
                'The most carbon friendly slot is at,'] | random }}
            {% if is_state('binary_sensor.octopus_energy_target_home_battery_topup','on') %}
                a time to be determined once the currently active slot has closed
            {% else %}
                {{ as_timestamp(state_attr('binary_sensor.octopus_energy_target_home_battery_topup','next_time'))|timestamp_custom ('%H:%M')}}, 
                  when the price will be {{ state_attr('binary_sensor.octopus_energy_target_home_battery_topup','next_min_cost')  }} per kWh.
                  If you want to charge it outside of that window, 
                 {{ ['you know what to do.','on your own head be it.','you had better get your credit card out.'] | random }}   
            {% endif %}    
          {% endif %}
        {% endif %}
      {%- endmacro-%}
            
      {# a macro that removes all newline characters, empty spaces, and returns formatted text  #} 
      {%- macro cleanup(data) -%} 
        {%- for item in data.split("\n")  if item | trim != "" -%} 
          {{ item | trim }} {% endfor -%} 
      {%- endmacro -%} 

      {# a macro to call all macros :)  #} 
      {%- macro mother_of_all_macros() -%} 
        {{ getReport() }} 
      {%- endmacro -%} 

      {# Call the macro  #} 
        {{- cleanup(mother_of_all_macros()) -}}

