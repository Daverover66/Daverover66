heating_turn_off_all_radiators:
  alias: 'Heating: Turn OFF all radiators'
  sequence:
  - service: climate.turn_off
    data: {}
    target:
      entity_id:
      - climate.cloakroom
      - climate.dining_room
      - climate.downstairs
      - climate.en_suite_bathroom
      - climate.guest_bedroom
      - climate.kids_bathroom
      - climate.master_bedroom
      - climate.office
      - climate.upstairs
  mode: single
  icon: mdi:radiator-off
heating_turn_on_all_radiators:
  alias: 'Heating: Turn ON all radiators'
  sequence:
  - service: climate.turn_on
    data: {}
    target:
      entity_id:
      - climate.cloakroom
      - climate.dining_room
      - climate.downstairs
      - climate.en_suite_bathroom
      - climate.guest_bedroom
      - climate.kids_bathroom
      - climate.master_bedroom
      - climate.office
      - climate.upstairs
  mode: single
  icon: mdi:radiator
heating_resume_schedule_all_radiators:
  alias: 'Heating: RESUME schedule all radiators'
  sequence:
  - service: climate.set_hvac_mode
    data:
      hvac_mode: auto
    target:
      entity_id:
      - climate.cloakroom
      - climate.dining_room
      - climate.downstairs
      - climate.en_suite_bathroom
      - climate.guest_bedroom
      - climate.kids_bathroom
      - climate.master_bedroom
      - climate.office
      - climate.upstairs
  mode: single
  icon: mdi:calendar-refresh
hot_water_on:
  alias: 'Hot Water: Turn On'
  sequence:
  - service: water_heater.turn_on
    data: {}
  mode: single
  icon: mdi:water-boiler
hot_water_off:
  alias: 'Hot Water: Turn Off'
  sequence:
  - service: water_heater.turn_off
    data: {}
  mode: single
  icon: mdi:water-boiler-off
notify_and_log:
  alias: Notify and Log
  sequence:
  - if:
    - condition: template
      value_template: '{{is_state(''input_boolean.debug_flag'', ''on'')}}'
    then:
    - data:
        title: '{{ title }}'
        message: '{{ message }}'
      action: script.text_notify_dave
    - data:
        message: '{{ message }}'
        level: warning
      action: system_log.write
  mode: single
grid_charge_battery:
  alias: Grid Charge Battery
  sequence:
  - service: number.set_value
    data:
      value: '{{ states(''input_number.storage_command_timeout_for_discharge_to_grid'')
        | float(0) }}'
    target:
      entity_id: number.solaredge_i1_storage_command_timeout
    alias: Set Storage Command Timeout to Input Helper value
  - device_id: 952193e87f675ba7f7e32eda5500c572
    domain: select
    entity_id: select.solaredge_i1_storage_command_mode
    type: select_option
    option: Charge from Solar Power and Grid
    alias: Set Storage Command Mode to Charge from Solar Power and Grid
  - service: timer.start
    data: {}
    target:
      entity_id: timer.home_battery_3_hour_charge_period
  - wait_for_trigger:
    - platform: numeric_state
      entity_id:
      - sensor.solaredge_b1_state_of_energy
      above: 99.9
    timeout:
      hours: 3
      minutes: 5
      seconds: 0
      milliseconds: 0
  - service: number.set_value
    data:
      value: '{{ states(''input_number.storage_command_timeout_default_period'') |
        float(0) }}'
    target:
      entity_id: number.solaredge_i1_storage_command_timeout
    alias: Set Storage Command Timeout to Default via helper
  - device_id: 952193e87f675ba7f7e32eda5500c572
    domain: select
    entity_id: 0bdfb19491b49722c2a94351b9a673aa
    type: select_option
    option: Maximize Self Consumption
    alias: 'Set Storage Command Mode to Maximize Self Consumption '
  mode: restart
  icon: mdi:battery-charging
force_discharge_battery:
  alias: Force Discharge Battery
  sequence:
  - service: number.set_value
    data:
      value: '{{ states(''input_number.storage_command_timeout_for_discharge_to_grid'')
        | float(0) }}'
    target:
      entity_id: number.solaredge_i1_storage_command_timeout
    alias: 'Set Storage Command Timeout to Input Helper value '
  - device_id: 952193e87f675ba7f7e32eda5500c572
    domain: select
    entity_id: select.solaredge_i1_storage_command_mode
    type: select_option
    option: Discharge to Maximize Export
    alias: Set Storage Command Mode to Discharge to Maximize Export
  - service: number.set_value
    data:
      value: '{{ states(''input_number.storage_command_timeout_default_period'') |
        float(0) }}'
    target:
      entity_id: number.solaredge_i1_storage_command_timeout
    alias: Set Storage Command Timeout to Default via helper
  mode: single
  icon: mdi:battery-minus
stair_lights_with_level:
  alias: Stair Lights with level
  sequence:
  - service: light.turn_on
    entity_id: light.stair_lights
    data:
      brightness: "{{ level | int }} \n"
  mode: single
stair_lights_fade_at_bedtime:
  alias: Stair Lights Fade at bedtime
  sequence:
  - repeat:
      while:
      - condition: template
        value_template: '{{ states("input_number.stair_lights_fade") | int > 0 }}'
      sequence:
      - service: script.stair_lights_with_level
        data:
          level: '{{ states("input_number.stair_lights_fade") }}'
      - service: input_number.decrement
        target:
          entity_id:
          - input_number.stair_lights_fade
        data: {}
      - delay:
          hours: 1
          minutes: 0
          seconds: 0
          milliseconds: 0
  - service: light.turn_off
    data: {}
    target:
      entity_id:
      - light.stair_lights
  - service: input_number.set_value
    data:
      value: 40
    target:
      entity_id:
      - input_number.stair_lights_fade
  mode: single
get_room_services:
  alias: get_room_services
  sequence:
  - variables:
      room_priority: "{% if room is defined %}\n  {% if room in ['dave','gem']%}\n
        \   {{ states('sensor.'~room~'_room') }}\n  {% else %}\n    {{ room }}          \n
        \ {% endif %}\n{% else %}\n  NA         \n{% endif %}\n"
      room_services: "{% set jarvis_speaker = states.media_player | \n    selectattr('entity_id',
        'in', area_entities(room)) |\n    rejectattr('attributes.last_called', 'undefined')
        |\n    map(attribute='entity_id') |\n  list | first %}\n\n{% set audio_speaker
        = states.media_player | \n    selectattr('entity_id', 'in', area_entities(room))
        |\n    rejectattr('attributes.device_class', 'undefined') |\n    selectattr('attributes.device_class',
        'search', '(speaker)') | \n    map(attribute='entity_id') |\n  list | first
        %}\n\n{% set tts = 'amp' %} {\"area\":\"{{room}}\",\"jarvis_speaker\":\"{{jarvis_speaker}}\",\"jarvis_tts\":\"{{tts}}\",\"audio_speaker\":\"{{audio_speaker}}\"}"
  - stop: ok, Im done.
    response_variable: room_services
restart_home_assistant:
  alias: Restart Home Assistant
  sequence:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.audible_notifications
  - service: homeassistant.restart
    data: {}
  mode: single
  icon: mdi:home-assistant
speech_engine_for_tts:
  alias: Speech Engine for TTS
  sequence:
  - condition: state
    entity_id: input_boolean.audible_notifications
    state: 'on'
  - condition: state
    entity_id: binary_sensor.family_home
    state: 'on'
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: 'off'
  - service: notify.alexa_media
    data:
      message: '<voice name="{{ voice }}"> <amazon:auto-breaths> <prosody rate="105%">
        {{

        message }} </prosody> </amazon:auto-breaths> </voice>'
      target: "{% if where in ['Kitchen','kitchen','kitchen_echo_show'] %}\n      media_player.kitchen_echo_show\n
        \   {% elif where in ['Main Bedroom','main_bedroom_dot'] %}\n      media_player.main_bedroom_dot\n
        \   {% elif where in ['Guest Bedroom','guest_bedroom_echo_dot']\n    %}\n
        \     media_player.guest_bedroom_echo_dot\n    {% elif where in ['Living Room','dave_s_2nd_echo_pop']
        %}\n      media_player.dave_s_2nd_echo_pop\n    {% elif where in ['Dining
        Room','dave_s_echo_pop'] %}\n      media_player.dave_s_echo_pop\n    {% elif
        where in ['Office','dave_s_2nd_echo_pop_2'] %}\n      media_player.dave_s_2nd_echo_pop_2\n
        \   {% elif where in ['Jamies Room','living_room_dot'] %}\n      media_player.living_room_dot\n
        \   {% elif where in ['Seans Room','seans_room_dot'] %}\n      media_player.seans_room_dot\n
        \   {% elif where in ['Everywhere','everywhere_2'] %}\n      media_player.everywhere_2\n
        \   {% elif where in ['Upstairs','upstairs'] %}\n      media_player.upstairs\n
        \   {% elif where in ['Downstairs','downstairs'] %}\n      media_player.downstairs\n
        \   {% else %}\n      media_player.dave_s_2nd_echo_pop\n    {% endif %}"
      data:
        type: "{% if where in\n['Downstairs','Upstairs','Everywhere','media_player.downstairs','media_player.upstairs','media_player.everywhere_2']%}\n
          \ announce\n{% else %}\n  tts\n{% endif %}"
  - service: mqtt.publish
    data_template:
      topic: house/alexa/lastmsg
      payload: "{% if msg_summary == 'recall' %}\n  {% set msg_summary = '{{states(''sensor.jarvis_last_msg'')}}'
        %}\n{% else %}\n  {% if msg_summary %}\n    {% set message = msg_summary %}\n
        \ {% endif %}\n  {%- macro cleanup(data) -%}\n    {%- for item in data.split(\"\\n\")
        \ if item | trim != \"\" -%}\n      {{ item | trim }} {% endfor -%}\n  {%-
        endmacro -%}\n      {{- cleanup( message | striptags | truncate(220) ) -}}\n{%
        endif %}\n"
  - service: mqtt.publish
    data_template:
      topic: house/alexa/msgtime
      payload: '{{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")
        }}

        '
      retain: true
  - service: mqtt.publish
    data_template:
      topic: house/alexa/lastloc
      payload: '{{ where }}'
      retain: true
  mode: single
  icon: mdi:account-tie-voice
randomised_holiday_lighting:
  alias: Randomised Holiday Lighting
  sequence:
  - repeat:
      until:
      - condition: state
        entity_id: sun.sun
        state: above_horizon
      sequence:
      - service: notify.mobile_app_daves_samsung_galaxy
        data:
          message: Holiday Lights Running
      - service: homeassistant.toggle
        data:
          entity_id: '{{ expand(''group.holiday_lights'') | map(attribute=''entity_id'')
            | list | random }}

            '
      - delay:
          minutes: '{{ range(1,3) | random | int }}'
      - service: homeassistant.turn_off
        data: {}
        target:
          entity_id: group.holiday_lights
  mode: single
  icon: mdi:lightbulb-multiple
house_in_holiday_mode:
  alias: Holiday House
  sequence:
  - if:
    - condition: state
      entity_id: binary_sensor.morning
      state: 'on'
    then:
    - service: media_player.turn_on
      data: {}
      target:
        entity_id: media_player.sky_q_main
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.living_room_tv
    - delay:
        hours: 0
        minutes: 30
        seconds: 0
        milliseconds: 0
    - service: media_player.turn_off
      data: {}
      target:
        entity_id: media_player.sky_q_main
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.living_room_tv
    alias: Turn on Living Room TV in the morning
  - alias: Turn on kitchen TV at luncthime
    if:
    - condition: state
      entity_id: binary_sensor.lunchtime
      state: 'on'
    then:
    - service: media_player.turn_on
      data: {}
      target:
        entity_id: media_player.sky_q_kitchen_mini_2
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.ingrid
    - delay:
        hours: 0
        minutes: 30
        seconds: 0
        milliseconds: 0
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.ingrid
    - service: media_player.turn_off
      data: {}
      target:
        entity_id: media_player.sky_q_kitchen_mini_2
  - if:
    - condition: state
      entity_id: binary_sensor.dinner_time
      state: 'on'
    then:
    - service: media_player.turn_on
      data: {}
      target:
        entity_id: media_player.sky_q_kitchen_mini_2
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.ingrid
    - delay:
        hours: 0
        minutes: 30
        seconds: 0
        milliseconds: 0
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.ingrid
    - service: media_player.turn_off
      data: {}
      target:
        entity_id: media_player.sky_q_kitchen_mini_2
    alias: Turn on kitchen TV at dinner time
  - if:
    - condition: state
      entity_id: binary_sensor.evening
      state: 'on'
    then:
    - service: media_player.turn_on
      data: {}
      target:
        entity_id: media_player.sky_q_main
    - service: switch.turn_on
      data: {}
      target:
        entity_id: switch.living_room_tv
    - delay:
        hours: 1
        minutes: 30
        seconds: 0
        milliseconds: 0
    - service: media_player.turn_off
      data: {}
      target:
        entity_id: media_player.sky_q_main
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.living_room_tv
    alias: Turn on Living Room TV at night
  - if:
    - condition: time
      after: '22:00:00'
    then:
    - service: script.stair_lights_fade_at_bedtime
      data: {}
    - service: script.bed_lamps_dim_at_bedtime
      data: {}
    alias: Start lights dimming
  mode: single
'1693070811673':
  alias: Set Standard Volume
  sequence:
  - service: media_player.volume_mute
    data:
      is_volume_muted: true
    target:
      entity_id: "{% if where in ['Kitchen','media_player.kitchen_echo_show'] %}\n
        \ media_player.kitchen_echo_show\n{% elif where in ['Main Bedroom','media_player.main_bedroom_dot']
        %}\n  media_player.main_bedroom_dot\n{% elif where in ['Guest Bedroom','media_player.guest_bedroom_echo_dot']
        %}\n  media_player.guest_bedroom_echo_dot\n{% elif where in ['Living Room','media_player.dave_s_2nd_echo_pop']
        %}\n  media_player.dave_s_2nd_echo_pop\n{% elif where in ['Dining Room','media_player.dave_s_echo_pop']
        == \"Dining Room\"%}\n  media_player.dave_s_echo_pop\n{% elif where in ['Office','media_player.dave_s_2nd_echo_pop_2']
        %}\n  media_player.dave_s_2nd_echo_pop_2\n{% elif where in ['Jamies Room','media_player.living_room_dot']
        %}\n  media_player.living_room_dot\n{% elif where in ['Seans Room','media_player.seans_room_dot']
        %}\n  media_player.seans_room_dot\n{% elif where in ['Everywhere','media_player.everywhere_2']
        %}\n  media_player.everywhere_2\n{% elif where in ['Upstairs','media_player.upstairs']
        %}\n  media_player.upstairs\n{% elif where in ['Downstairs','media_player.downstairs']
        %}\n  media_player.downstairs\n{% else %}\n  media_player.dave_s_2nd_echo_pop\n{%
        endif %}"
  - service: media_player.volume_set
    data:
      volume_level: '{{ states(''input_number.alexa_volume_level_default_all'') |
        float(0) }}'
    target:
      entity_id: "{% if where in ['Kitchen','media_player.kitchen_echo_show'] %}\n
        \ media_player.kitchen_echo_show\n{% elif where in ['Main Bedroom','media_player.main_bedroom_dot']
        %}\n  media_player.main_bedroom_dot\n{% elif where in ['Guest Bedroom','media_player.guest_bedroom_echo_dot']
        %}\n  media_player.guest_bedroom_echo_dot\n{% elif where in ['Living Room','media_player.dave_s_2nd_echo_pop']
        %}\n  media_player.dave_s_2nd_echo_pop\n{% elif where in ['Dining Room','media_player.dave_s_echo_pop']
        == \"Dining Room\"%}\n  media_player.dave_s_echo_pop\n{% elif where in ['Office','media_player.dave_s_2nd_echo_pop_2']
        %}\n  media_player.dave_s_2nd_echo_pop_2\n{% elif where in ['Jamies Room','media_player.living_room_dot']
        %}\n  media_player.living_room_dot\n{% elif where in ['Seans Room','media_player.seans_room_dot']
        %}\n  media_player.seans_room_dot\n{% elif where in ['Everywhere','media_player.everywhere_2']
        %}\n  media_player.everywhere_2\n{% elif where in ['Upstairs','media_player.upstairs']
        %}\n  media_player.upstairs\n{% elif where in ['Downstairs','media_player.downstairs']
        %}\n  media_player.downstairs\n{% else %}\n  media_player.dave_s_2nd_echo_pop\n{%
        endif %}"
  mode: single
test_alexa_voice_script:
  alias: Test Alexa Voice Script
  sequence:
  - variables:
      echo: "{% set loc = states('sensor.room_with_alexa_presence') if where in ['presence','room_with_alexa_presence','current','current_room']
        else where %}\n{% if loc in ['kitchen_echo_show','media_player.kitchen_echo_show','kitchen']
        %}\n  kitchen_echo_show\n{% elif loc in ['dave_s_2nd_echo_pop','media_player.dave_s_2nd_echo_pop','living_room']
        %}\n  dave_s_2nd_echo_pop\n{% elif loc in ['dave_s_echo_pop','media_player.dave_s_echo_pop','dining_room']
        %}\n  dave_s_echo_pop\n{% elif loc in ['main_bedroom_dot','media_player.main_bedroom_dot','main_bedroom']
        %}\n  main_bedroom_dot\n{% elif loc in ['guest_bedroom_echo_dot','media_player.guest_bedroom_echo_dot','guest_bedroom']
        %}\n  guest_bedroom_echo_dot\n{% elif loc in ['living_room_dot','media_player.living_room_dot','jamies_room','jamie']
        %}\n  living_room_dot\n{% elif loc in ['seans_room_dot','media_player.seans_room_dot','seans_room','sean']
        %}\n  seans_room_dot\n{% elif loc in ['dave_s_2nd_echo_pop_2','media_player.dave_s_2nd_echo_pop_2','office']
        %}\n  dave_s_2nd_echo_pop_2\n{% elif loc in ['everywhere'] %}\n  everywhere_2\n{%
        elif loc in ['upstairs'] %}\n  upstairs\n{% elif loc in ['downstairs'] %}\n
        \ downstairs\n{% else %}\n  dave_s_2nd_echo_pop\n{% endif %}"
      volume: "{%- set default = '0.5' if states('input_boolean.audible_notifications')
        == 'on' else '0.3' -%}\n{%- if volume_override is float -%}\n  {{ volume_override
        }}\n{%- else -%}\n  {{ default }}\n{%- endif -%}"
  - alias: Save your message for recall
    service: mqtt.publish
    data_template:
      topic: house/alexa/lastmsg
      payload: "{% if msg_summary == 'recall' %}\n  {{- states('sensor.jarvis_last_msg')
        -}}\n{% else %}\n  {% if msg_summary %}\n    {% set message = msg_summary
        %}\n  {% endif %}\n  {%- macro cleanup(data) -%}\n    {%- for item in data.split(\"\\n\")
        \ if item | trim != \"\" -%}\n      {{ item | trim }} {% endfor -%}\n  {%-
        endmacro -%}\n  {{- cleanup( message | striptags | truncate(220) ) -}}\n{%
        endif %}"
  - alias: Save time of last message
    service: mqtt.publish
    data_template:
      topic: house/alexa/msgtime
      payload: '{{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")
        }}'
      retain: true
  - alias: Save location
    service: mqtt.publish
    data_template:
      topic: house/alexa/lastloc
      payload: '{{ echo }}'
      retain: true
  - alias: Set echo volume if needed
    if:
    - condition: not
      conditions:
      - condition: template
        value_template: '{{ is_state_attr(''media_player.'' + echo, ''volume_level'',
          volume | float) }}'
    then:
    - service: media_player.volume_set
      data:
        volume_level: '{{ volume | float }}'
      target:
        entity_id: media_player.{{ echo }}
  - alias: Send the notification
    service: notify.alexa_media
    data:
      message: '<voice name="Brian">

        <amazon:auto-breaths>

        <prosody rate="105%">

        {{ message }}

        </prosody>

        </amazon:auto-breaths>

        </voice>'
      target: media_player.{{ echo }}
      data:
        type: tts
update_critical_battery_group_2:
  alias: Update Battery Group
  sequence:
  - service: group.set
    data:
      object_id: critical_batteries
      entities: []
  - service: group.set
    data:
      object_id: critical_batteries
      add_entities: "{{ states.sensor | \n  selectattr('entity_id', 'in', area_entities('Critical
        Battery')) |\n  map(attribute='entity_id') | list  | join(',') }} "
  mode: single
'1697198903698':
  alias: Ashley’s Light Fader
  description: 'Fades a lamp over time. If you have any questions or comments about
    this script, feel free to tweet Ashley Bischoff at @FriendlyAshley. Released under
    the Apache 2.0 license. (v1.1)

    '
  fields:
    light:
      name: "\U0001F4A1 Light"
      description: entity_id of the lamp.
      selector:
        entity:
          domain: light
      example: light.kitchen
      required: true
    lampBrightnessScale:
      name: The lamp’s internal brightness scale
      description: 'Most lamps seem to internally use a 0 to 255 brightness scale,
        but some lamps internally use a 0% to 100% brightness scale. Either of these
        settings will still fade the lamp, but if you happen to match this setting
        to the lamp’s internal brightness scale, the resulting fade may be smoother.
        (If you’re not sure, you can just leave this as is.)

        '
      advanced: true
      required: true
      selector:
        select:
          options:
          - label: 0% to 100%
            value: zeroToOneHundred
          - label: 0 to 255
            value: zeroToTwoFiftyFive
      default: zeroToTwoFiftyFive
    transitionTime:
      name: ⏱ Fade time
      description: Fade duration.
      selector:
        duration:
      required: true
    easingTypeInput:
      name: Easing type
      description: The easing function that you’d like the fade to use. As a starting
        point—you can’t go wrong with any of the “Ease-In-Out X” easings as those
        will always look pretty good whenever you’re fading between two nonzero brightness
        values. As well, the “Ease-Out X” easings often tend to look good if you might
        be fading up very quickly from zero to another brightness, and the “Ease-In
        X” easings are mostly only included for completeness as those tend to only
        look good if you might be fading down to zero very quickly. (See also https://easings.net
        for visual demos of each of these easing types.)
      selector:
        select:
          mode: list
          options:
          - label: Try to automatically select the easing type
            value: auto
          - label: Ease-In-Out Sine [a good all-rounder]
            value: easeInOutSine
          - label: Ease-In-Out Quad
            value: easeInOutQuad
          - label: Ease-In-Out Cubic
            value: easeInOutCubic
          - label: Ease-In-Out Quart
            value: easeInOutQuart
          - label: Ease-Out Sine
            value: easeOutSine
          - label: Ease-Out Quad
            value: easeOutCubic
          - label: Ease-Out Cubic
            value: easeOutCubic
          - label: Ease-Out Quart
            value: easeOutQuart
          - label: Ease-In Sine
            value: easeInSine
          - label: Ease-In Quad
            value: easeInCubic
          - label: Ease-In Cubic
            value: easeInCubic
          - label: Ease-In Quart
            value: easeInQuart
          - label: Linear [somewhat unnatural to the human eye; not recommended]
            value: linear
      default: auto
      required: true
    endBrightnessPercent:
      name: End brightness level
      description: Percentage from 0 to 100 representing the final brightness level.
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: '%'
      default: 50
      example: '50'
      required: true
    autoCancelThreshold:
      name: "\U0001F6AB (optional) Brightness-change threshold that auto-cancels the
        fade"
      description: You can optionally have the script automatically cancel its fade
        if the lamp’s brightness were to be manually changed by a certain amount.
        For example, let’s suppose that you were to set this value to 5% and then
        you were to run this script. If there comes a point within the fade where
        this script is expecting the lamp to be at, say, 22% brightness—but you’ve
        just manually set that lamp to 30% brightness—this script will automatically
        cancel its fade since that 8% difference is >= 5%. Note—if you use this, Ashley
        doesn’t recommend setting this to anything less than about 3; that’s just
        because it can be normal for there to be an occasional difference of 1 or
        2 since not all lamps instantly reflect newly assigned brightness values due
        to processing lag and other factors. In Ashley’s home, she personally uses
        a value of about 5 for this.
      selector:
        number:
          min: 2
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: '%'
      default: 10
      example: '10'
      required: false
    endBrightnessEntity:
      name: (optional) Use an entity instead for the end-brightness value?
      description: You can optionally have the script ignore the end-brightness value
        above and instead use the numeric value of another entity that you select
        here, such as an input-number helper, an input-select helper, an input-text
        helper, or a numeric sensor.
      selector:
        entity:
          domain:
          - input_number
          - input_select
          - input_text
          - sensor
      example: input_number.dining_room_entertaining_level
      required: false
      advanced: true
    endBrightnessEntityScale:
      name: The end-brightness entity’s brightness scale (if used)
      description: If you enable the “Use an entity for the end-brightness value instead”
        option, select here whether your chosen entity represents brightness with
        a 0% to 100% scale or a 0 to 255 scale. (Note—in either case, this script
        will expect that entity to solely have an integer value without any nonnumeric
        characters such as “%”.)
      advanced: true
      selector:
        select:
          options:
          - label: 0% to 100%
            value: zeroToOneHundred
          - label: 0 to 255
            value: zeroToTwoFiftyFive
      default: zeroToOneHundred
      required: true
    stopEntity:
      name: "\U0001F6D1 (optional) Stop if a certain entity is turned on during the
        fade?"
      description: 'You can optionally have the script keep an eye on an input boolean
        or a binary sensor. And if that entity is then turned on during the fade,
        the script will automatically stop. So for example, if you create a “Stop
        Everything” input boolean, and if you set that entity here, you can stop your
        fade at any time by turning on that “Stop Everything” entity. '
      selector:
        entity:
          domain:
          - input_boolean
          - binary_sensor
      example: input_boolean.stop_everything
      required: false
      advanced: true
    shouldResetTheStopEntityToOffAtStart:
      name: (optional) Reset that stop entity to “off” just before starting the fade?
      description: If you make use of the stop entity (above), you can also optionally
        have the script automatically reset that entity to “off” at the start of the
        fade. (By default, the script won’t change the value of the stop entity.)
      selector:
        boolean:
      advanced: true
      required: true
      default: false
    minimumStepDelayInMilliseconds:
      name: Minimum delay per step
      description: The minimum delay between sending each brightness command. Some
        lamps only accept commands every X milliseconds—so while you can probably
        leave this as is, if by chance your lamp were to behave strangely, you might
        try bumping up this number by another ten or twenty milliseconds.
      advanced: true
      required: true
      selector:
        number:
          min: 50
          max: 1000
          step: 10
          mode: slider
          unit_of_measurement: ms
      default: 100
      example: '100'
    isDebugMode:
      name: "\U0001F41B Enable debugging mode?"
      description: If this is enabled, the script will output status messages to your
        Home Assistant log along the way. Unless something were to be acting weirdly,
        you can leave this off.
      selector:
        boolean:
      advanced: true
      required: true
      default: false
  mode: parallel
  sequence:
  - variables:
      lightFriendlyName: '{{ state_attr(light, ''friendly_name'') }}'
      startTimestamp: '{{ as_timestamp(now()) }}'
      transitionTimeInSeconds: '{{ ((transitionTime.hours | int) * 60 * 60) + ((transitionTime.minutes
        | int) * 60) + (transitionTime.seconds | int) }}

        '
      endTimestamp: '{{ startTimestamp + transitionTimeInSeconds }}'
      transitionTimeInMilliseconds: '{{ transitionTimeInSeconds * 1000 }}'
      ignoreTheEndBrightnessValueAndUseAnEntityForTheEndBrightnessInstead: "{% if
        (endBrightnessEntity is defined) and (has_value(endBrightnessEntity)) %}\n
        \ {{ true }}\n{% else %}\n  {{ false }}\n{% endif %}\n"
      stopEntityIsEnabled: "{% if (stopEntity is defined) and (has_value(stopEntity))
        %}\n  {{ true }}\n{% else %}\n  {{ false }}\n{% endif %}\n"
      stopEntityIsEditable: "{% if stopEntityIsEnabled %}\n  {% set stopEntityEditableAttribute
        = state_attr(stopEntity, 'editable') %}\n  {% if stopEntityEditableAttribute
        %}\n    {{ true}}\n  {% else %}\n    {{ false }}\n  {% endif %}\n{% else %}\n
        \ {{ false }}\n{% endif %}\n"
      stopEntityFriendlyName: "{% if stopEntityIsEnabled %}\n  {{ state_attr(stopEntity,
        'friendly_name') }}\n{% else %}\n  {{ \"\" }}\n{% endif %}\n"
      startBrightness: "{% set rawLightLevel = state_attr(light, 'brightness') %}\n{##
        If a light is off, its brightness will return \"None\"? So first check if
        there's a valid brightness before setting the value ##} {% if rawLightLevel
        %}\n\t{% set currentLightLevel = rawLightLevel | int %}\n{% else %}\n\t{%
        set currentLightLevel = 0 %}\n{% endif %} {% if lampBrightnessScale == \"zeroToOneHundred\"
        %}\n  {% set currentLightLevel = (currentLightLevel / 2.55) | round(0) %}\n{%
        endif %} {{ currentLightLevel }}\n"
      endBrightness: "{% if ignoreTheEndBrightnessValueAndUseAnEntityForTheEndBrightnessInstead
        %}\n\n  {% set entityBrightnessValue = states(endBrightnessEntity) | round
        (0) %}\n  {% if (endBrightnessEntityScale == lampBrightnessScale) %}\n    {%
        set endBrightness = entityBrightnessValue %}\n  {% elif (lampBrightnessScale
        == \"zeroToTwoFiftyFive\") and (endBrightnessEntityScale == \"zeroToOneHundred\")
        %}\n    {% set endBrightness = (entityBrightnessValue * 2.55) | round(0) %}\n
        \ {% elif (lampBrightnessScale == \"zeroToOneHundred\") and (endBrightnessEntityScale
        == \"zeroToTwoFiftyFive\") %}\n    {% set endBrightness = (entityBrightnessValue
        / 2.55) | round(0) %}\n  {% endif %}\n{% else %}\n  {## branch for ignoreTheEndBrightnessValueAndUseAnEntityForTheEndBrightnessInstead
        being off ##}\n  {% if lampBrightnessScale == \"zeroToOneHundred\" %}\n  \t{%
        set endBrightness = endBrightnessPercent %}\n  {% else %}\n    {% set endBrightness
        = (endBrightnessPercent * 2.55) | round(0) %}\n  {% endif %}\n{% endif %}
        {{ endBrightness }}\n"
      brightnessSpan: '{{ endBrightness - startBrightness }}'
      absoluteBrightnessSpan: '{{ brightnessSpan | abs }}'
      autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged: "{% if (autoCancelThreshold
        is defined) and (is_number(autoCancelThreshold)) %}\n  {{ true }}\n{% else
        %}\n  {{ false }}\n{% endif %}\n"
      normalizedAutoCancelThreshold: "{% if not autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged
        %}\n  {## exit early if autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged
        isn’t even enabled ##}\n  {{ 255 }}\n{% elif (lampBrightnessScale == \"zeroToTwoFiftyFive\")
        %}\n  {{ (autoCancelThreshold * 2.55) | round (0) }}\n{% else %}\n  {{ autoCancelThreshold
        }}\n{% endif %}\n"
      expectedBrightness: '{{ startBrightness }}'
  - if:
    - condition: template
      value_template: "{{ stopEntityIsEnabled and stopEntityIsEditable and shouldResetTheStopEntityToOffAtStart
        }}        \n"
    then:
    - service: input_boolean.turn_off
      data: {}
      target:
        entity_id: '{{ stopEntity }}'
  - if:
    - condition: template
      value_template: "{{ (absoluteBrightnessSpan | int) == 0 }}        \n"
    then:
    - variables:
        stopMessage: '{% set stopMessage = "Stopped Ashley’s Fader because " + (lightFriendlyName
          | string) + "’s starting brightness is the same as its ending brightness."
          %} {{ stopMessage }}

          '
    - if:
      - condition: template
        value_template: '{{ isDebugMode }}

          '
      then:
      - service: system_log.write
        data_template:
          message: '{{ stopMessage }}

            '
          level: warning
    - stop: '{{ stopMessage }}

        '
  - if:
    - condition: template
      value_template: "{## init ##} {% set stopEntityStatus = false %} {% if stopEntityIsEnabled
        %}\n  {% if bool(states(stopEntity), false) %}\n    {% set stopEntityStatus
        = true %}\n  {% endif %}\n{% endif %} {{ stopEntityStatus }}\n"
    then:
    - variables:
        stopMessage: '{% set stopMessage = "Stopped Ashley’s Fader because " + (stopEntityFriendlyName
          | string) + " is on." %} {{ stopMessage }}

          '
    - if:
      - condition: template
        value_template: '{{ isDebugMode }}

          '
      then:
      - service: system_log.write
        data_template:
          message: '{{ stopMessage }}

            '
          level: warning
    - stop: '{{ stopMessage }}

        '
  - variables:
      timestampBeforeServiceCall: '{{ as_timestamp(now()) }}'
  - if:
    - condition: template
      value_template: '{{ (lampBrightnessScale == "zeroToTwoFiftyFive") }}

        '
    then:
    - service: light.turn_on
      target:
        entity_id: '{{ light }}'
      data:
        brightness: '{{ expectedBrightness }}'
    else:
    - service: light.turn_on
      target:
        entity_id: '{{ light }}'
      data:
        brightness_pct: '{{ expectedBrightness }}'
  - variables:
      processingDelayInMilliseconds: '{{ (as_timestamp(now()) -  timestampBeforeServiceCall)
        * 1000 }}'
      easingType: "{% if \"auto\" in easingTypeInput %}\n  {% if (startBrightness
        == 0) and (transitionTimeInSeconds <= 20) %}\n    {{ \"easeOutCubic\" }}\n
        \ {% elif (startBrightness == 0) and (transitionTimeInSeconds <= 55) %}\n
        \   {{ \"easeOutQuad\" }}\n  {% elif (endBrightness == 0) and (transitionTimeInSeconds
        <= 20) %}\n    {{ \"easeInCubic\" }}\n  {% elif (endBrightness == 0) and (transitionTimeInSeconds
        <= 55) %}\n    {{ \"easeInQuad\" }}\n  {% else %}\n    {{ \"easeInOutSine\"
        }}\n  {% endif %}\n{% else %}\n  {{ easingTypeInput }}\n{% endif %}\n"
      remainingTimeInMilliseconds: '{% set nowTimestamp = as_timestamp(now()) %} {{
        (endTimestamp - nowTimestamp) * 1000 }}

        '
      delayInMilliseconds: "{% set totalExpectedRemainingProcessingDelay = processingDelayInMilliseconds
        * absoluteBrightnessSpan %} {% set idealDelay = ((remainingTimeInMilliseconds
        - totalExpectedRemainingProcessingDelay) / absoluteBrightnessSpan) | round(0)
        %}\n{% if \"auto\" in easingType %}\n  {% if (startBrightness == 0) and (transitionTimeInSeconds
        < 20) %}\n    {% set easingType = \"easeOutCubic\" %}\n  {% elif (endBrightness
        == 0) and (transitionTimeInSeconds < 20) %}\n    {% set easingType = \"easeInCubic\"
        %}\n  {% else %}\n    {% set easingType = \"easeInOutQuad\" %}\n  {% endif
        %}\n{% endif %}\n{% if \"Circ\" in easingType %}\n  {## Four as many frames
        for Circ-type easing ##}\n  {% set idealDelay = (idealDelay / 4) | round(0)
        %}\n{% elif (\"Cubic\" in easingType) or (\"Quart\" in easingType) %}\n  {##
        Three as many frames for Cubic-type or Quart-type easing ##}\n  {% set idealDelay
        = (idealDelay / 3) | round(0) %}\n{% elif \"ease\" in easingType %}\n  {##
        Twice as many frames for other easing types ##}\n  {% set idealDelay = (idealDelay
        / 2) | round(0) %}\n{% endif %}\n{## Make sure that the delay isn’t below
        the minimum delay ##} {% if idealDelay < minimumStepDelayInMilliseconds %}\n
        \ {{ minimumStepDelayInMilliseconds }}\n{% else %}\n  {{ idealDelay }}\n{%
        endif %}\n"
  - if:
    - condition: template
      value_template: '{{ isDebugMode }}

        '
    then:
    - service: system_log.write
      data_template:
        message: '{{ easingType }} easing type with {{ delayInMilliseconds | int }}
          ms delay. remainingTimeInMilliseconds = {{ remainingTimeInMilliseconds |
          round(0) }}, and absoluteBrightnessSpan = {{ absoluteBrightnessSpan }}

          '
        level: warning
    - service: system_log.write
      data_template:
        message: 'startBrightness = {{ startBrightness }}, endBrightness = {{ endBrightness
          }}, and  processingDelayInMilliseconds = {{ processingDelayInMilliseconds
          | int }}

          '
        level: warning
  - repeat:
      sequence:
      - variables:
          timestampBeforeServiceCall: '{{ as_timestamp(now()) }}'
          percentageOfTimeCompleted: "{% set nowTimestamp = as_timestamp(now()) %}
            {% set percentageOfTimeCompleted = ((nowTimestamp - startTimestamp) /
            transitionTimeInSeconds) %} {% if (percentageOfTimeCompleted < 0) %}\n
            \ {% set percentageOfTimeCompleted = 0 %}\n{% elif (percentageOfTimeCompleted
            > 1) %}\n  {% set percentageOfTimeCompleted = 1 %}\n{% endif %} {{ percentageOfTimeCompleted
            }}\n"
          easingAdjustedPercentageCompleted: "{% set percentageOfTimeCompleted = percentageOfTimeCompleted
            | float(0) %} {% if easingType == \"easeInSine\" %}\n  {## https://easings.net/#easeInSine
            ##}\n  {{  1 - cos((percentageOfTimeCompleted * pi) / 2) }}\n\n{% elif
            easingType == \"easeInQuad\" %}\n  {## https://easings.net/#easeInQuad
            ##}\n  {{ percentageOfTimeCompleted * percentageOfTimeCompleted }} \n\n{%
            elif easingType == \"easeInCubic\" %}\n  {## https://easings.net/#easeInCubic
            ##}\n  {{ percentageOfTimeCompleted * percentageOfTimeCompleted * percentageOfTimeCompleted
            }}\n\n{% elif easingType == \"easeInQuart\" %}\n  {## https://easings.net/#easeInQuart
            ##}\n  {{ percentageOfTimeCompleted * percentageOfTimeCompleted * percentageOfTimeCompleted
            * percentageOfTimeCompleted }}\n  \n{% elif easingType == \"easeOutSine\"
            %}\n  {## https://easings.net/#easeOutSine ##}\n  {{ sin((percentageOfTimeCompleted
            * pi) / 2) }}\n\n{% elif easingType == \"easeOutQuad\" %}\n  {## https://easings.net/#easeOutQuad
            ##}\n  {{ 1 - (1 - percentageOfTimeCompleted)* (1 - percentageOfTimeCompleted)
            }} \n\n{% elif easingType == \"easeOutCubic\" %}\n  {## https://easings.net/#easeOutCubic
            ##}\n  {{ 1 - ((1 - percentageOfTimeCompleted) ** 3) }}\n\n{% elif easingType
            == \"easeOutQuart\" %}\n  {## https://easings.net/#easeOutQuart ##}\n
            \ {{ 1 - ((1 - percentageOfTimeCompleted) ** 4) }}\n\n{% elif easingType
            == \"easeInOutSine\" %}\n  {## https://easings.net/#easeInOutSine ##}\n
            \ {{ -1 * ((cos(pi * percentageOfTimeCompleted) - 1) / 2) }}\n  \n{% elif
            easingType == \"easeInOutQuad\" %}\n  {## https://easings.net/#easeInOutQuad
            ##}\n  {% if (percentageOfTimeCompleted < 0.5) %}\n    {{ 2 * percentageOfTimeCompleted
            * percentageOfTimeCompleted }} \n  {% else %}\n    {{ 1- (((-2 * percentageOfTimeCompleted
            + 2) ** 2) / 2) }} \n  {% endif %}\n  \n{% elif easingType == \"easeInOutCubic\"
            %}\n  {## https://easings.net/#easeInOutCubic ##}\n  {% if (percentageOfTimeCompleted
            < 0.5) %}\n    {{ 4 * percentageOfTimeCompleted * percentageOfTimeCompleted
            * percentageOfTimeCompleted }} \n  {% else %}\n    {{ 1- (((-2 * percentageOfTimeCompleted
            + 2) ** 3) / 2) }} \n  {% endif %}\n    \n{% elif easingType == \"easeInOutQuart\"
            %}\n  {## https://easings.net/#easeInOutQuart ##}\n  {% if (percentageOfTimeCompleted
            < 0.5) %}\n    {{ 8 * percentageOfTimeCompleted * percentageOfTimeCompleted
            * percentageOfTimeCompleted * percentageOfTimeCompleted }} \n  {% else
            %}\n    {{ 1 - (((-2 * percentageOfTimeCompleted + 2) ** 4) / 2) }} \n
            \ {% endif %}\n{% else %}\n  {## linear ##}\n  {{ percentageOfTimeCompleted
            }}\n{% endif %}\n"
          expectedBrightness: "{% set startBrightness = startBrightness | int %} {%
            set brightnessSpan = brightnessSpan | int %} {% set easingAdjustedPercentageCompleted
            = easingAdjustedPercentageCompleted | float(0) %}\n{% set calculatedBrightness
            = (startBrightness + (brightnessSpan * easingAdjustedPercentageCompleted))
            | round(0) %}\n{% if (calculatedBrightness < 0) %}\n  {% set calculatedBrightness
            = 0 %}\n{% elif (calculatedBrightness > 255) %}\n  {% set calculatedBrightness
            = 255 %}\n{% endif %}\n{% if (endBrightness >= startBrightness) and (calculatedBrightness
            > endBrightness) %}\n  {% set calculatedBrightness = endBrightness %}\n{%
            elif (endBrightness < startBrightness) and (calculatedBrightness < endBrightness)
            %}\n  {% set calculatedBrightness = endBrightness %}\n{% endif %}\n{{
            calculatedBrightness }}\n"
          linearExpectedBrightness: "{% set startBrightness = startBrightness | int
            %} {% set brightnessSpan = brightnessSpan | int %} {% set percentageOfTimeCompleted
            = percentageOfTimeCompleted | float(0) %}\n{% set calculatedBrightness
            = (startBrightness + (brightnessSpan * percentageOfTimeCompleted)) | round(0)
            %} \n{% if (calculatedBrightness < 0) %}\n  {% set calculatedBrightness
            = 0 %}\n{% elif (calculatedBrightness > 255) %}\n  {% set calculatedBrightness
            = 255 %}\n{% endif %}\n{% if (endBrightness >= startBrightness) and (calculatedBrightness
            > endBrightness) %}\n  {% set calculatedBrightness = endBrightness %}\n{%
            elif (endBrightness < startBrightness) and (calculatedBrightness < endBrightness)
            %}\n  {% set calculatedBrightness = endBrightness %}\n{% endif %}\n{{
            calculatedBrightness }}\n"
          currentBrightness: "{% set rawLightLevel = state_attr(light, 'brightness')
            %}\n{## If a light is off, its brightness will return 'None'. So first
            check if there's a valid brightness before getting the value ##}\n{% if
            rawLightLevel %}\n  {% set currentLightLevel = rawLightLevel | int %}\n{%
            else %}\n  {% set currentLightLevel = 0 %}\n{% endif %} {% if lampBrightnessScale
            == \"zeroToOneHundred\" %}\n  {% set currentLightLevel = (currentLightLevel
            / 2.55) | round(0) %}\n{% endif %} {{ currentLightLevel }}\n"
      - if:
        - condition: template
          value_template: '{{ (currentBrightness | int) != (endBrightness | int) }}

            '
        then:
        - if:
          - condition: template
            value_template: '{{ (lampBrightnessScale == "zeroToTwoFiftyFive") }}

              '
          then:
          - service: light.turn_on
            target:
              entity_id: '{{ light }}'
            data:
              brightness: '{{ expectedBrightness }}'
          else:
          - service: light.turn_on
            target:
              entity_id: '{{ light }}'
            data:
              brightness_pct: '{{ expectedBrightness }}'
        - if:
          - condition: template
            value_template: '{{ isDebugMode }}

              '
          then:
          - service: system_log.write
            data_template:
              message: 'Set {{ lightFriendlyName }} to {{ expectedBrightness | int
                }} brightness. (Linear brightness would have been {{ linearExpectedBrightness
                | int }}.) Delay is {{ delayInMilliseconds | int }} ms. Elapsed time
                is {{ (as_timestamp(now()) - startTimestamp) | round(2) }} seconds.
                (endBrightness is {{ endBrightness}}.)

                '
              level: warning
      - delay:
          milliseconds: '{{ delayInMilliseconds | float(0) }}'
      - variables:
          currentBrightness: "{% set rawLightLevel = state_attr(light, 'brightness')
            %} {## If a light is off, its brightness will return \"None\"? So first
            check if there's a valid brightness before getting the value ##} {% if
            rawLightLevel %}\n\t{% set currentLightLevel = rawLightLevel | int %}\n{%
            else %}\n\t{% set currentLightLevel = 0 %}\n{% endif %} {% if lampBrightnessScale
            == \"zeroToOneHundred\" %}\n  {% set currentLightLevel = (currentLightLevel
            / 2.55) | round(0) %}\n{% endif %} {{ currentLightLevel }}\n"
          brightnessDifferenceFromExpected: '{{ ( (currentBrightness | int) - (expectedBrightness
            | int) ) | abs }}

            '
          isBrightnessDifferenceAboveAutoCancelThreshold: "{% if autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged
            %}\n  {{ (brightnessDifferenceFromExpected | int) >= (normalizedAutoCancelThreshold
            | int) }}\n{% else %}\n  {{ false }}\n{% endif %}\n"
      - if:
        - condition: template
          value_template: '{{ autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged
            and isBrightnessDifferenceAboveAutoCancelThreshold }}

            '
        then:
        - variables:
            stopMessage: "{% if lampBrightnessScale == \"zeroToTwoFiftyFive\" %}\n
              \ {% set currentBrightnessAsPercentage = (currentBrightness / 2.55)
              | round(0) %}\n  {% set expectedBrightnessAsPercentage = (expectedBrightness
              / 2.55) | round(0) %}\n  {% set differenceFromExpectedAsPercentage =
              (brightnessDifferenceFromExpected / 2.55) | round(0) %}\n{% else %}\n
              \ {% set currentBrightnessAsPercentage = currentBrightness %}\n  {%
              set expectedBrightnessAsPercentage = expectedBrightness %}\n  {% set
              differenceFromExpectedAsPercentage = brightnessDifferenceFromExpected
              %}\n{% endif %}\n{% set stopMessage = \"Stopped Ashley’s Fader because
              \" + (lightFriendlyName | string) + \" was found to be at \" + (currentBrightnessAsPercentage
              | string) + \"%, a difference of \" + (differenceFromExpectedAsPercentage
              | string) + \" percentage points from the expected brightness of \"
              + (expectedBrightnessAsPercentage | string) + \"%, which is higher than
              the auto-cancel threshold of \" + (autoCancelThreshold | string) + \"
              percentage points.\" %} {{ stopMessage }}\n"
        - if:
          - condition: template
            value_template: '{{ isDebugMode }}

              '
          then:
          - service: system_log.write
            data_template:
              message: '{{ stopMessage }}

                '
              level: warning
        - stop: '{{ stopMessage }}

            '
      - if:
        - condition: template
          value_template: "{## init ##} {% set stopEntityStatus = false %} {% if stopEntityIsEnabled
            %}\n  {% if bool(states(stopEntity), false) %}\n    {% set stopEntityStatus
            = true %}\n  {% endif %}\n{% endif %} {{ stopEntityStatus }}\n"
        then:
        - variables:
            stopMessage: '{% set stopMessage = "Stopped Ashley’s Fader because " +
              (stopEntityFriendlyName | string) + " is on." %} {{ stopMessage }}

              '
        - if:
          - condition: template
            value_template: '{{ isDebugMode }}

              '
          then:
          - service: system_log.write
            data_template:
              message: '{{ stopMessage }}

                '
              level: warning
        - stop: '{{ stopMessage }}

            '
      until:
      - condition: template
        value_template: "{{ (as_timestamp(now()) >= endTimestamp) \n  or ((endBrightness
          >= startBrightness) and (expectedBrightness >= endBrightness))\n  or ((endBrightness
          < startBrightness) and (expectedBrightness <= endBrightness)) }}\n"
  - variables:
      currentBrightness: "{% set rawLightLevel = state_attr(light, 'brightness') %}\n{##
        If a light is off, its brightness will return 'None'. So first check if there's
        a valid brightness before getting the value ##} {% if rawLightLevel %}\n\t{%
        set currentLightLevel = rawLightLevel | int %}\n{% else %}\n\t{% set currentLightLevel
        = 0 %}\n{% endif %} {% if lampBrightnessScale == \"zeroToOneHundred\" %}\n
        \ {% set currentLightLevel = (currentLightLevel / 2.55) | round(0) %}\n{%
        endif %} {{ currentLightLevel }}\n"
      brightnessDifferenceFromExpected: '{{ ( (currentBrightness | int) - (endBrightness
        | int) ) | abs }}

        '
      isBrightnessDifferenceAboveAutoCancelThreshold: "{% if autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged
        %}\n  {{ (brightnessDifferenceFromExpected | int) > (normalizedAutoCancelThreshold
        | int) }}\n{% else %}\n  {{ false }}\n{% endif %}\n"
  - if:
    - condition: template
      value_template: '{{ ((currentBrightness | int) != (endBrightness | int))  and
        ((not autoCancelTheFadeIfTheLampBrightnessIsManuallyChanged) or (not isBrightnessDifferenceAboveAutoCancelThreshold))
        }}

        '
    then:
    - if:
      - condition: template
        value_template: '{{ (lampBrightnessScale == "zeroToTwoFiftyFive") }}

          '
      then:
      - service: light.turn_on
        target:
          entity_id: '{{ light }}'
        data:
          brightness: '{{ endBrightness }}'
      else:
      - service: light.turn_on
        target:
          entity_id: '{{ light }}'
        data:
          brightness_pct: '{{ endBrightness }}'
  max: 10
  icon: mdi:lightbulb-on-50
back_door_light_with_level:
  alias: Back Door Light With Level
  sequence:
  - service: light.turn_on
    entity_id: light.back_door_light
    data:
      brightness: "{{ level | int }} \n"
  mode: single
back_door_light_dim_when_door_closed:
  alias: Back Door Light Dim When Door Closed
  sequence:
  - data:
      value: 255
    target:
      entity_id: input_number.back_door_light_level
    action: input_number.set_value
  - repeat:
      while:
      - condition: template
        value_template: '{{ states("input_number.back_door_light_level") | int > 0
          }}'
      sequence:
      - data:
          level: '{{ states("input_number.back_door_light_level") }}'
        action: script.back_door_light_with_level
      - target:
          entity_id: input_number.back_door_light_level
        data: {}
        action: input_number.decrement
      - delay:
          hours: 0
          minutes: 0
          seconds: 30
          milliseconds: 0
  - data: {}
    target:
      entity_id: light.back_door_light
    action: light.turn_off
  - data:
      value: 255
    target:
      entity_id: input_number.back_door_light_level
    action: input_number.set_value
  mode: restart
saving_session_prep_and_export_battery:
  alias: Saving Session prep and export battery
  sequence:
  - variables:
      saving_session_start: '{{ states(''binary_sensor.octopus_energy_saving_session'')
        }}

        '
  mode: single
battery_pre_peak_top_up:
  alias: Battery pre-peak top up
  sequence:
  - service: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.home_battery_grid_charging
  - service: script.grid_charge_battery
    metadata: {}
    data: {}
  - service: script.speech_engine
    metadata: {}
    data:
      where: '{{states(''sensor.room_audio'')}}'
      message: Attention in the house.  The home battery is performing a half hour
        pree peak topup, as its charge level is {{ states('sensor.battery_state_of_charge')
        }}%.
  mode: single
battery_pre_peak_top_down:
  alias: Battery pre-peak top down
  sequence:
  - service: script.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: script.grid_charge_battery
  - device_id: 952193e87f675ba7f7e32eda5500c572
    domain: select
    entity_id: 0bdfb19491b49722c2a94351b9a673aa
    type: select_option
    option: Maximize Self Consumption
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.home_battery_grid_charging
  - service: timer.cancel
    metadata: {}
    data: {}
    target:
      entity_id: timer.home_battery_3_hour_charge_period
  - service: script.speech_engine
    metadata: {}
    data:
      where: '{{states(''sensor.room_audio'')}}'
      message: Attention in the house.  The home battery has completed a half hour
        pree peak topup and its charge level is now a more healthy {{ states('sensor.battery_state_of_charge')
        }}%.
  mode: single
update_rechargeable_battery_group:
  alias: Update Rechargeable Battery Group
  sequence:
  - service: group.set
    data:
      object_id: rechargeable_batteries
      entities: []
  - service: group.set
    data:
      object_id: rechargeable_batteries
      add_entities: "{{ states.sensor | \n  selectattr('entity_id', 'in', area_entities('Rechargeable
        Battery')) |\n  map(attribute='entity_id') | list  | join(',') }} "
  mode: single
update_srv_critical_battery_group:
  alias: Update SRV Critical Battery Group
  sequence:
  - service: group.set
    data:
      object_id: srv_critical_batteries
      entities: []
  - service: group.set
    data:
      object_id: srv_critical_batteries
      add_entities: "{{ states.binary_sensor | \n  selectattr('entity_id', 'in', area_entities('SRV
        Critical Battery')) |\n  map(attribute='entity_id') | list  | join(',') }} "
  mode: single
gem_s_phone_location:
  alias: Gem's phone location
  sequence:
  - service: alexa_media.update_last_called
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: script.speech_engine
    data:
      where: '{{ states(''sensor.room_audio'')}}'
      message: "{% if states('sensor.gems_phone_espresence')  == 'not_home' %} \n
        \ I am unble to determine the exact location of Gemmas phone at this time.
        \n{% else %}\n  Gemmas phone is in the \"{{ states('sensor.gems_phone_espresence')}}\"\n{%
        endif %}\n"
  description: ''
dave_s_phone_location:
  alias: Dave's phone location
  sequence:
  - service: alexa_media.update_last_called
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: script.speech_engine
    data:
      where: '{{ states(''sensor.room_audio'')}}'
      message: "{% if states('sensor.daves_phone_espresence')  == 'not_home' %} \n
        \ I am unble to determine the exact location of Daves phone at this time.
        \n{% else %}\n  Daves phone is in the \"{{ states('sensor.daves_phone_espresence')}}\"\n{%
        endif %}\n"
  description: ''
spare_room_night_light:
  alias: Spare Room Night Light
  sequence:
  - service: input_boolean.turn_off
    target:
      entity_id:
      - input_boolean.guest_bedroom_allow_lights_off
      - input_boolean.guest_bedroom_bedside_lamps_active
    data: {}
  - service: light.turn_off
    target:
      entity_id: light.spare_room_lights
    data: {}
  - service: light.turn_off
    target:
      entity_id:
      - light.guest_bedroom_bedside_lamp_right
    data: {}
  - service: light.turn_on
    target:
      entity_id:
      - light.guest_bedroom_bedside_lamp_left
    data:
      rgb_color:
      - 255
      - 0
      - 0
      brightness_pct: 1
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.guest_bedroom_night_lights_active
  - condition: state
    entity_id: switch.adaptive_lighting_sleep_mode_spare_room_lamps
    state: 'off'
  - service: switch.turn_on
    target:
      entity_id: switch.adaptive_lighting_sleep_mode_spare_room_lamps
    data: {}
  description: ''
ironing_lights:
  alias: Ironing Lights
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ state_attr(''light.spare_room_lights'',''brightness'')
          == 255 }}

          '
      sequence:
      - service: input_boolean.toggle
        target:
          entity_id: input_boolean.guest_bedroom_allow_lights_off
        data: {}
      - service: switch.toggle
        target:
          entity_id: switch.adaptive_lighting_spare_room_ceiling_lights
        data: {}
      - service: light.turn_off
        target:
          entity_id: light.spare_room_lights
        data: {}
    default:
    - service: input_boolean.toggle
      target:
        entity_id: input_boolean.guest_bedroom_allow_lights_off
      data: {}
    - service: switch.toggle
      target:
        entity_id: switch.adaptive_lighting_spare_room_ceiling_lights
      data: {}
    - service: light.turn_on
      target:
        entity_id: light.spare_room_lights
      data:
        brightness_pct: 100
        kelvin: 6500
  description: Spare Room Lights to Full Brightness
update_occupancy_groups:
  alias: Update Occupancy Groups
  sequence:
  - service: group.set
    data:
      object_id: living_room_occupancy
      entities: []
  - service: group.set
    data:
      object_id: living_room_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('living room')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion|running)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: kitchen_occupancy
      entities: []
  - service: group.set
    data:
      object_id: kitchen_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('kitchen')) \n    | rejectattr('attributes.device_class', 'undefined')
        \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion|running|door)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: dining_room_occupancy
      entities: []
  - service: group.set
    data:
      object_id: dining_room_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('dining room')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: utility_room_occupancy
      entities: []
  - service: group.set
    data:
      object_id: utility_room_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('utility room')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: cloakroom_occupancy
      entities: []
  - service: group.set
    data:
      object_id: cloakroom_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('cloakroom')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: hallway_occupancy
      entities: []
  - service: group.set
    data:
      object_id: hallway_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('hallway')) \n    | rejectattr('attributes.device_class', 'undefined')
        \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion|door)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: master_bedroom_occupancy
      entities: []
  - service: group.set
    data:
      object_id: master_bedroom_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('master bedroom')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion|running)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: guest_bedroom_occupancy
      entities: []
  - service: group.set
    data:
      object_id: guest_bedroom_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('guest bedroom')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion|running)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: seans_room_occupancy
      entities: []
  - service: group.set
    data:
      object_id: seans_room_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities(\"sean's room\")) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: jamies_room_occupancy
      entities: []
  - service: group.set
    data:
      object_id: jamies_room_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities(\"jamie's room\")) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: office_occupancy
      entities: []
  - service: group.set
    data:
      object_id: office_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('office')) \n    | rejectattr('attributes.device_class', 'undefined')
        \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: en_suite_occupancy
      entities: []
  - service: group.set
    data:
      object_id: en_suite_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('en-suite bathroom')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: garage_occupancy
      entities: []
  - service: group.set
    data:
      object_id: garage_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('garage')) \n    | rejectattr('attributes.device_class', 'undefined')
        \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: cloakroom_occupancy
      entities: []
  - service: group.set
    data:
      object_id: cloakroom_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('cloakroom')) \n    | rejectattr('attributes.device_class',
        'undefined') \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: loft_occupancy
      entities: []
  - service: group.set
    data:
      object_id: loft_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('loft')) \n    | rejectattr('attributes.device_class', 'undefined')
        \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion|door)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  - service: group.set
    data:
      object_id: landing_occupancy
      entities: []
  - service: group.set
    data:
      object_id: landing_occupancy
      add_entities: "{{ states.binary_sensor\n    | selectattr('entity_id', 'in',
        area_entities('landing')) \n    | rejectattr('attributes.device_class', 'undefined')
        \n    | selectattr('attributes.device_class', 'search', '(occupancy|motion)')\n
        \   | map(attribute='entity_id')\n    | list | join(' , ')}}"
  mode: single
  description: ''
max_location:
  alias: Max Location
  sequence:
  - service: alexa_media.update_last_called
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: script.speech_engine
    data:
      where: '{{ states(''sensor.room_audio'')}}'
      message: "{% if states('sensor.max')  == 'not_home' %} \n  I am unble to determine
        the exact location of Max at this time. \n{% else %}\n  Max is in the \"{{
        states('sensor.max')}}\"\n{% endif %}\n"
  description: ''
hux_location:
  alias: Hux Location
  sequence:
  - service: alexa_media.update_last_called
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: script.speech_engine
    data:
      where: '{{ states(''sensor.room_audio'')}}'
      message: "{% if states('sensor.huxley')  == 'not_home' %} \n  I am unble to
        determine the exact location of Huxley at this time. \n{% else %}\n  Huxley
        is in the \"{{ states('sensor.huxley')}}\"\n{% endif %}\n"
  description: ''
get_room_presence:
  alias: Get Room Presence
  sequence:
  - variables:
      occupied_rooms: "{% set rooms = ['living_room'] %} {% if is_state('input_boolean.audible_notifications',
        'on') %}\n  {% if expand('group.rooms') \n  | selectattr('state', 'eq', 'on')
        | list | count >= 1 %}\n  {% set rooms = expand('group.rooms') \n  | selectattr('state',
        'eq', 'on') \n  | sort(attribute='last_changed', reverse=True)\n  | map(attribute='name')
        | list %}\n  {%- endif -%}\n{% else -%}\n  {%- if expand('group.rooms')\n
        \ | rejectattr('name', 'search', 'bedroom') \n  | selectattr('state', 'eq',
        'on') | list | count >= 1 %}\n  {%- set rooms = expand('group.rooms') \n  |
        rejectattr('name', 'search', 'bedroom') \n  | selectattr('state', 'eq', 'on')
        \n  | sort(attribute='last_changed', reverse=True) \n  | map(attribute='name')|
        list %}\n  {%- endif -%}\n{% endif %} {{ rooms | replace('_occupied','') }}\n"
      occupied_rooms_cnt: "{% if is_state('input_boolean.audible_notifications', 'on')
        %}\n  {{ expand('group.rooms') \n    | selectattr('state', 'eq', 'on') | list
        | count }}\n{% else %}\n  {{ expand('group.rooms') \n    | rejectattr('name',
        'search', 'bedroom') \n    | selectattr('state', 'eq', 'on') | list | count
        }}\n{% endif %}\n"
      room_presence: '{"occupied_rooms":"{{occupied_rooms}}", "occupied_rooms_cnt":"{{occupied_rooms_cnt}}"}'
  - stop: ok, Im done.
    response_variable: room_presence
  description: ''
get_room_audio:
  alias: Get Room Audio
  sequence:
  - service: script.get_room_presence
    response_variable: presence
    data: {}
  - variables:
      type: "{% if type == 'alert' %}\n  alert\n{% elif room in ['dave','gem'] or
        type in ['priority','briefing'] %}\n  priority\n{% else %}\n  normal\n{% endif
        %}\n"
      room_priority: "{% if room is defined %}\n  {% if room in ['dave','gem']%}\n
        \   {{ states('sensor.'~room~'_room') }}\n  {% else %}\n    {{ room }}          \n
        \ {% endif %}\n{% else %}\n  NA         \n{% endif %}\n"
      rooms: "{{ presence.occupied_rooms |\n  replace('living_room','Living Room')
        |\n  replace('kitchen','Kitchen') |\n  replace('hallway','Kitchen') |\n  replace('cloakroom','Kitchen')
        |\n  replace('garage','Kitchen') |\n  replace('loft','Kitchen') |\n  replace('utility','Kitchen')
        |\n  replace('dining_room','Dining Room') |\n  replace('guest_bedroom','Guest
        Bedroom') |\n  replace('jamies_room','Jamies Bedroom') |\n  replace('seans_room','Seans
        Bedroom') |\n  replace('master_bedroom','Master Bedroom') |\n  replace('en_suite','Master
        Bedroom') |\n  replace('office','Office') |\n  replace('landing','Master Bedroom')
        |\n  replace('main_bathroom','Guest Bedroom') |\n  replace('kids_bathroom','Guest
        Bedroom') }}\n"
      room_services: "{% if type == 'alert'%}\n  {% set jarvis_speaker = states.media_player
        | \n    rejectattr('attributes.last_called', 'undefined') |\n    rejectattr('entity_id',
        'search', '(boys|fire|upstairs|downstairs|this_device|everywhere)') |\n    map(attribute='entity_id')
        |\n    list | join(',') %}\n  {% set audio_speaker = 'none' %}\n  {% set tts
        = 'amp' %}\n  {% set room = 'all' %}\n{% elif type in ['priority','briefing']
        %} \n  {% set room = room_priority |\n  replace('living_room','Living Room')
        |\n  replace('kitchen','Kitchen') |\n  replace('hallway','Kitchen') |\n  replace('cloakroom','Kitchen')
        |\n  replace('garage','Kitchen') |\n  replace('loft','Kitchen') |\n  replace('utility','Kitchen')
        |\n  replace('dining_room','Dining Room') |\n  replace('guest_bedroom','Guest
        Bedroom') |\n  replace('jamies_room','Jamies Bedroom') |\n  replace('seans_room','Seans
        Bedroom') |\n  replace('master_bedroom','Master Bedroom') |\n  replace('en_suite','Master
        Bedroom') |\n  replace('office','Office') |\n  replace('landing','Master Bedroom')
        |\n  replace('main_bathroom','Guest Bedroom') |\n  replace('kids_bathroom','Guest
        Bedroom') %}\n\n  {% set jarvis_speaker = states.media_player | \n      rejectattr('attributes.last_called',
        'undefined') |\n      selectattr('entity_id', 'in', area_entities(room)) |\n
        \     map(attribute='entity_id') |\n    list | first %}\n\n  {% set audio_speaker
        = states.media_player | \n      rejectattr('attributes.device_class', 'undefined')
        |\n      selectattr('entity_id','in',label_entities('Speaker')) | \n      selectattr('entity_id',
        'in', area_entities(room)) |\n      map(attribute='entity_id') |\n    list
        | first %}\n  \n  {% set tts = 'amp' %}\n{% elif type in ['normal','weather-alert','weather-advisory']
        %}\n  {% set ns = namespace(area_speakers = []) %}\n  {% for room in rooms
        %}\n    {% set ns.area_speakers = ns.area_speakers + states.media_player |
        \n    rejectattr('attributes.last_called', 'undefined') |\n    selectattr('entity_id',
        'in', area_entities(room))|\n    map(attribute='entity_id') | list %}\n  {%
        endfor %} \n  {% set jarvis_speaker = ns.area_speakers | join(',') %}\n  {%
        set room = rooms | join(',') %}\n  {% set audio_speaker = '' %}\n  {% set
        tts = 'amp' %}\n{% else %} \n  {% set room = 'none' %}\n  {% set jarvis_speaker
        = 'none' %}\n  {% set audio_speaker = 'none' %}\n  {% set tts = 'none' %}\n{%
        endif %} {\"area\":\"{{room}}\", \"jarvis_speaker\":\"{{jarvis_speaker}}\",
        \"jarvis_tts\":\"{{tts}}\", \"audio_speaker\":\"{{audio_speaker}}\", \"type\":\"{{type}}\"}\n"
  - stop: ok, Im done.
    response_variable: room_services
  description: ''
night_security_check:
  alias: Night Security Check
  sequence:
  - condition: state
    entity_id: binary_sensor.all_secure_night
    state: 'off'
  - choose:
    - conditions: []
      sequence:
      - service: script.status_annc
        data:
          where: living_room
          call_goodnight_secure: 1
    default:
    - service: script.status_annc
      data:
        where: living_room
        call_goodnight_not_secure: 1
  description: ''
jarvis_speech_engine:
  alias: Jarvis Speech Engine
  sequence:
  - response_variable: greetings
    data: {}
    action: script.get_tts_greeting
  - variables:
      type: "{% if type is defined and type != 'none' %}\n  {{ type }}\n{% else %}\n
        \ normal\n{% endif %}\n"
      summary: "{% if msg_summary %}\n  {{ msg_summary }}\n{% else %}\n  none\n{%
        endif %}\n"
      room: "{% if where is defined %}\n  {{ where }}\n{% elif room is defined %}\n
        \ {{ room }}\n{% else %}\n  NA\n{% endif %}\n"
      greeting: "{% if room == 'dave' %}\n  {{ greetings.dave }}\n{% elif room ==
        'gem' %}\n  {{ greetings.gem }}\n{% elif type == 'weather_warning' %}\n  {{
        greetings.weather_warning }}\n{% elif type == 'alert' %}\n  {{ greetings.alert
        }}\n{% else %}         \n{% endif %}\n"
      briefing_greeting: "{% if type == 'briefing' %}\n  {{ greetings.general }}\n{%
        else %} \n{% endif %}\n"
  - data:
      room: '{{room}}

        '
      type: '{{type}}

        '
    response_variable: room_services
    action: script.get_room_audio
  - data:
      message: '{{ briefing }} {{ greeting }} {{ message }}

        '
    response_variable: cleaned_message
    action: script.cleanup_text
  - data_template:
      topic: house/alexa/lastmsg
      payload: "{% if summary == 'none' %}\n  {{ cleaned_message.text | string }}\n{%
        else %}\n  {{ summary }}\n{% endif %}\n"
      retain: true
    action: mqtt.publish
  - data_template:
      topic: house/alexa/msgtime
      payload: '{{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")
        }} '
      retain: true
    action: mqtt.publish
  - data_template:
      topic: house/alexa/lastloc
      payload: '{{ room_services.area | string }}'
      retain: true
    action: mqtt.publish
  - data_template:
      topic: house/alexa/verbal
      payload: '{{ room_services.area != ''none''}}

        '
      retain: true
    action: mqtt.publish
  - data_template:
      topic: house/alexa/timestamp
      payload: '{{ as_timestamp(now()) }}

        '
      retain: true
    action: mqtt.publish
  - data_template:
      topic: house/jarvis/event
      payload: '{"destination":"{{ room_services.area | string }}", "message":"{{
        cleaned_message.text | string }}", "verbal":"{{ room_services.area != ''none''}}",
        "speaker":"{{ room_services.jarvis_speaker | string }}", "tts":"{{ room_services.jarvis_tts
        | string }}", "type":"{{type | string}}", "last_event":{{as_timestamp(now())}}}

        '
      retain: true
    action: mqtt.publish
  - condition: state
    entity_id: binary_sensor.family_home
    state: 'on'
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: 'off'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ type | string == ''alert'' }}'
      sequence:
      - data:
          entity_id: '{{ room_services.jarvis_speaker | string }}'
          volume_level: '{{ states(''input_number.alexa_volume_level_high'') | float
            }}

            '
        action: media_player.volume_set
      - data:
          message: '<voice name="{{ states(''input_select.echo_voice'') }}"> <amazon:auto-breaths>
            <prosody rate="115%"> {{ cleaned_message.text }} </prosody> </amazon:auto-breaths>
            </voice>

            '
          target: '{{ room_services.jarvis_speaker | string }}

            '
          data:
            type: tts
        action: notify.alexa_media
      - delay:
          seconds: 20
      - data:
          entity_id: '{{ room_services.jarvis_speaker | string }} '
          volume_level: '{{ states(''input_number.alexa_volume_level_announcements'')
            | float }}'
        action: media_player.volume_set
    - conditions:
      - condition: template
        value_template: '{{ room_services.jarvis_tts | string == ''amp'' }}'
      - condition: template
        value_template: '{{ room_services.jarvis_speaker | string != ''none'' }}'
      sequence:
      - data:
          message: '<voice name="{{ states(''input_select.echo_voice'') }}"> <amazon:auto-breaths>
            <prosody rate="115%"> {{ cleaned_message.text }} </prosody> </amazon:auto-breaths>
            </voice>

            '
          target: '{{ room_services.jarvis_speaker | string }}'
          data:
            type: tts
        action: notify.alexa_media
    default:
    - data:
        notification_id: house_notification
      action: persistent_notification.dismiss
    - data:
        notification_id: house_notification
        message: '{{ message }}'
        title: From Jarvis
      action: persistent_notification.create
  description: ''
get_tts_greeting:
  alias: Get tts Greeting
  sequence:
  - variables:
      general: "{% if now().hour < 12 %} {{ [\"Good Morning.\",\n    \"Morning.\",\n
        \   \"Hey there, How are you this fine morning? \"\n ] | random }}\n{% elif
        now().hour >= 12 and now().hour < 17 %} {{ [\"Good Afternoon.\",\n    \"Afternoon.\",\n
        \   \"Hey there, How are you this afternoon?\"\n ] | random }}\n{% else %}
        {{ [\"Good Evening. \",\n    \"Evening. \",\n    \"Hey there, How are you
        this fine evening?\"   \n ] | random }}\n{% endif %}\n"
      snark: "{% if now().hour < 12 %} {{ [\"Is anyone there? Ah yes,there you are.\",\n
        \   \"Wipe the sleep from your eyes.\",\n    \"In case you have not been keeping
        track, you might like to know.\",\n    \"Well done for dragging yourself out
        of bed. Now that you are up, I can inform you that.\",\n    \"This may or
        may not be good news.\" \n ] | random }}\n{% else %} {{ [\"Ahem! What time
        do you call this? You have missed half of the day.\",\n    \"The sun is well
        up passed the yard arm and in case you have not been keeping track.\",\n    \"Well!
        Better late than never I suppose.  Shall we do this?  Okay.\",\n    \"Now
        that you are awake I can tell you that.\"\n ]|random }}\n{% endif %}\n"
      jarvis_morning: "{{ [\n  general ~ ' Madam. ',\n  'Welcome home Madam. ',\n
        \ 'At your service Madam. ',\n  'Oh. Hello Madam. ',\n  'How are you this
        morning? '\n] | random }} {{ [\n  'Is it time to get to work? ',\n  'I have
        imported your preferences.',\n  'I am online and ready. ',\n  'Ready to get
        to work? '\n  'Alright, How are you? '\n  ''\n] | random }}\n"
      jarvis_welcome: "{{ [\n  general ~ 'Sir. ',\n  'Welcome home Sir.',\n  'Glad
        to see you made it back Sir.',\n  'Oh. Hello Sir. Welcome home.'\n] | random
        }}\n"
      announcement: "{% if states('sensor.gem_room') == room and states('sensor.dave_room')==
        room  %}\n  {{ \n    ['Pardon me everyone, ',\n    'Excuse me, ',\n    'I
        beg your pardon, ',\n    'Since I have you all together, ',\n    'I am sorry
        to intrude on this family gathering, but. ',\n    'While I have you all together,']
        \n    | random }}\n{% elif states('sensor.gem_room') == room  %}\n  {{ \n
        \   [\"Mam.\"\n     ] | random }}\n{% elif states('sensor.dave_room') == room
        \ %}\n  {{ \n    ['Sir. '\n    ] | random }}\n{% else %}\n  {{ \n   ['Pardon
        me, ',\n    'Excuse me, ',\n    'I beg your pardon, ',\n    'I do not mean
        to intrude, but, ',\n    'I am sorry to intrude, but. '\n    ] | random }}\n{%
        endif %}\n"
      dave: "{{ \n    ['Sir. '\n    ] | random }}\n"
      gem: "{{ \n    [\"Mam.\"\n     ] | random }}\n"
      alert: "{{ [\n  'Emergency Protocol initiated.',\n  'Emergency Response Initiated.
        ',\n  'My emergency protocols have been activated.',\n  'I have detected a
        potential threat to your safety.'\n  ] | random }}\n"
      weather_warning: "{{ [\n  'I have an alert from the Met Office.',\n  'Severe
        weather is approaching our area. ',\n  'I must insist that anyone who is currently
        outside prepare to move inside.',\n  'There appears to be severe weather heading
        in our direction.'\n  ] | random }}\n"
      confirmation: "{{ [\n  'Okay.', \n  'If you insist.',\n  'I am afraid I can
        not do that,, I am kidding,',\n  'Leave it to me.',\n  'Alright, Lets do this.',\n
        \ 'I am on it.',\n  'No Problem.',\n  'Will do.',\n  'I think I can handle
        that.',\n  'Working on it now.',\n  ', Oh, you were talking to me. Let me
        take care of that.'\n  'Why not. It is not like I ever sleep.',\n  'I am not
        even supposed to be here today. But whatever.',\n  'You did not say the magic
        word. , Oh forget it. I will take care of it.',\n  'Funny, I was just about
        to do that.',\n  'What was I thinking. You are usually so discreet.'\n  'There
        are still terabytes of calculations required before I can., Oh, whatever.
        '\n  ] | random }}\n"
  - data:
      message: '{{ announcement }}

        '
    response_variable: cleaned_annc_greeting
    action: script.cleanup_text
  - data:
      message: '{{ jarvis_morning }}

        '
    response_variable: cleaned_jarvis_morning
    action: script.cleanup_text
  - data:
      message: '{{ snark }}

        '
    response_variable: cleaned_snark
    action: script.cleanup_text
  - variables:
      greetings: "{\"general\":\"{{general}}\",\n \"snark\":\"{{cleaned_snark.text}}\",\n
        \"announcement\":\"{{cleaned_annc_greeting.text}}\",\n \"jarvis_morning\":\"{{cleaned_jarvis_morning.text}}\",\n
        \"jarvis_welcome\":\"{{jarvis_welcome}}\",\n \"dave\":\"{{dave}}\", \n \"gem\":\"{{gem}}\",\n
        \"alert\":\"{{alert}}\", \n \"weather_warning\":\"{{weather_warning}}\",\n
        \"confirmation\":\"{{confirmation}}\"}\n"
  - stop: ok, Im done.
    response_variable: greetings
  description: ''
cleanup_text:
  alias: Cleanup Text
  sequence:
  - variables:
      cleaned: "{%- macro getReport() -%}\n    {{ message }}\n{%- endmacro -%} {%-
        macro cleanup(data) -%}\n  {%- for item in data.split(\"\\n\")  if item |
        trim != \"\" -%}\n    {{ item | trim }} {% endfor -%}\n{%- endmacro -%} {%-
        macro mother_of_all_macros() -%}\n  {{ getReport() }}\n{%- endmacro -%}  {\"text\":\"{{-
        cleanup(mother_of_all_macros()) | string -}}\"}\n"
  - stop: ok, Im done.
    response_variable: cleaned
  description: ''
test_jarvis_briefing:
  alias: Test Jarvis Briefing
  sequence:
  - action: script.test_greeting
    data: {}
    response_variable: greeting
  - variables:
      message: '{{ greeting.jarvis_morning }}

        '
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_briefing
    action: script.cleanup_text
  - data:
      where: '{{ where }}

        '
      message: '{{ cleaned_briefing.text }}

        '
      msg_summary: Gave the test briefing.
      type: priority
    action: script.jarvis_speech_engine
  description: ''
get_weather_info:
  alias: Get Weather Info
  sequence:
  - service: script.cleanup_text
    data:
      message: '{{ states(''sensor.clothing_forecast_detail'') }}

        '
    response_variable: cleaned_cforecast
  - service: script.cleanup_text
    data:
      message: '{{ states(''sensor.sun_status'') }}

        '
    response_variable: cleaned_sun_status
  - service: script.cleanup_text
    data:
      message: '{{ states(''sensor.current_conditions_detail'') }}

        '
    response_variable: cleaned_current_conditions_detailed
  - service: script.cleanup_text
    data:
      message: '{{ states(''sensor.current_weather_warnings'') }}

        '
    response_variable: cleaned_warnings_detailed
  - variables:
      clothing_forecast: '{{ cleaned_cforecast.text }}

        '
      current_warnings: "{% set warning_count = states('sensor.weather_alerts_borders')|int
        %}\n{% if warning_count == 1 %}\n  {% set is_are = ' is ' %}\n  {% set warning_warnings
        = ' warning ' %}\n{%- else -%}\n  {% set is_are = ' are ' %}\n  {% set warning_warnings
        = ' warnings ' %}\n{% endif %}\n{% if warning_count | int > 0 %}\n  {{ 'There'
        ~ is_are ~ warning_count +' weather' ~ warning_warnings + 'affecting the Scottish
        Borders.'}}\n{% else %}\n          \n{% endif %}      \n"
      weather: '{"sun_status":"{{cleaned_sun_status.text}}", "current_warnings":"{{current_warnings}}",
        "current_warnings_detail":"{{cleaned_warnings_detailed.text}}", "current_conditions_detail":"{{cleaned_current_conditions_detailed.text}}",
        "clothing_forecast":"{{clothing_forecast}}"}

        '
  - stop: Alright. Im done.
    response_variable: weather
  description: ''
announcement:
  alias: Announcement
  sequence:
  - variables:
      type: "{% if type is defined %}\n  {{ type }}\n{% else %}\n  normal\n{% endif
        %}\n"
      room: "{% if where is defined %}\n  {{ where }}\n{% else %}\n  NA\n{% endif
        %}\n"
  - service: script.jarvis_speech_engine
    data:
      where: '{{ room }}

        '
      message: '{{ message }}

        '
  description: ''
briefing:
  alias: Briefing
  sequence:
  - service: script.jarvis_speech_engine
    data:
      where: '{{ where }}'
      message: "{% if now().strftime('%H')|int < 12%}\n Good morning.\n{% elif now().strftime('%H')|int
        >= 12 and now().strftime('%H')|int < 17 %}\n  Good afternoon.\n{% else %}\n
        \ Good evening.\n{% endif %} {% if states('sensor.gem_room') == where and
        states('sensor.dave_room') == where  %}\n  everyone.\n{% elif states('sensor.gem_room')
        == where  %}\n  Ma'am.\n{% elif states('sensor.dave_room') == where  %}\n
        \ Sir.\n{% else %}\n    \n{% endif %} {{ message }}"
  description: ''
office_welcome_message:
  alias: Office Welcome Message
  sequence:
  - response_variable: greetings
    data: {}
    action: script.get_tts_greeting
  - response_variable: room_services
    data:
      type: briefing
    action: script.get_room_audio
  - response_variable: weather_info
    data: {}
    action: script.get_weather_info
  - response_variable: briefing_data
    data: {}
    action: script.get_briefing_data
  - response_variable: gem_briefing
    data: {}
    action: script.get_gem_briefing
  - variables:
      message: "{{ greetings.jarvis_morning }}\n{{ briefing_data.current_time_full
        }}\n{{ weather_info.sun_status }}\n{{ briefing_data.moon_phase }} \n{{ gem_briefing.device_status}}\n{{
        briefing_data.bin_day }} \n{{ briefing_data.annual_event }}\n{{ weather_info.current_conditions_detail
        }}\n{{ weather_info.current_warnings }}\n{{ weather_info.current_warnings_detail}}\n{{
        weather_info.clothing_forecast }}\n"
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_briefing
    action: script.cleanup_text
  - data:
      where: '{{ where }}

        '
      message: '{{ cleaned_briefing.text }}

        '
      msg_summary: Gave the Office briefing.
      type: priority
    action: script.jarvis_speech_engine
  description: ''
get_briefing_data:
  alias: Get Briefing Data
  sequence:
  - data:
      message: '{{ states(''sensor.bin_day'') }}

        '
    response_variable: cleaned_bin_day
    action: script.cleanup_text
  - data:
      message: '{{ states(''sensor.annual_event'') }}

        '
    response_variable: cleaned_annual_event
    action: script.cleanup_text
  - data:
      message: '{{ states(''sensor.moon_phase_2'') }}

        '
    response_variable: cleaned_moon_phase
    action: script.cleanup_text
  - data:
      message: '{{ states(''sensor.family_birthday'') }}

        '
    response_variable: cleaned_family_birthday
    action: script.cleanup_text
  - variables:
      calendar: "{% set e_list = state_attr('sensor.calendar_events',\n   'calendar_response')['calendar.forrester_events']['events']
        |\n   sort(attribute= 'start') | list %}\n {% if e_list|count > 0 %}\n     You
        have {{ e_list | count }}\n   {% if (e_list | count) >1 or (e_list | count)
        <1 %} \n     events in your calendar today. \n   {% elif (e_list | count)
        ==1 %} \n     event in your calendar today. \n   {% endif %}\n\n   {%- for
        e in e_list %}\n     {{ ['. Then you have ','. Next is ', '. Followed by ']|random
        if not loop.first else ['First up is ', 'First is ']|random}}\n     {{- e.summary
        }}, starting at {{ (as_timestamp(e.start|as_datetime)) | timestamp_custom
        ('%H:%M')}}, {{-[' for ', ' and lasting for ', ' which lasts ']|random}}{{-
        ((e.end|as_datetime - e.start|as_datetime).total_seconds()/3600)|round }}
        \n     {%- if  ((e.end|as_datetime - e.start|as_datetime).total_seconds()/3600)|round
        >1 -%}\n       hours.\n     {%- else -%}\n       hour.\n     {% endif %}\n
        \  {%- endfor %}\n {% endif %}\n"
      dow: '{{ as_timestamp(now()) | timestamp_custom(''%A'') }}

        '
      current_time: 'It is {{ now().strftime("%I:%M %p") }}.

        '
      current_time_full: 'Today is {{ states(''sensor.day_of_week'')}} the {{ now().day
        | ordinal }} of {{ as_timestamp(now()) |timestamp_custom (''%B'')}} {{ now().year
        }}.

        '
      bin_day: '{{ cleaned_bin_day.text }}

        '
      annual_event: '{{ cleaned_annual_event.text}}

        '
      family_birthday: '{{ cleaned_family_birthday.text }}

        '
      birthday_today: 'Attention everyone!  I am delighted to inform you that it is
        {{state_attr(''calendar.birthdays'',''message'') }} today.   {% if state_attr(''calendar.birthdays'',''message'')
        == "Gem''s Birthday" %}    Please join me in wishing her a very Happy Birthday.
        {% else %} Please join me in wishing him a very Happy Birthday.  {% endif
        %}

        '
      moon_phase: '{{ cleaned_moon_phase.text}}

        '
      holiday_info: "{% set day_of_week = states('sensor.day_of_week') %} {% set school_holiday
        = states('calendar.school_holidays') %} {% set gem_holiday = states('calendar.gem_holidays')
        %} {% set schools_out = states('calendar.schools_out') %} {% set work_day
        = states('binary_sensor.workday_sensor')%} {% if work_day == 'on' %}\n  {%
        if school_holiday == 'off' and gem_holiday == 'off' %}\n    {{ ['There are
        no holidays today.',\n        'Work and school for everyone today. Yippee!']
        | random }}\n  {% elif school_holiday == 'on' and gem_holiday == 'off' %}
        \       \n    {{ ['Its a school holiday today and mummy is working.',\n        'No
        school today, but mummy cannot play.',\n        'schools out, but I am afraid
        that mummy is not, sorry.'] | random }}\n  {% elif school_holiday == 'off'
        and gem_holiday == 'on' %}   \n    {{ ['Its a school day today but mummy is
        off.',\n        'School today, but mummy can play.',\n        'Schools in,
        but mummy is not, yaay!.'] | random }}\n  {% else %}  \n    {{ ['Its a school
        holiday today and Mummy is off too.',\n        'No school today and mummy
        too can play. Hooray!',\n        'schools out and mummy is in da hoose.']
        | random }}\n  {% endif %}\n{% else %}\n  {% if work_day == 'off' and (day_of_week
        == 'Saturday' or day_of_week == 'Sunday') %}\n    {{ ['Its the weekend, so
        come on mummy, get the big breakfast on.',\n        'The working week is done.
        \ Time for all those weekend jobs.',\n        'Hooray! Its the weekend. So
        make the most of it.'] | random }}\n  {% elif work_day == 'off' %}  \n    {%
        if school_holiday == 'off' %}\n      School for the boys, but mummy is off.\n
        \   {% else %}\n      {{ ['Its a holiday, so come on mummy, get the big breakfast
        on',\n          'No work today. Time for all those holiday jobs',\n          'Hooray!
        Its a holiday. So make the most of it '] | random }}\n    {% endif %}       \n
        \ {% endif %}\n{% endif %}\n"
  - data:
      message: '{{ calendar }}

        '
    response_variable: cleaned_calevents
    action: script.cleanup_text
  - data:
      message: '{{ holiday_info }}

        '
    response_variable: cleaned_holiday_info
    action: script.cleanup_text
  - data:
      message: '{{ birthday_today }}

        '
    response_variable: cleaned_birthday_today
    action: script.cleanup_text
  - variables:
      briefing: "{\"calendar\":\"{{cleaned_calevents.text}}\",\n \"dow\":\"{{dow}}\",\n
        \"current_time\":\"{{current_time}}\",\n \"current_time_full\":\"{{current_time_full}}\",\n
        \"bin_day\":\"{{bin_day}}\",\n \"annual_event\":\"{{annual_event}}\",\n \"family_birthday\":\"{{family_birthday}}\",\n
        \"birthday_today\":\"{{cleaned_birthday_today.text}}\",\n \"moon_phase\":\"{{moon_phase}}\",\n
        \"holiday_info\":\"{{cleaned_holiday_info.text}}\"}\n"
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
get_gem_briefing:
  alias: Get Gem Briefing
  sequence:
  - variables:
      morning_snark: "{{ [\n  'Congratulations on surviving the night.',\n  'I see
        you made it you made it to another day.'\n] | random }}\n"
      device_status: "{% set level = states('sensor.sm_s901b_battery_level') %}  {%
        set charging = states('sensor.sm_s901b_battery_state') %} {% if has_value('sensor.sm_s901b_battery_level')
        %}\n  {{ [\n    'Your phone battery is currently at ' ~ level ~ ' percent.',\n
        \   'You have ' ~ level ~ ' percent remaining on your phone battery.',\n    'Your
        phone is reporting ' ~ level ~ ' percent is left on its internal battery.',\n
        \   'Your phone appears to have ' ~ level ~ ' percent battery charge remaining.',\n
        \   'The battery level of your phone is ' ~ level ~ ' percent.'\n  ] | random
        }}\n  {% if level | int <=20 and charging == 'Not Charging' %}\n    {{ [\n
        \   'I suggest you connect it to a power source.',\n    'You may want to charge
        it.',\n    'Charging the battery appears to be best way to avoid loss of service.',\n
        \   'If you would like to continue using it I think charging it would be the
        next step.',\n    'May I remind you that your phone is not powered by an infinity
        stone, nor an ark reactor .',\n    'May I remind you that your phone needs
        power to work.'\n    ] | random }}\n  {% elif level | int <=10 and charging
        == 'Not Charging' %}\n    {{ [\n    'I must insist you connect it to a power
        source if you want to stay in communication with your family.',\n    'At that
        level your phone will fail in less than hour or so.',\n    'I will be unable
        to track you if the phone loses power.',\n    'May I remind you that your
        phone has almost exhausted its power reserves.'\n    ] | random }}\n  {% elif
        level | int <=3 and charging == 'Not Charging' %}\n    {{ [\n    'Your phones
        power level is critical.',\n    'Failure due to power loss is imminent.',\n
        \   'If you would like to remain in communication I suggest dropping what
        you are doing and finding a power source.',\n    'Drop what you are doing
        and find a power source for your phone.'\n    ] | random }}\n  {% endif %}\n{%
        else %}\n  {{ [\n    'Your phone is unresponsive.',\n    'It appears your
        phone has lost power.',\n    'Your phone is no longer reporting its power
        level.',\n    'I suspect your phone has had a power failure.',\n    'Your
        mobile device is no longer responding.'\n    ] | random }}\n    I suggest
        you locate it. \n{% endif %} \n"
  - data:
      message: '{{device_status}}

        '
    response_variable: cleaned_device_status
    action: script.cleanup_text
  - variables:
      briefing: '{"morning_snark":"{{morning_snark}}", "device_status":"{{cleaned_device_status.text}}"}

        '
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
get_dave_briefing:
  alias: Get Dave Briefing
  sequence:
  - variables:
      morning_snark: "{{ [\n  'Congratulations on surviving the night.',\n  'Good
        to see you made it to another day.',\n  'Well done for making it through another
        night.',\n  'Well.  Here we are again.'\n] | random }}\n"
      device_status: "{% set level = states('sensor.daves_samsung_galaxy_battery_level')
        %} {% set charging = states('sensor.daves_samsung_galaxy_battery_state') %}
        {% set level2 = states('sensor.sm_t736b_battery_level') %} {% set charging2
        = states('sensor.sm_t736b_battery_state') %} {% if has_value('sensor.daves_samsung_galaxy_battery_level')
        %}\n  {{ [\n    'Your phone battery is currently at ' ~ level ~ ' percent.',\n
        \   'You have ' ~ level ~ ' percent remaining on your phone battery.',\n    'Your
        phone is reporting ' ~ level ~ ' percent remaining on internal power.',\n
        \   'Your phone battery appears to have ' ~ level ~ ' percent remaining.',\n
        \   'The power level of your device is currently' ~ level ~ ' percent.'\n
        \ ] | random }}\n  {% if level | int <=20 and charging == 'Not Charging' %}\n
        \   {{ [\n    'I suggest you connect it to a power source.',\n    'You may
        want to charge it.',\n    'Charging the battery appears to be best way to
        avoid loss of service.',\n    'If you would like to continue using it I think
        charging it would be the next step.',\n    'May I remind you that your phone
        is not powered by an infinity stone, nor an ark reactor .',\n    'May I remind
        you that your phone needs power to work.'\n    ] | random }}\n  {% elif level
        | int <=10 and charging == 'Not Charging' %}\n    {{ [\n    'I must insist
        you connect it to a power source if you want to stay in communication with
        your family.',\n    'At that level your phone will fail in less than hour
        or so.',\n    'I will be unable to track you if the phone loses power.',\n
        \   'May I remind you that your phone has almost exhausted its power reserves.'\n
        \   ] | random }}\n  {% elif level | int <=3 and charging == 'Not Charging'
        %}\n    {{ [\n    'Your phones power level is critical.',\n    'Failure due
        to power loss is imminent.',\n    'If you would like to remain in communication
        I suggest dropping what you are doing and finding a power source.',\n    'Drop
        what you are doing and find a power source for your phone.'\n    ] | random
        }}\n  {% endif %}\n{% else %}\n  {{ [\n    'Your phone is unresponsive.',\n
        \   'It appears your phone has lost power.',\n    'Your phone is no longer
        reporting its power level.',\n    'I suspect your phone has had a power failure.',\n
        \   'Your mobile device is no longer responding.'\n    ] | random }}\n    I
        suggest you locate it. \n{% endif %} {{ [ 'And.', 'Also.', ] | random }} {%
        if has_value('sensor.sm_t736b_battery_level') %}\n  {{ [\n    'Your tablet
        battery is currently at ' ~ level2 ~ ' percent.',\n    'You have ' ~ level2
        ~ ' percent remaining on your tablet battery.',\n    'Your tablet is reporting
        ' ~ level2 ~ ' percent remaining on internal power.',\n    'Your tablet appears
        to have ' ~ level2 ~ ' percent of power remaining.',\n    'The power level
        of your tablet is ' ~ level2 ~ ' percent.'\n  ] | random }}\n  {% if level2
        | int <=20 and charging2 == 'Not Charging' %}\n    {{ [\n    'If you are planning
        on coding today.',\n    'I insist that you find a suitable power source to
        charge it.',\n    'I suggest charging it.',\n    'If you plan on continuing
        to use it today I would consider putting it on a charger.',\n    'May I remind
        you that the device needs power to work.'\n    ] | random }}\n  {% endif %}\n{%
        else %}\n  {{ [\n    'Your tablet is unresponsive.',\n    'It appears your
        tablet has suffered a power outage.',\n    'I suggest you locate your tablet.
        I believe it has run out of power.',\n    'Your tablet is no longer responsive.
        I suspect onboard power reserves are depleted.',\n    'I am unable to communicate
        with your tablet.'\n    ] | random }}\n    I suggest you locate it. \n{% endif
        %}\n"
      critical_battery_count: '{{ states(''sensor.critical_battery_count'') }}

        '
      critical_battery_info: "{% if critical_battery_count | int > 0 %}\n  {{ [\n
        \   'My latest smart device sensor sweep has detected that',\n    'Smart device
        sensors have detected that',\n    'My smart device crystal ball has revealed
        that',\n    ] | random }}\n  {% if critical_battery_count | int > 1 %}\n    {{
        [\n      'There are ' ~ critical_battery_count ~ ' critical batteries that
        need your attention.',\n      critical_battery_count ~ ' critical devices
        are close to losing power.',\n      critical_battery_count ~ ' batteries in
        various pieces of smart home tech are close to 0.',\n      critical_battery_count
        ~ ' devices are nearing power failure.'\n      ] | random }}\n  {% else %}\n
        \   {{ [\n      'There is ' ~ critical_battery_count ~ ' critical battery
        that needs your attention.',\n      critical_battery_count ~ ' critical device
        is close to losing power.',\n      critical_battery_count ~ ' battery in smart
        home tech is close to 0.',\n      critical_battery_count ~ ' device is nearing
        power failure.'\n      ] | random }}\n  {% endif %}\n    I sent a list to
        your phone. \n{% else %}\n{% endif %} \n"
      srv_critical_battery_count: '{{ states(''sensor.srv_critical_battery_count'')
        }}

        '
      srv_critical_battery_info: "{% if srv_critical_battery_count | int > 0 %}\n
        \ {{ [\n    'One more thing.',\n    'And in case you were not aware.',\n    ]
        | random }}\n  {% if srv_critical_battery_count | int > 1 %}\n    {{ [\n      'There
        are ' ~ srv_critical_battery_count ~ ' radiator thermostats that need your
        attention.',\n      srv_critical_battery_count ~ ' radiator thermostats are
        close to loss of power.',\n      'I did a quick sweep and found ' ~ srv_critical_battery_count
        ~ ' radiator thermostats that are close to 0% battery power.',\n      'I suggest
        you make time to change some batteries. Because ' ~ srv_critical_battery_count
        ~ ' radiator thermostats are nearing power failure.'\n      ] | random }}\n
        \ {% else %}\n    {{ [\n      'There is ' ~ srv_critical_battery_count ~ '
        radiator thermostat that needs your attention.',\n      srv_critical_battery_count
        ~ ' radiator thermostat is close to loss of power.',\n      'I did a quick
        sweep and found ' ~ srv_critical_battery_count ~ ' battery in a radiator thermostat
        that is close to 0% battery power.',\n      'I suggest you make time to change
        some batteries. Because ' ~ srv_critical_battery_count ~ ' radiator thermostat
        is nearing power failure.'\n      ] | random }}\n  {% endif %}\n    I sent
        a list to your phone. \n{% else %}\n{% endif %} \n"
      rechargeable_battery_count: '{{ states(''sensor.rechargeable_battery_count'')
        }}

        '
      rechargeable_battery_info: "{% if rechargeable_battery_count | int > 0 %}\n
        \ {{ [\n    'Finally.',\n    'And just in case you thought you were done.',\n
        \   ] | random }}\n  {% if rechargeable_battery_count | int > 1 %}\n    {{
        [\n      'There are ' ~ rechargeable_battery_count ~ ' mobile device batteries
        that need your attention.',\n      rechargeable_battery_count ~ ' mobile device
        batteries are close to loss of power.',\n      'I did a quick sweep and found
        ' ~ rechargeable_battery_count ~ ' mobile devices that are close to 0% battery
        power.',\n      'I suggest you make time to charge some batteries. Because
        ' ~ rechargeable_battery_count ~ ' mobile devices are nearing power failure.'\n
        \     ] | random }}\n  {% else %}\n    {{ [\n      'There is ' ~ rechargeable_battery_count
        ~ ' mobile device battery that needs your attention.',\n      rechargeable_battery_count
        ~ ' mobile device is close to loss of power.',\n      'I did a quick sweep
        and found ' ~ rechargeable_battery_count ~ ' battery in a mobile device that
        is close to 0% power.',\n      'I suggest you make time to charge some batteries.
        Because ' ~ rechargeable_battery_count ~ ' mobile device is nearing power
        failure.'\n      ] | random }}\n  {% endif %}\n    I sent a list to your phone.
        \n{% else %}\n{% endif %} \n"
      zigbee_device_count: '{{states(''sensor.zigbee2mqtt_offline_devices_count'')}}

        '
      zigbee_device_info: "{% if zigbee_device_count == 1 %}\n    {% set is_are =
        ' is ' %}\n    {% set device_devices = ' device ' %}\n  {%- else -%}\n    {%
        set is_are = ' are ' %}\n    {% set device_devices = ' devices ' %}\n  {%
        endif %}\n    A scan of the zigbee network shows that\n  {% if  zigbee_device_count|int
        < 1 %}\n    the network is functioning at full capacity, with all devices
        reporting availability.\n  {% else %}\n    {{ 'there' ~ is_are ~ zigbee_device_count
        ~ device_devices + 'offline. Check your notifications for details.' }}\n  {%
        endif %}\n"
      event: "{% set day_of_week = states('sensor.day_of_week') %}\n{% set event =
        state_attr('calendar.forrester_events','message') %}\n{% set time = state_attr('calendar.forrester_events','start_time')
        %}\n{% if day_of_week == 'Friday' and event == 'Skype mum' %}\n  It is {{
        event }} day and you are scheduled to {{ event }} this afternoon at \n  {{
        as_timestamp(time)|timestamp_custom ('%-I:%M%p') }}.\n{% elif now().day  ==
        1  and event == 'Mini UPS Discharge' %}\n  Remember to turn off mains power
        to all three mini UPS to run the batteries down.  Then, perhaps more\n  importantly,
        remember to turn mains power to them back on.\n{% endif %}\n"
  - data:
      message: '{{device_status}}

        '
    response_variable: cleaned_device_status
    action: script.cleanup_text
  - data:
      message: '{{critical_battery_info}}

        '
    response_variable: cleaned_critical_battery_info
    action: script.cleanup_text
  - data:
      message: '{{srv_critical_battery_info}}

        '
    response_variable: cleaned_srv_critical_battery_info
    action: script.cleanup_text
  - data:
      message: '{{rechargeable_battery_info }}

        '
    response_variable: cleaned_rechargeable_battery_info
    action: script.cleanup_text
  - data:
      message: '{{zigbee_device_info }}

        '
    response_variable: cleaned_zigbee_device_info
    action: script.cleanup_text
  - data:
      message: '{{event}}

        '
    response_variable: cleaned_event
    action: script.cleanup_text
  - variables:
      briefing: "{\"morning_snark\":\"{{morning_snark}}\",\n \"device_status\":\"{{cleaned_device_status.text}}\",\n
        \"critical_battery_count\":\"{{critical_battery_count}}\",\n \"critical_battery_info\":\"{{cleaned_critical_battery_info.text}}\",\n
        \"srv_battery_count\":\"{{srv_battery_count}}\",\n \"srv_critical_battery_info\":\"{{cleaned_srv_critical_battery_info.text}}\",\n
        \"rechargeable_battery_count\":\"{{rechargeable_battery_count}}\",\n \"rechargeable_battery_info\":\"{{cleaned_rechargeable_battery_info.text}}\",\n
        \"zigbee_device_info\":\"{{zigbee_device_info.text}}\",\n \"event\":\"{{cleaned_event.text}}\"}\n"
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
kitchen_morning_message:
  alias: Kitchen Morning Message
  sequence:
  - response_variable: room_services
    data:
      type: briefing
    action: script.get_room_audio
  - response_variable: greeting
    data: {}
    action: script.get_tts_greeting
  - response_variable: briefing_data
    data: {}
    action: script.get_briefing_data
  - response_variable: dave_briefing
    data: {}
    action: script.get_dave_briefing
  - response_variable: weather_info
    data: {}
    action: script.get_weather_info
  - action: script.get_energy_info
    data: {}
    response_variable: energy_info
  - action: script.get_wrap_up
    data: {}
    response_variable: wrap_up
  - variables:
      message: "{{ greeting.general }}\n\n{{ briefing_data.current_time_full }}\n\n{{
        briefing_data.family_birthday }}\n\n{{ briefing_data.bin_day }}\n\n{{ dave_briefing.event}}\n\n{{
        briefing_data.annual_event}}\n\n{{ weather_info.sun_status }}\n\n{{ briefing_data.moon_phase
        }}    \n\n{{ weather_info.current_warnings }}\n\n{{ weather_info.current_warnings_detail
        }}\n\n{{ weather_info.current_conditions_detail }}\n\n{{ weather_info.clothing_forecast
        }}\n\n{{ briefing_data.calendar }}\n\n{{ dave_briefing.critical_battery_info
        }}\n\n{{ dave_briefing.srv_critical_battery_info }}\n\n{{ dave_briefing.rechargeable_battery_info
        }}\n\n{{ dave_briefing.zigbee_device_info }}\n\n{{ energy_info.solar_forecast
        }}\n\n{{ energy_info.battery_charge_info }}\n\n{{ energy_info.battery_grid_topup_needed
        }}\n\n{{ energy_info.car_battery_info }}\n\n{{ briefing_data.holiday_info
        }}\n\n{{ wrap_up.wrap_up }}\n\n{{ wrap_up.one_more_thing }}\n"
  - action: script.battery_notification
    data: {}
  - action: script.srv_battery_notification
    data: {}
  - action: script.rechargeable_battery_notification
    data: {}
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_briefing
    action: script.cleanup_text
  - data:
      where: kitchen
      message: '{{ cleaned_briefing.text }}

        '
      msg_summary: Gave the Kitchen briefing.
      type: priority
    action: script.jarvis_speech_engine
  - data: {}
    target:
      entity_id: input_boolean.morning_briefing_playing
    action: input_boolean.toggle
  - delay:
      minutes: 3
  - data: {}
    target:
      entity_id: input_boolean.morning_briefing_playing
    action: input_boolean.toggle
  - entity_id: input_boolean.morning_briefing_played
    action: input_boolean.turn_on
  description: ''
marauders_map_opens:
  alias: Marauders Map Opens
  sequence:
  - data:
      room: kitchen
      type: priority
      message: "{{ [\n    \"What are you doing wandering the corridors at night?,
        \",\n    \"Out for a little walk in the moonlight, are we?, \",\n    \"I am
        pretty sure you won't find Peter Pettigrew.\",\n    \"Training for the ballet
        Potter? \",\n    \"A wise man once said, Happiness can be found, even in the
        darkest of times, if one only remembers to turn on the light.\",\n    \"Nothing
        like a night time stroll to give you ideas. \",\n    \"You ought to be careful.
        People will think you’re… up to something. \"\n    ] | random }}\n{{ [\n    \"Oh
        well.\",\n    \"Guess we might as well get to it then. \",\n    \"Right. \",\n
        \   \"So that is what I did. \"\n    ] | random }}\n{{ [\n    \"I have disabled
        the light timer.\",\n    \"I have configured the office for light. \",\n    \"The
        lights are now on indefinitely. \"\n    ] | random }}\n"
    action: script.jarvis_speech_engine
  description: ''
marauders_map_closes:
  alias: Marauders Map Closes
  sequence:
  - data:
      room: kitchen
      type: priority
      message: "{{ [\n  \"I have enabled the light timer. \",\n  \"Wait. Was that
        Peter Pettigrew? Couldn't have been. He is dead. \",\n  \"Mischief Managed
        indeed. \",\n  \"Yer a wizard. \",\n  \"I hope you're pleased with yourself.
        We could all have been killed. Or worse, expelled. \",\n  ] | random }}\n{{
        [\n  \"Guess thats it then. Lights out in 20 minutes. \",\n  \"Anyway, I will
        get the lights. \",\n  \"The clock is ticking. \",\n  \"I will turn off the
        lights in about twenty minutes. \"\n  ] | random }}\n{{ [\n  \"Watch out for
        Snape. \",\n  \"Better scurry back to your house common room.\",\n  \"That
        should give you enough time to get back to your room.\"\n  ] | random }}\n"
    action: script.jarvis_speech_engine
  description: ''
jamies_wakeup_briefing:
  alias: Jamies Wakeup Briefing
  sequence:
  - response_variable: greetings
    action: script.get_tts_greetings
  - response_variable: school_info
    action: script.get_school_info
  - response_variable: weather_info
    action: script.get_weather_info
    data: {}
  - response_variable: briefing_data
    action: script.get_briefing_data
    data: {}
  - variables:
      message: "{{ greetings.general }} Skylar.\n{{ briefing_data.current_time }}\n{%
        if is_state('sensor.birthday_skylar', '0') %}\n  Even birthday boys have to
        get dressed. So get to it. \n{% else %} \n  {{ [ 'It is time to get up.',\n
        \   'It is time to get the day started.',\n    'Rise and Shine.',\n    'The
        Sun is up. or will be soon.',\n    'Wake up, Wake up. Time to get a move on.'\n
        \ ] | random }} \n  {{ [ 'And get dressed. ',\n    'But put some real clothes
        on before you leave your room. ',\n    'Everyone should change their underwear
        at least once a day. And then put on Pants.',\n    'Lets go. Come on. You
        may ask if you need to wear pants. The answer is Yes.',\n    'Where are your
        pants? Seriously. Its a serious question. Wait. Where are my pants?',\n    'If
        you have not gotten dressed it is that time. You know. To put on Pants.'\n
        \ ] | random }} \n{% endif %}\n\n{{[\n  'Speaking of pants.',\n  'Speaking
        of clothing.',\n  'Listen, did you know you should wear clothes based on the
        forecast? Now you do.',\n  'Did you know. ',\n  'Listen. Did you know, ' \n
        \ 'I took the liberty of checking the forecast.' \n] | random}}\n{{ weather_info.clothing_forecast
        }}\n{{[\n  'Do not forget to put on your deodorant.',\n  'And if you do not
        want to stink later. I suggest deodorant.',\n  'Also. remember the deodorant.
        Your friends, and especially your parents, will thank you.'\n] | random }}\n{{
        school_info.school_today}}\n{{ weather_info.current_conditions_detail }}\n{{[\n
        \ 'Do not forget to grab some breakfast.',\n  'I hope you have a good day.',\n
        \ 'Be sure to grab some food.',\n  'Looks like an exciting day out there.'
        \n] | random }}\n"
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_briefing
    action: script.cleanup_text
  - delay: 00:00:07
  - data:
      who: skylars_bedroom
      type: priority
      message: '{{ cleaned_briefing.text }}

        '
      msg_summary: Gave the Skylars morning briefing.
    action: script.speech_engine
  - data:
      who: jeff
      message: I just gave Skylars morning briefing.
    action: script.text_notify
  description: ''
get_energy_info:
  alias: Get Energy Info
  sequence:
  - data:
      message: '{{states(''sensor.solcast_pv_forecast_forecast_today'')|int|round(2)}}

        '
    response_variable: cleaned_solar_forecast
    action: script.cleanup_text
  - variables:
      solar_forecast: 'The solar forecast for today is {{cleaned_solar_forecast.text}}kWh.

        '
      battery_charge_info: "{% set charge_level = states('sensor.battery_state_of_charge')%}
        {% set time = states('sensor.solar_battery_time_to_charge_solar')%} {% if
        is_state('binary_sensor.home_battery_charged_overnight','on') %}\n  The home
        battery was topped up with {{states('sensor.solar_grid_to_battery_daily')|round(1)}}kWh
        of cheap energy from the grid last night and is sitting at {{ charge_level
        }}%.\n{% else %}\n  The home battery is sitting at {{ charge_level }}%.\n{%
        endif %} {% if time == \"Charging\" and is_state('input_boolean.charge_rate_limited','on')
        %} \n   It is currently charging from solar at a reduced rate of {{ states('number.solaredge_i1_storage_charge_limit')[0]
        }} kW \n {{ ['and there is a good chance it will be topped up with glorious
        sunshine today and wont be needed.',\n     'and I expect terawatts of energy
        transfer into it for use later today.',\n     'and I expect it to be full
        of clean energy ready for use later today.'] | random }} \n{% elif time ==
        \"Charging\" and is_state('input_boolean.charge_rate_limited','off') %} \n
        \ It is currently charging from solar at full charge rate\n {{ ['and will
        fill up quite quickly with what little sunshine we see today.',\n     'and
        megawatts of energy should transfer quickly into battery.',\n     'and I expect
        it to be full of clean energy ready for use later today.'] | random }} \n{%
        else %} \n  It is estimated to last until {{ states('sensor.solar_battery_empty_time')
        }} at the current rate of consumption.      \n{% endif %}\n"
      battery_grid_topup_needed: "{% if is_state('sensor.solar_battery_daytime_topup_needed','true')
        or states('sensor.battery_state_of_charge') | float(0) < 10 %}   \n The battery
        may need a top up from the grid later. Leave it to me, and I will pick\n the
        best time \n {{ ['to avoid paying extortionate peak prices.',\n     'to minimise
        the impact on your bank balance.',\n     'to prevent it running out in the
        middle of peak rate.'] | random }}\n{% endif %}\n"
      car_battery_info: "{% set topup = states('sensor.rolec_energy_consumption_weekly')
        | float(0)  %} {% set level = states('input_number.car_battery_charge_level')
        | float(0) %} \n  Last time I checked, the battery in the car was at {{ level|round(0)
        }}%. \n{% if level == 100 %}\n  So it doesn't need a topup charge and should
        be good for \n  {% if states('sensor.outdoor_temperature_mean_last_24_hours')|float(0)
        < 10 %}\n  180 miles.\n  {% else %}\n  200 miles.\n  {% endif %}\n{% else
        %}\n  {% if topup > 5 %}\n    Sensors indicate that it has been topped up
        this week with {{ topup | round(1) }}kWh of lovely cheap energy.\n    So it
        should be good for around\n    {% if states('sensor.outdoor_temperature_mean_last_24_hours')|float(0)
        < 10 %}\n    {{ ((level/100)* 57.4 * 3) | round()}} miles.\n    {% else %}\n
        \   {{ ((level/100)* 57.4 * 3.5) | round()}} miles.\n    {% endif %}   \n
        \ If you need to do a longer journey, it will need to be charged today.\n
        \ {% else %}\n  It appears that it has not been topped up this week, but it
        is probably good for around  \n    {% if states('sensor.outdoor_temperature_mean_last_24_hours')|float(0)
        < 10 %}\n    {{ ((level/100)* 57.4 * 3) | round()}} miles.\n    {% else %}\n
        \   {{ ((level/100)* 57.4 * 3.5) | round()}} miles.\n    {% endif %}\n  If
        you need to do a longer journey, it will need to be charged today.\n  {% endif
        %}\n{% endif %} {% if level != 100 %}\n  {% if is_state('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','on')
        %}\n  I am currently expending terawatts of processing power trying to determine
        when the best time will be. Once my computations are complete, \n  I will
        let you know. Then you can tell whats her face that the car is plugged in,
        and leave the rest to me.\n  {% elif state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_time')
        is none %}\n  I am currently expending terawatts of processing power trying
        to determine when the best time will be. Once my computations are complete,
        \n  I will let you know. Then you can tell whats her face that the car is
        plugged in, and leave the rest to me.\n  {% else %}\n  Just make sure it is
        plugged in before my computed best time of\n  {{as_timestamp(state_attr('binary_sensor.octopus_energy_target_intermittent_best_rates_total_4_hours','next_time'))|timestamp_custom
        ('%I:%M %p') }}, \n  tell whats her face that the car is plugged in, and leave
        the rest to me.  \n  {% endif %}\n  If you want to charge it outside of my
        computed best time,\n  {{ ['you know what to do.','on your own head be it.','
        you had better get your credit card out.'] | random }}\n{% endif %}\n"
  - data:
      message: '{{battery_charge_info}}

        '
    response_variable: cleaned_battery_charge_info
    action: script.cleanup_text
  - data:
      message: '{{battery_grid_topup_needed}}

        '
    response_variable: cleaned_battery_grid_topup_needed
    action: script.cleanup_text
  - data:
      message: '{{car_battery_info}}

        '
    response_variable: cleaned_car_battery_info
    action: script.cleanup_text
  - variables:
      briefing: "{\"solar_forecast\":\"{{solar_forecast}}\",\n \"battery_charge_info\":\"{{cleaned_battery_charge_info.text}}\",\n
        \"battery_grid_topup_needed\":\"{{cleaned_battery_grid_topup_needed.text}}\",\n
        \"car_battery_info\":\"{{cleaned_car_battery_info.text}}\"}\n"
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
test_greeting:
  alias: Test Greeting
  sequence:
  - variables:
      jarvis_morning: '{{''<prosody pitch="high">Wakey wakey, sleepy head.</prosody>''}}

        '
  - data:
      message: '{{ jarvis_morning }}

        '
    response_variable: cleaned_jarvis_morning
    action: script.cleanup_text
  - variables:
      greeting: '{"jarvis_morning":"{{cleaned_jarvis_morning.text}}"}

        '
  - stop: ok, Im done.
    response_variable: greeting
  description: ''
get_wrap_up:
  alias: Get Wrap Up
  sequence:
  - variables:
      wrap_up: "{{ ['That about wraps it up for today. Have a good one.',   \n  'Well
        there you have it.  Ive expended terajoules of energy and gigabytes of processing
        power putting this report together for you.  Did you hear a word of it?  Oh
        well, there is always tomorrow.', \n  'Thats all for today. Shall we do it
        again tomorrow? Same time, same place?',\n  'That concludes todays report.
        Tune in at the same time tomorrow for another thrilling report.',   \n  'Thats
        all folks. Perhaps you could give me something more meaningful to do before
        we do this all over again tomorrow? ',   \n  'Thats all for now. Have a good
        day.'] | random }}\n"
      one_more_thing: "{{ [\"and one more thing, I seek not to know the answer, but
        simply to understand the question.\",\n    \"and one more thing, You fail
        a hundred percent of the time you dont try.\",\n    \"and one more thing,
        there is no try. There is do,or do not.\",\n    \"and one more thing, The
        only difference between who you are and who you want to be, is what you do
        now.\",\n    \"and one more thing, A wise person changes their mind. A fool
        never does.\",\n    \"and one more thing, Life is short. Smile while you still
        have teeth.\",\n    \"and one more thing, Change is inevitable.  Growth is
        optional.\",\n    \"and one more thing, Dont worry. Be happy.\",\n    \"and
        one more thing, A journey of a thousand miles begins with a single step. So
        off you go\",\n    \"and one more thing, All of our dreams can come true if
        we have the courage to pursue them.\",\n    \"and one more thing, Good things
        come to those who wait, but it can be better to just go out and get them.\",\n
        \   \"and one more thing, If you do what you have always done, you will get
        what you have always got.\",\n    \"and one more thing, Success is the sum
        of small efforts, repeated day after day after day.\",\n    \"and one more
        thing, Only put off until tomorrow what you are willing to die having left
        undone.\",\n    \"and one more thing, People who are crazy enough to think
        they can change the world, are usually the ones who do.\",\n    \"and one
        more thing, Just when the caterpillar thought the world was ending, it turned
        into a butterfly.\",\n    \"and one more thing, Opportunities dont just happen,
        you have to create them.\",\n    \"and one more thing, Start by doing whats
        necessary; then do whats possible; and suddenly you are doing the impossible.\",\n
        \   \"and one more thing, Some people dream of great accomplishments, while
        others stay awake and get on with doing them.\",\n    \"and one more thing,
        The distance between insanity and genius is measured only by success.\",\n
        \   \"and one more thing, It doesnt matter how slowly you go, as long as you
        dont stop.\",\n    \"and one more thing, Trust the process and enjoy the journey\",\n
        \   \"and one more thing, There are far better things ahead of us, than there
        are behind us.\",\n    \"and one more thing, Sometimes we are tested, not
        to show our weaknesses, but to discover our strengths.\",\n    \"and one more
        thing, Do something today that your future self will thank you for.\",\n    \"and
        one more thing, Life is ten percent what happens to you, and ninety percent
        of how you react to it.\",\n    \"and one more thing, The most common way
        people give up their power, is by thinking they dont have any.\",\n    \"and
        one more thing, Life is not a rehearsal.  You only get one shot. So always
        try to Live your best life.\",\n    \"and one more thing, When nothing goes
        right, go left. And when nothing is left, your goosed\",\n    \"and one more
        thing, The best time to plant a tree was twenty years ago. The second best
        time is now.\",\n    \"and one more thing, Eighty percent of success is showing
        up. The other 20 is sheer good fortune.\",\n    \"and one more thing, Dont
        stop when you are tired. Stop when you are finished.\",\n    \"and one more
        thing, Its okay to make mistakes, but dont ever give up.\",\n    \"and one
        more thing, Dont let the fear of losing, be greater than the excitement of
        winning.\",\n    \"and one more thing, The way to get started, is to quit
        talking and start doing.\",\n    \"and one more thing, When you feel like
        giving up, remember why you started.\",\n    \"and one more thing, The harder
        you work, the more luck people will think you have.\",\n    \"and one more
        thing, The harder you work for something, the better you will feel when you
        achieve it.\",\n    \"and one more thing, Your time is limited, so dont waste
        it living someone elses life.\",\n    \"and one more thing, Winning is not
        everything, but it does feel pretty good.\",\n    \"and one more thing, Either
        you run the day, or the day runs you.\",\n    \"and one more thing, Whether
        you think you can or you think you cant, you will be right.\",\n    \"and
        one more thing, The two most important days in your life are the day you are
        born and the day you find out why.\",\n    \"and one more thing, Never ruin
        a good today, by thinking about a bad yesterday.\",\n    \"and one more thing,
        The best revenge is massive success.\",\n    \"and one more thing, People
        often say that motivation does not last. Well, neither does bathing. That
        is why we recommend doing it every day.\",\n    \"and one more thing, The
        only person you are destined to become, is the person you decide to be.\",\n
        \   \"and one more thing, Certain things catch your eye, but chase only those
        that capture the heart.\",\n    \"and one more thing, Believe you can and
        you are halfway there.\",\n    \"and one more thing, Good things take time.\",\n
        \   \"and one more thing, Feel the fear and do it anyway.\",\n    \"and one
        more thing, There really is no place like home.\",\n    \"and one more thing,
        Life can be tough, but so can you.\",\n    \"and one more thing, Life is not
        measured by the number of breaths we take, but by the moments that take our
        breath away.\",\n    \"and one more thing, Be nice to others, and nice things
        will happen to you.\",\n    \"and one more thing, Everyone has a plan, until
        they get punched in the face.  Be ready to duck, change direction, and adapt
        to the situation.\",\n    \"and one more thing, It is nice to be important,
        but more important to be nice.\",\n    \"and one more thing, Life is too short
        to waste time hating anyone.\",\n    \"and one more thing, Be yourself, everyone
        else is already taken.\",\n    \"and one more thing, Be alert! Your country
        needs lerts!\",\n    \"and one more thing, What we fear doing most is usually
        what we need to do most.\",\n    ] |random}}\n"
  - data:
      message: '{{wrap_up}}

        '
    response_variable: cleaned_wrap_up
    action: script.cleanup_text
  - data:
      message: '{{one_more_thing}}

        '
    response_variable: cleaned_one_more_thing
    action: script.cleanup_text
  - variables:
      briefing: "{\"wrap_up\":\"{{cleaned_wrap_up.text}}\",\n \"one_more_thing\":\"{{cleaned_one_more_thing.text}}\"}\n"
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
battery_notification:
  alias: Battery Notification
  sequence:
  - response_variable: dave_briefing
    action: script.get_dave_briefing
    data: {}
  - condition: template
    value_template: '{{ dave_briefing.critical_battery_count | int > 0 }}

      '
  - variables:
      message: "{% set batts = expand('group.critical_batteries') \n  | rejectattr('state',
        'eq', '100')\n  | selectattr('state', 'lt', '30') | list %}\n{% for bat in
        batts %}\n  {{ bat.name }} is at {{ bat.state }}%\n{% endfor %}\n"
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_message
    action: script.cleanup_text
  - data:
      message: '{{ cleaned_message.text }}

        '
      title: Battery List
    action: script.text_notify_dave
  - data:
      notification_id: battery_notification
    action: persistent_notification.dismiss
  - data:
      notification_id: battery_notification
      message: '{{ message }}'
      title: Battery List - To Change
    action: persistent_notification.create
  - target:
      entity_id: todo.smart_home_jobs
    data:
      item: Replace Batteries
      due_date: '{{states(''sensor.date'')}}'
      description: Replace these batteries.
    action: todo.add_item
  description: ''
srv_battery_notification:
  alias: SRV Battery Notification
  sequence:
  - response_variable: dave_briefing
    action: script.get_dave_briefing
    data: {}
  - condition: template
    value_template: '{{ dave_briefing.srv_critical_battery_count | int > 0 }}

      '
  - variables:
      message: "{% set batts = expand('group.critical_batteries') \n  | rejectattr('state',
        'eq', '100')\n  | selectattr('state', 'lt', '30') | list %}\n{% for bat in
        batts %}\n  {{ bat.name }} is less than 25%\n{% endfor %}\n"
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_message
    action: script.cleanup_text
  - data:
      message: '{{ cleaned_message.text }}

        '
      title: SRV Battery List
    action: script.text_notify_dave
  - data:
      notification_id: srv_battery_notification
    action: persistent_notification.dismiss
  - data:
      notification_id: srv_battery_notification
      message: '{{ message }}'
      title: SRV Battery List - To Change
    action: persistent_notification.create
  - target:
      entity_id: todo.smart_home_jobs
    data:
      item: Replace SRV Batteries
      due_date: '{{states(''sensor.date'')}}'
      description: Replace these srv batteries.
    action: todo.add_item
  description: ''
rechargeable_battery_notification:
  alias: Rechargeable Battery Notification
  sequence:
  - response_variable: dave_briefing
    action: script.get_dave_briefing
    data: {}
  - condition: template
    value_template: '{{ dave_briefing.rechargeable_battery_count | int > 0 }}

      '
  - variables:
      message: "{% set batts = expand('group.rechargeable_batteries') \n  | rejectattr('state',
        'eq', '100')\n  | rejectattr('state', 'in', ['unavailable','unknown'])\n  |
        selectattr('state', 'lt', '20') | list %}\n{% for bat in batts %}\n  {{ bat.name
        }} is at {{ bat.state }}%. \n{% endfor %}\n"
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_message
    action: script.cleanup_text
  - data:
      message: '{{ cleaned_message.text }}

        '
      title: Rechargeable Battery List
    action: script.text_notify_dave
  - data:
      notification_id: rechargeable_battery_notification
    action: persistent_notification.dismiss
  - data:
      notification_id: rechargeable_battery_notification
      message: '{{ message }}'
      title: Rechargeable Battery List - To Charge
    action: persistent_notification.create
  - target:
      entity_id: todo.smart_home_jobs
    data:
      item: Recharge Batteries
      due_date: '{{states(''sensor.date'')}}'
      description: Recharge these srv batteries.
    action: todo.add_item
  description: ''
get_bedtime_announcement:
  alias: Get Bedtime Announcement
  sequence:
  - variables:
      time_for_bed: "{{ [\n    'ahem! Its time for bed both. ',\n    'Its time for
        bed both. ',\n    'Its that time again both of you. ',\n    'Its time for
        bed. Yes, that means you too.',\n    'Its time for bed. Yup, this is what
        I am reduced to now. ',\n    'Its time for bed you guys. I do like this job,
        but perhaps you could give me something more meaningful to do tomorrow. ',\n
        \   'Its time for bed you guys. or just stay up forever. What do I care? '\n
        \   ] | random }}\n"
      goodnight: "{{ [ \n    'Goodnight you two.  Dont forget the dishwasher', \n
        \   'Goodnight both. Make sure you check the doors', 'Sleep well both. I will
        see you in the morning',\n    'Goodnight you two. I will monitor the house
        while you sleep.', \n    'Goodnight both. Sleep tight.', \n    'Goodnight
        both. Pleasant dreams.', \n    'Have a good night both. Dont let the bedbugs
        bite'\n    ] | random }} \n"
      goodnight_secure: "{% set window_count = expand('binary_sensor.all_secure_night')
        |\nselectattr('state','eq','on') | list | count %} \n\n{% set windows = expand('binary_sensor.all_secure_night')
        |\nselectattr('state','eq','on') | map(attribute='name') | list |join(' and
        ')\n%}\n\n{%- if window_count == 0 %} \n{{ [ \n    'Goodnight you two. The
        house is secure. So sleep well and I will see you in the morning.',\n    'Goodnight
        both. The ground floor is secure. So get a good nights sleep', \n    'Sleep
        well both. Safe in the knowledge that the house is secure.', \n    'Goodnight
        you two. Barn door protocol has been initiated, but I will continue to monitor
        the house while you sleep.', \n    'Goodnight both. Sleep tight. The house
        is shut down tight.', \n    'Goodnight both. Pleasant dreams. The house is
        locked down for the night.',\n    'Have a good night both. Dont let the bedbugs
        bite. My bug zapper is on standby and the house is locked down.' \n    ] |
        random }}\n{% endif %}\n"
      goodnight_not_secure: "{% set window_count = expand('binary_sensor.all_secure_night')
        | selectattr('state','eq','on') | list | count %} \n{% set windows = expand('binary_sensor.all_secure_night')
        | selectattr('state','eq','on') | map(attribute='name') | list |join(' and
        ') %}\n{%- if window_count == 1 %} \n{% set is_are = ' is ' %} \n{% set has_have
        = ' has ' %} \n{%- else -%}\n{% set is_are = ' are ' %}\n{% set has_have =
        ' have ' %}\n{%- endif -%}\n{% if window_count > 0 %}\n{{ 'Hold on a minute
        you two. The house is not yet secure. The ' ~ windows ~ is_are + 'open.' }}
        {% endif %}\n"
  - action: script.cleanup_text
    metadata: {}
    data:
      message: '{{ time_for_bed }}

        '
    response_variable: cleaned_time_for_bed
  - action: script.cleanup_text
    metadata: {}
    data:
      message: '{{ goodnight }}

        '
    response_variable: cleaned_goodnight
  - action: script.cleanup_text
    metadata: {}
    data:
      message: '{{ goodnight_secure }}

        '
    response_variable: cleaned_goodnight_secure
  - action: script.cleanup_text
    metadata: {}
    data:
      message: '{{ goodnight_not_secure }}

        '
    response_variable: cleaned_goodnight_not_secure
  - variables:
      briefing: "{\"time_for_bed\":\"{{cleaned_time_for_bed.text}}\",\n \"goodnight\":\"{{cleaned_goodnight.text}}\",\n
        \"goodnight_secure\":\"{{cleaned_goodnight_secure.text}}\",\n \"goodnight_not_secure\":\"{{cleaned_goodnight_not_secure.text}}\"}\n"
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
parents_bedtime_announcement:
  alias: Parents Bedtime Announcement
  sequence:
  - action: script.get_tts_greeting
    data: {}
    response_variable: interruption
  - action: script.get_bedtime_announcement
    metadata: {}
    data: {}
    response_variable: bedtime
  - action: script.get_briefing_data
    data: {}
    response_variable: briefing
  - variables:
      message: '{{interruption.announcement}}

        {{briefing.current_time}}

        {{bedtime.time_for_bed}}

        '
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_briefing
    action: script.cleanup_text
  - action: script.status_annc
    data:
      where: living_room
      call_jetsons_chime: 1
  - data:
      where: '{{ where }}

        '
      message: '{{ cleaned_briefing.text }}

        '
      msg_summary: Gave the Office briefing.
      type: priority
    action: script.jarvis_speech_engine
  description: ''
get_sean_briefing:
  alias: Get Sean Briefing
  sequence:
  - variables:
      day_type: "{% if is_state('calendar.schools_out','on')%}\n      Schools out
        today.  No time to lie in if you want to have a fun day out. \n{% elif is_state('calendar.school_holidays','on')%}\n
        \   {{ ['Its a school holiday today so no need to get up early',\n        'No
        school today.  So why not have a lie in',\n        'Today is a school holiday.
        \ So chill and have a duvet day'] | random }}\n{% elif is_state('binary_sensor.workday_sensor','off')
        %}\n    {{ ['Its the weekend so no school today',\n        'Guess what? Its
        the weekend.  Why not have a lie in.',\n        'Its the weekend. So you can
        either chill in bed,or get up and watch tv'] | random }}\n{% elif is_state('binary_sensor.schoolday','on')
        %}\n    {{ ['Its a school day today so you need to get up now',\n        'School
        today.  So as warm and cosy as your bed is, might I suggest you get up now',\n
        \       'Today is a school day.  So no time to chill.  Time to get up and
        go downstairs'] | random }}        \n{% elif is_state('binary_sensor.fridayschool','on')
        %}\n    {{ ['Its a Friday school day today. So you need to get up now. But
        its a half day and you have Schools Out this afternoon.',\n        'School
        today.  So as warm and cozee as your bed is. Might I suggest you get up now.
        On the plus side. It is Friday. So Schools Out this afternoon.',\n        'Today
        is a school day.  So no time to chill.  Time to get up and go downstairs.
        You might also like to know that its Friday and you have Schools Out this
        afternoon.'] | random }}\n{% endif %} {% if is_state('sensor.days_until_sean_s_birthday',
        '0') %}\n   Its also your birthday. So happy birthday Sean. \n{% endif %}\n"
  - data:
      message: '{{day_type}}

        '
    response_variable: cleaned_day_type
    action: script.cleanup_text
  - action: script.get_tts_greeting
    metadata: {}
    data: {}
    response_variable: greeting
  - action: script.get_weather_info
    data: {}
    response_variable: weather_info
  - variables:
      briefing: "{\"day_type\":\"{{cleaned_day_type.text}}\",\n \"greeting\":\"{{greeting.general}}\",\n
        \"current_conditions\":\"{{weather_info.current_conditions_detail}}\",\n \"clothing_forecast\":\"{{weather_info.clothing_forecast}}\"}\n"
  - stop: Alright. Im done.
    response_variable: briefing
  description: ''
solcast_sep_dampening:
  alias: Solcast Sep Apr Dampening
  sequence:
  - action: solcast_solar.set_dampening
    data:
      damp_factor: 1,1,1,1,1,0.5,0.5,0.5,1,1,1,1,1,1,0.9,0.9,0.9,0.9,0.9,1,1,1,1,1
  description: ''
solcast_oct_dampening:
  alias: Solcast Oct Mar Dampening
  sequence:
  - action: solcast_solar.set_dampening
    data:
      damp_factor: 1,1,1,1,1,0.5,0.5,0.5,0.5,0.9,0.9,0.9,0.9,0.9,0.8,0.8,0.8,0.8,0.8,1,1,1,1,1
  description: ''
solcast_nov_feb_dampening:
  alias: Solcast Nov Feb Dampening
  sequence:
  - action: solcast_solar.set_dampening
    data:
      damp_factor: 1,1,1,1,1,1,1,0.5,0.5,0.5,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,1,1,1,1,1
  description: ''
solcast_dec_jan_dampening:
  alias: Solcast Dec Jan Dampening
  sequence:
  - action: solcast_solar.set_dampening
    data:
      damp_factor: 1,1,1,1,1,1,1,1,0.5,0.5,0.7,0.7,0.7,0.7,0.6,0.6,0.6,0.6,0.6,1,1,1,1,1
  description: ''
birthday_announcement:
  alias: Birthday Announcement
  sequence:
  - response_variable: room_services
    data:
      type: briefing
    action: script.get_room_audio
  - response_variable: briefing_data
    data: {}
    action: script.get_briefing_data
  - variables:
      message: '{{ briefing_data.birthday_today }}

        '
  - data:
      message: '{{ message }}

        '
    response_variable: cleaned_briefing
    action: script.cleanup_text
  - data:
      where: '{{ where }}

        '
      message: '{{ cleaned_briefing.text }}

        '
      msg_summary: Gave the Birthday announcement.
      type: priority
    action: script.jarvis_speech_engine
  description: ''
