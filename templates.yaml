############################################################ 
#   @author         :   Dave Forrester                     #
#   @date           :   17/08/2023                         #
#   @automation     :   template sensors                   #
#   @description    :   not in a package file              #
#                                                          #
#                                                          #
#   @version        :   1.04                               #
#   @modified       :   13/08/2024                         #
############################################################

###############################
#       Binary Sensors        # 
###############################

- binary_sensor:
  - name: "Smart Button Downstairs 1 Single Press"
    unique_id: smart_button_downstairs_1_single_press
    delay_off:
      seconds: 30
    state: >
      {{ is_state('sensor.smart_button_downstairs_1_action','single')}}

########################
#       Sensors        # 
########################


- sensor:
  #### Lights On Counter ######
  - name: "Lights On Count"
    unique_id: lights_on_count
    state: >
      {{ states.light 
            | selectattr('entity_id','in',label_entities('Light Group')) 
            | selectattr('state','eq','on')
            | list 
            | count }}

#   ### determine overnight low temperature for daily briefing ###
#   - name: "Overnight Low Temp"
#     unique_id: overnight_temp_low
#     state: |-
#       {% set start = now().replace(hour=0,minute=0,second=0, microsecond=0) %}
#       {% set end = (start + timedelta(days=1)) %}
#       {% set start = start.strftime("%Y-%m-%dT%H:%M:%S+00:00") %}
#       {% set end = end.strftime("%Y-%m-%dT%H:%M:%S+00:00") %}
#         {{ state_attr('weather.openweathermap', 'forecast') | selectattr('datetime', '>=', start) | selectattr('datetime','<=', end) | map(attribute='temperature') | list | min }}

#   ### determine overnight high temperature for daily briefing ###
#   - name: "Overnight High Temp"
#     unique_id: overnight_temp_high
#     state: |-
#       {% set start = now().replace(hour=0,minute=0,second=0, microsecond=0) %}
#       {% set end = (start + timedelta(days=1)) %}
#       {% set start = start.strftime("%Y-%m-%dT%H:%M:%S+00:00") %}
#       {% set end = end.strftime("%Y-%m-%dT%H:%M:%S+00:00") %}
#         {{ state_attr('weather.openweathermap', 'forecast') | selectattr('datetime', '>=', start) | selectattr('datetime','<=', end) | map(attribute='temperature') | list | max }}

###################################
#       Echo Volume Levels        #
###################################


  ### Kitchen Echo Volume History ###
  - name: "Kitchen Echo Volume"
    unique_id: kitchen_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.kitchen_echo_show','volume_level') | float(0) }}"


  ### Living Room Echo Volume History ###
  - name: "Living Room Echo Volume"
    unique_id: living_room_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.dave_s_2nd_echo_pop','volume_level') | float(0) }}"


  ### Dining Room Echo Volume History ###
  - name: "Dining Room Echo Volume"
    unique_id: dining_room_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.dave_s_echo_pop','volume_level') | float(0) }}"


  ### Office Echo Volume History ###
  - name: "Office Echo Volume"
    unique_id: office_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.dave_s_2nd_echo_pop_2','volume_level') | float(0) }}"


  ### Main Bedroom Echo Volume History ###
  - name: "Main Bedroom Echo Volume"
    unique_id: main_bedroom_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.main_bedroom_dot','volume_level') | float(0) }}"


  ### Guest Bedroom Echo Volume History ###
  - name: "Guest Bedroom Echo Volume"
    unique_id: guest_bedroom_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.guest_bedroom_echo_dot','volume_level') | float(0) }}"


  ### Seans Room Echo Volume History ###
  - name: "Seans Room Echo Volume"
    unique_id: seans_room_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.seans_room_dot','volume_level') | float(0) }}"


  ### Jamies Room Echo Volume History ###
  - name: "Jamies Room Echo Volume"
    unique_id: jamies_room_echo_volume
    icon: mdi:volume-equal
    state:  "{{ state_attr('media_player.living_room_dot','volume_level') | float(0) }}"

  - name: "Garage Door State"
    unique_id: garage_door_state 
    state: >- 
        {% if is_state('binary_sensor.garage_doors_state','on') %}
          {{"Open"}}
        {% else %}
          {{"Closed"}}
        {% endif %}
    icon: >- 
      {% if is_state('binary_sensor.garage_doors_state','on') %}
        mdi:garage-open-variant 
      {% else %}
        mdi:garage-variant 
      {% endif %}


  - name: "Hallway Motion"
    unique_id: hallway_motion  
    state: >- 
        {% if is_state('binary_sensor.hallway_motion','on') %}
          {{"Detected"}}
        {% else %}
          {{"Clear"}}
        {% endif %}
    icon: >- 
      {% if is_state('binary_sensor.hallway_motion','on') %}
        mdi:motion-sensor 
      {% else %}
        mdi:motion-sensor-off 
      {% endif %}


  - name: "Utility Room Motion"
    unique_id: utility_room_motion  
    state: >- 
        {% if is_state('binary_sensor.utility_room_motion','on') %}
          {{"Detected"}}
        {% else %}
          {{"Clear"}}
        {% endif %}
    icon: >- 
      {% if is_state('binary_sensor.utility_room_motion','on') %}
        mdi:motion-sensor 
      {% else %}
        mdi:motion-sensor-off 
      {% endif %}


  - name: "Upstairs Landing Motion"
    unique_id: upstairs_landing_motion 
    state: >- 
        {% if is_state('binary_sensor.upstairs_landing_motion','on') %}
          {{"Detected"}}
        {% else %}
          {{"Clear"}}
        {% endif %}
    icon: >- 
      {% if is_state('binary_sensor.upstairs_landing_motion','on') %}
        mdi:motion-sensor 
      {% else %}
        mdi:motion-sensor-off 
      {% endif %}

#########################
#   Days to Birthdays   #
#########################

  - name: "Days Until Gemma's Birthday"
    unique_id: days_until_gemmas_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=9, day=24)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=9, day=24))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=9, day=24)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}
        

  - name: "Days Until Dave's Birthday"
    unique_id: days_until_daves_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=9, day=30)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=9, day=30))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=9, day=30)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Jamie's Birthday"
    unique_id: days_until_jamies_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=1, day=7)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=1, day=7))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=1, day=7)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Sean's Birthday"
    unique_id: days_until_seans_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=3, day=22)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=3, day=22))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=3, day=22)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Gregor's Birthday"
    unique_id: days_until_gregors_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=3, day=15)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=3, day=15))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=3, day=15)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Blair's Birthday"
    unique_id: days_until_blairs_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=11, day=9)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=11, day=9))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=11, day=9)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Grandad's Birthday"
    unique_id: days_until_grandads_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=5, day=13)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=5, day=13))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=5, day=13)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Grandma's Birthday"
    unique_id: days_until_grandmas_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=1, day=15)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=1, day=15))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=1, day=15)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Dada's Birthday"
    unique_id: days_until_dadas_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=9, day=11)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=9, day=11))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=9, day=11)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}


  - name: "Days Until Nannie's Birthday"
    unique_id: days_until_nannies_birthday
    unit_of_measurement: Days
    state: >
      {% set daystogo = ((as_timestamp(now().replace(month=7, day=22)) - as_timestamp(now()) | int) / 86400) | round(0) %}
      {% if daystogo < 0 %}
        {{ 366 - ((as_timestamp(now()) | int - as_timestamp(now().replace(month=7, day=22))) / 86400) | round(0)}}
      {% else %}
        {{ ((as_timestamp(now().replace(month=7, day=22)) - as_timestamp(now()) | int) / 86400) | round(0) }}
      {% endif %}

########################################
#      Action Template Sensors         #
########################################

#########################################
#     Gets total rainfall for the day   # 
#########################################

- trigger:
  - platform: time_pattern
    hours: /1
  action: 
    - service: weather.get_forecasts 
      target: 
        entity_id: weather.openweathermap
      data: 
        type: hourly
      response_variable: my_forecast
  sensor:
    - name: Weather Total Expected Rainfall 24 Hours
      unique_id: weather_total_expected_rainfall_24_hrs
      icon: mdi:weather-pouring
      unit_of_measurement: mm
      state: >
        {% set ns = namespace() %}
        {% set ns.totalrainfall = 0 %}
        {% for daypart in range(0,7) %}
          {% set rainfall = my_forecast["weather.openweathermap"].forecast[daypart].precipitation %}
          {% set rainfall_probability = my_forecast["weather.openweathermap"].forecast[daypart].precipitation_probability / 100 %}
          {% if rainfall_probability > 0 %}
            {% set rainfall = rainfall * rainfall_probability %}
          {% endif %}
          {% set ns.totalrainfall = ns.totalrainfall + rainfall %}
        {% endfor %}
        {{ ns.totalrainfall | float(0) | round(2) }}

- trigger:
    - platform: time_pattern
      hours: "/1"
      minutes: 0
  sensor:
    - unique_id: z2m_last_seen_entities
      name: "Z2M Last Seen Entities"
      state: >
        {% set lapsed_hours = 36 %}
        {% set ns = namespace(count=0) %}
        {% for state in states.sensor | selectattr('entity_id', 'search', '.*_last_seen$')  %}
          {% if states(state.entity_id) == 'unavailable' or ((as_timestamp(now()) - as_timestamp(states(state.entity_id),0)) > ((lapsed_hours | int) * 60 * 60)) %}
            {% set ns.count = ns.count + 1 %}
          {% endif %}
        {% endfor %}
        {{ ns.count }}     
      attributes:
        devices: >
          {% set lapsed_hours = 36 %}
          {% set result = namespace(sensors=[]) %}
          {% for state in states.sensor | selectattr('entity_id', 'search', '.*_last_seen$') %}
            {% if states(state.entity_id) == 'unavailable' or ((as_timestamp(now()) - as_timestamp(states(state.entity_id),0)) > ((lapsed_hours | int) * 60 * 60)) %}
              {% set result.sensors = result.sensors + [state.name | regex_replace(find='_last_seen', replace='') ~ ' (' ~ relative_time(strptime(states(state.entity_id), '%Y-%m-%dT%H:%M:%S%z', 'unavailable')) ~ ')'] %}
            {% endif %}
          {% endfor %}
          {{ result.sensors }}
        
#########################################
#   Gets min and max temp for the day   # 
#########################################

# - trigger:
#     - platform: state
#       entity_id: weather.openweathermap
#     - platform: homeassistant
#       event: start
#     - platform: event
#       event_type: event_template_reloaded
#   action:
#     - service: weather.get_forecasts
#       data:
#         type: daily
#       target:
#         entity_id: weather.openweathermap
#       response_variable: daily
#   sensor:
#     - name: Forecast Daily
#       unique_id: weather_forecast_daily
#       state: "{{ states('weather.openweathermap') }}"
#       attributes:
#         forecast: "{{ daily['weather.openweathermap'].forecast }}"

- trigger:
    - platform: state
      entity_id: weather.openweathermap
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
  action:
    - service: weather.get_forecasts
      data:
        type: hourly
      target:
        entity_id: weather.openweathermap
      response_variable: hourly
  sensor:
    - name: Forecast Hourly
      unique_id: weather_forecast_hourly
      state: "{{ states('weather.openweathermap') }}"
      attributes:
        forecast: "{{ hourly['weather.openweathermap'].forecast }}"

############################
#     Clocks Changing      #
############################
- trigger:
    - platform: time
      at: "00:00:00"
    - platform: homeassistant
      event: start
    - platform: event
      event_type: call_service
      event_data:
        domain: template
        service: reload
  sensor:
    - unique_id: dst_next
      name: "Daylight Savings: Next"
      device_class: timestamp
      state: >
        {%- macro hms(t) %}
        {%- set dststr = t.dst() | string if t.dst() is not none else "00:00:00" %}
        {%- set h, m, s = dststr.split(':') | map('int') %}
        {{- h * 60 * 60 + m * 60 + s }}   
        {%- endmacro %}
        
        {%- macro is_dst(t) %}
        {{- hms(t) | int != 0 }}
        {%- endmacro %}
        
        {%- macro finddst(t, kwarg, rng) %}
        {%- set ns = namespace(previous=is_dst(t), found=none) %}
        {%- for i in range(rng) %}
          {%- set ts = t + timedelta(**{kwarg:i}) %}
          {%- if ns.previous != is_dst(ts) and ns.found is none %}
            {%- set ns.found = i %}
          {%- endif %}
        {%- endfor %}
        {{- ns.found }}
        {%- endmacro %}
        
        {%- set t = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
        {%- set d = finddst(t, 'days', 366) | int - 1 %}
        {%- set h = finddst(t + timedelta(days=d), 'hours', 25) | int - 1 %}
        {%- set m = finddst(t + timedelta(days=d, hours=h), 'minutes', 61) | int %}
        {{ (t + timedelta(days=d, hours=h, minutes=m)) }}

    - unique_id: dst_phrase
      name: "Daylight Savings: Phrase"
      state: >
        {%- macro hms(t) %}
        {%- set dststr = t.dst() | string if t.dst() is not none else "00:00:00" %}
        {%- set h, m, s = dststr.split(':') | map('int') %}
        {{- h * 60 * 60 + m * 60 + s }}   
        {%- endmacro %}

        {%- macro phrase(seconds, name, divisor, mod=None) %}
          {%- set value = ((seconds | abs // divisor) % (mod if mod else divisor)) | int %}
          {%- set end = 's' if value > 1 else '' %}
          {{- '{} {}{}'.format(value, name, end) if value > 0 else '' }}
        {%- endmacro %}

        {%- macro total(seconds) %}
        {%- set values = [ 
          phrase(seconds, 'hour', 60*60, 60*60*24),
          phrase(seconds, 'minute', 60, 60),
          ] | select('!=','') | list %}
        {{- values[:-1] | join(', ') ~ ' and ' ~ values[-1] if values | length > 1 else values | first | default}}
        {%- endmacro %}

        {%- macro finddelta(t, kwarg, rng) %}
        {%- set ns = namespace(previous=hms(t), found=none) %}
        {%- for i in range(rng) %}
          {%- set ts = t + timedelta(**{kwarg:i}) %}
          {%- if ns.previous != hms(ts) and ns.found is none %}
            {%- set before = hms(ts - timedelta(days=1)) | int %}
            {%- set after = hms(ts) | int %}
            {%- set ns.found =  after - before %}
          {%- endif %}
        {%- endfor %}
        {{ ns.found }}
        {%- endmacro %}
        
        {%- set t = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
        {%- set delta = finddelta(t, 'days', 365) | int %}
        {% if delta > 0 %}
          lose {{ total(delta | abs) }}
        {% else %}
          gain {{ total(delta | abs) }}
        {% endif %}


  ### Trigger based sensor to store calendar events ###
- trigger:
  - platform: event
    event_type: calendar_poll
  sensor:
    - name: "Calendar Events"
      unique_id: calendar_events
      state: "{{ trigger.event.data.calendar_response.events | count() }}"
      attributes:
        calendar_response: "{{ trigger.event.data.calendar_response }}"
      icon: mdi:calendar





                                                                    
                                                                    







                                                                    
                                                                    










                                                                    
                                                                    

 









                                                                    
                                                                    


