################################################################################## 
#   @author                 :   Remko Van Der Veer                               #
#   @date                   :   11/4/2020                                        #
#   @package                :   electrical_power.yaml                            #
#   @description            :   All electrical power config for dashboard        # 
#                                                                                #
#   @modified by            :   Ryan McLean                                      #
#   @date                   :   05/12/2022                                       #    
#                                                                                #
#   @further modified by    :   Dave Forrester (@Daverover66)                    #
#   @date                   :   26/02/2024                                       #
##################################################################################
   
###########################
#       sensors           # 
########################### 

template:
  - sensor:
      - name: "Inverter 1 Production"
        unique_id: inverter_1_production
        icon: mdi:solar-power
        unit_of_measurement: "W"
        state_class: "measurement"
        device_class: "power"
        state: >
          {% set inverter_1_dc_output = states('sensor.solaredge_i1_dc_power') | float (0) %}
          {% set battery_output = states('sensor.solaredge_b1_dc_power') | float (0) %}
          {% set inverter_1_production_discharging = battery_output + inverter_1_dc_output %}
          {% set inverter_1_production_charging = inverter_1_dc_output + battery_output %}

          {% if (battery_output >=0) %}
            {{ inverter_1_production_charging }}
          {% else %}
            {{ inverter_1_production_discharging }}
          {% endif %}

        availability: >
          {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_b1_dc_power') | is_number }}
      
      - name: "Total DC Power"
        unique_id: total_dc_power
        icon: mdi:solar-power
        unit_of_measurement: "W"
        state_class: "measurement"
        device_class: "power"
        state: >
          {% set total_dc_power = (states('sensor.solaredge_i1_dc_power')|float(0) + states('sensor.solaredge_i2_dc_power')|float(0)) %}
            {{ total_dc_power }}
        availability: >
          {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_i2_dc_power') | is_number }}

      - name: "Total AC Power"
        unique_id: total_ac_power
        icon: mdi:solar-power
        unit_of_measurement: "W"
        state_class: "measurement"
        device_class: "power"
        state: >
          {% set total_ac_power = (states('sensor.solaredge_i1_ac_power')|float(0) + states('sensor.solaredge_i2_ac_power')|float(0)) %}
            {{ total_ac_power }}
        availability: >
          {{ states('sensor.solaredge_i1_ac_power') | is_number and states('sensor.solaredge_i2_ac_power') | is_number }}
          

##########################################################
#    energy flow from Modbus config documentation 
##########################################################

      - name: "Power - Battery Charging"  
        unique_id: power_battery_charging                                      
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        state: "{{ max([float(states('sensor.solaredge_b1_dc_power'), 0), 0]) | abs() }}"

      - name: "Power - Battery Discharging"   
        unique_id: power_battery_discharging                              
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        state: "{{ min([float(states('sensor.solaredge_b1_dc_power'), 0), 0]) | abs() }}"
                                                                                  
      - name: "Power - Grid Import" 
        unique_id: power_grid_import                                            
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        state: "{{ min([float(states('sensor.solaredge_m1_ac_power'), 0), 0]) | abs() }}"

      - name: "Power - Grid Export" 
        unique_id: power_grid_export                                            
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        state: "{{ max([float(states('sensor.solaredge_m1_ac_power'), 0), 0]) | abs() }}"
                                                                                  
      - name: "Power - Solar Generation"  
        unique_id: power_solar_generation                                      
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        # The net of DC power from inverters and battery, only if this is positive
        state: "{{ max([float(states('sensor.solaredge_i1_dc_power'), 0) + float(states('sensor.solaredge_i2_dc_power'), 0) + float(states('sensor.solaredge_b1_dc_power'), 0), 0]) }}"
                                                                                  
      - name: "Power - Consumption"    
        unique_id: power_consumption                                         
        unit_of_measurement: "W"                                                
        device_class: "power"                                             
        state_class: "measurement"                                              
        # The net of inverters and grid power                                    
        state: "{{ (float(states('sensor.solaredge_i1_ac_power'), 0) + float(states('sensor.solaredge_i2_ac_power'), 0)) - float(states('sensor.solaredge_m1_ac_power'), 0) }}"
                                                                                                                                                                
      - name: "Power - PV - Battery"   
        unique_id: power_pv_battery                                         
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        # Battery power less anything coming from the grid, always positive     
        state: "{{ max([float(states('sensor.solaredge_b1_dc_power'), 0) + min([float(states('sensor.solaredge_i1_dc_power'), 0) + float(states('sensor.solaredge_i2_dc_power'), 0), 0]), 0]) }}"
      
      - name: "Power - PV - Load"    
        unique_id: power_pv_load                                           
        unit_of_measurement: "W"                                                
        device_class: "power"
        state_class: "measurement"                                              
        # What is being generated less what is going to the battery and what is being exported, always positive.
        state: "{{ max([float(states('sensor.power_solar_generation'), 0) - float(states('sensor.power_pv_battery'), 0) - float(states('sensor.power_grid_export'), 0), 0]) }}"
    
      - name: "Power - PV - Grid"    
        unique_id: power_pv_grid                                           
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        # What is being generated less what is going to the battery and what is being consumed, always positive
        state: "{{ max([float(states('sensor.power_solar_generation'), 0) - float(states('sensor.power_pv_battery'), 0) - float(states('sensor.power_consumption'), 0), 0]) }}"
                                                                                  
      - name: "Power - Grid - Load"  
        unique_id: power_grid_load                                           
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        # What is being imported less anything going to the battery, always positive
        state: "{{ max([float(states('sensor.power_grid_import'), 0) + min([float(states('sensor.solaredge_i1_ac_power'), 0), 0]), 0]) }}"
      
      - name: "Power - Grid - Battery" 
        unique_id: power_grid_battery                                         
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        # Grid -> Battery is I1 AC + I2 AC power, when negative                         
        # Battery -> Grid is what is being exported, if the battery is discharging
        state: "{{ max([-(float(states('sensor.solaredge_i1_ac_power'), 0) + float(states('sensor.solaredge_i2_ac_power'), 0)), 0]) - (float(states('sensor.power_grid_export'), 0) if float(states('sensor.solaredge_b1_dc_power'), 0) < 0 else 0) }}"
                                                                                  
      - name: "Power - Battery - Load"  
        unique_id: power_battery_load                                        
        unit_of_measurement: "W"                                                
        device_class: "power"                                                   
        state_class: "measurement"                                              
        # What is being discharged minus what is being exported, if positive    
        state: "{{ max([float(states('sensor.power_battery_discharging'), 0) - float(states('sensor.power_grid_export'), 0), 0]) }}"
          
      - name: "Solar Lifetime Production"
        unique_id: solar_lifetime_production
        unit_of_measurement: "MWh"
        icon: mdi:solar-power
        state: >
          {% set ac_energy_i1_kwh = states('sensor.solaredge_i1_ac_energy_kwh') | float(0) %}
          {% set ac_energy_i2_kwh = states('sensor.solaredge_i2_ac_energy_kwh') | float(0) %}
          {{ (((ac_energy_i1_kwh + ac_energy_i2_kwh) / 1000) | round (2)) }}
        availability: >
          {{ states('sensor.solaredge_i1_ac_energy_kwh') | is_number }}





      - name: "Solar Inverter Efficiency Int"
        unique_id: solar_inverter_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_inverter_efficiency') | float(0)) * 100) | round(2) }}

      - name: "Inverter 1 Production Int"
        unique_id: inverter_1_production_int
        icon: mdi:solar-power
        unit_of_measurement: "W"
        state: >
          {{ (states('sensor.inverter_1_production') | float(0)) | round(2) }}

      - name: "Inverter 1 Efficiency Int"
        unique_id: inverter_1_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.inverter_1_efficiency') | float(0)) * 100) | round (2) }}

      - name: "Inverter 2 Efficiency Int"
        unique_id: inverter_2_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.inverter_2_efficiency') | float(0)) * 100) | round (2) }}


      - name: "Solar Battery Efficiency Int"
        unique_id: solar_battery_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_battery_efficiency')| float(0)) * 100) | round(2) }}

      - name: "Solar Inverter Efficiency Average Int"
        unique_id: solar_inverter_efficiency_average_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_inverter_efficiency_average') | float(0)) * 100) | round(2) }}

      - name: "Solar Battery Efficiency Average Int"
        unique_id: solar_battery_efficiency_average_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_battery_efficiency_average')| float(0)) * 100) | round(2) }}

sensor:
  - platform: integration
    source: sensor.power_solar_generation
    method: left
    unit_prefix: k
    name: solar_panel_production_kwh
  - platform: integration
    source: sensor.power_battery_load
    method: left
    unit_prefix: k
    name: solar_battery_out_kwh
  - platform: integration
    source: sensor.power_pv_battery
    method: left
    unit_prefix: k
    name: solar_battery_in_kwh
  - platform: integration
    source: sensor.power_consumption
    method: left
    unit_prefix: k
    name: solar_house_consumption_kwh
  - platform: integration
    source: sensor.power_grid_import
    method: left
    unit_prefix: k
    name: solar_imported_power_kwh
  - platform: integration
    source: sensor.power_grid_export
    method: left
    unit_prefix: k
    name: solar_exported_power_kwh
  - platform: integration
    source: sensor.power_pv_load
    method: left
    unit_prefix: k
    name: solar_panel_to_house_kwh
  - platform: integration 
    source: sensor.power_grid_battery 
    method: left 
    unit_prefix: k
    name: solar_grid_to_battery_kwh 
  - platform: integration 
    source: sensor.power_battery_grid  
    method: left 
    unit_prefix: k
    name: solar_battery_to_grid_kwh 
  - platform: integration 
    source: sensor.power_battery_charging   
    method: left 
    unit_prefix: k
    name: solar_battery_charge_kwh 
  - platform: integration 
    source: sensor.power_battery_discharging   
    method: left 
    unit_prefix: k
    name: solar_battery_discharge_kwh 

  - platform: statistics
    name: "Solar Battery Efficiency Average"
    unique_id: solar_battery_efficiency_average
    state_characteristic: mean
    sampling_size: 1200
    max_age:
      hours: 24
    entity_id: sensor.solar_battery_efficiency

  - platform: statistics
    name: "Solar Inverter Efficiency Average"
    unique_id: solar_inverter_efficiency_average
    state_characteristic: mean
    sampling_size: 1200
    max_age:
      hours: 24
    entity_id: sensor.solar_inverter_efficiency

utility_meter:

### Daily
  solar_panel_production_daily:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Daily
    cycle: daily
  solar_battery_in_daily:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Daily
    cycle: daily
  solar_battery_out_daily:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Daily
    cycle: daily
  solar_house_consumption_daily:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Daily
    cycle: daily
  solar_imported_power_daily:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Daily
    cycle: daily
  solar_imported_power_daily_solaredge:
    source: sensor.solaredge_m1_imported_kwh
    name: Solar Imported Power Daily Solar Edge
    cycle: daily
  solar_exported_power_daily:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Daily
    cycle: daily
  solar_panel_to_house_daily:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Daily
    cycle: daily
  solar_grid_to_battery_daily:
    source: sensor.solar_grid_tobattery_kwh 
    name: Solar Grid To Battery Daily 
    cycle: daily 
  solar_battery_to_grid_daily:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Daily 
    cycle: daily 
  solar_battery_charge_daily:
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Daily 
    cycle: daily 
  solar_battery_discharge_daily:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Daily 
    cycle: daily 

### Weekly
  solar_panel_to_house_weekly:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Weekly
    cycle: weekly
  solar_imported_power_weekly:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Weekly
    cycle: weekly
  solar_house_consumption_weekly:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Weekly
    cycle: weekly
  solar_panel_production_weekly:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Weekly
    cycle: weekly
  solar_battery_in_weekly:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Weekly
    cycle: weekly
  solar_battery_out_weekly:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Weekly
    cycle: weekly
  solar_exported_power_weekly:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Weekly
    cycle: weekly
  solar_grid_to_battery_weekly:
    source: sensor.solar_grid_to_battery_kwh 
    name: Solar Grid To Battery Daily 
    cycle: weekly 
  solar_battery_to_grid_weekly:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Weekly  
    cycle: weekly  
  solar_battery_charge_weekly :
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Weekly  
    cycle: weekly  
  solar_battery_discharge_weekly:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Weekly  
    cycle: weekly 

### Monthly
  solar_panel_to_house_monthly:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Monthly
    cycle: monthly
  solar_imported_power_monthly:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Monthly
    cycle: monthly
  solar_house_consumption_monthly:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Monthly
    cycle: monthly
  solar_panel_production_monthly:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Monthly
    cycle: monthly
  solar_battery_in_monthly:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Monthly
    cycle: monthly
  solar_battery_out_monthly:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Monthly
    cycle: monthly
  solar_exported_power_monthly:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Monthly
    cycle: monthly
  solar_grid_to_battery_monthly:
    source: sensor.solar_grid_to_battery_kwh 
    name: Solar Grid To Battery Weekly  
    cycle: monthly 
  solar_battery_to_grid_monthly:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Monthly 
    cycle: monthly 
  solar_battery_charge_monthly:
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Monthly  
    cycle: monthly  
  solar_battery_discharge_monthly:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Monthly 
    cycle: monthly  

### Annually
  solar_panel_to_house_yearly:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Yearly
    cycle: yearly
  solar_imported_power_yearly:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Yearly
    cycle: yearly
  solar_house_consumption_yearly:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Yearly
    cycle: yearly
  solar_panel_production_yearly:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Yearly
    cycle: yearly
  solar_battery_in_yearly:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Yearly
    cycle: yearly
  solar_battery_out_yearly:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Yearly
    cycle: yearly
  solar_exported_power_yearly:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Yearly
    cycle: yearly
  solar_grid_to_battery_yearly:
    source: sensor.solar_grid_to_battery_kwh 
    name: Solar Grid To Battery Yearly 
    cycle: yearly 
  solar_battery_to_grid_yearly:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Yearly 
    cycle: yearly
  solar_battery_charge_yearly:
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Yearly  
    cycle: yearly 
  solar_battery_discharge_yearly:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Yearly 
    cycle: yearly 

        ####################################################################
        #                     old template sensors                         #
        ####################################################################

      # - name: "Solar Panel Production W"
      # # replaced by Power Solar Generation #
      #   unique_id: solar_panel_production_w
      #   unit_of_measurement: "W"
      #   icon: mdi:solar-power
      #   state: >
      #     {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float (0)%}
      #     {% set i2_dc_power = states('sensor.solaredge_i2_dc_power') | float (0)%}
      #     {% set i_total_dc_power = (i1_dc_power + i2_dc_power) | float(0) %}
      #     {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float (0)%}

      #     {% if (is_state ('sensor.solaredge_i1_dc_power' + 'sensor.solaredge_i2_dc_power', 'unknown') or is_state ('sensor.solaredge_b1_dc_power','unknown')) %}
      #       0
      #     {% elif (i_total_dc_power + b1_dc_power <= 0) %}
      #       0
      #     {% elif (i_total_dc_power + b1_dc_power < 10) %}
      #       0
      #     {% else %}
      #       {{ i_total_dc_power  + b1_dc_power }}
      #     {%  endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_i2_dc_power') | is_number and states('sensor.solaredge_b1_dc_power') | is_number }}

      # - name: "Solar Panel To House W"
      # # replaced by Power PV Load #
      #   unique_id: solar_panel_to_house_w
      #   unit_of_measurement: "W"
      #   icon: mdi:solar-power
      #   state: >
      #     {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float(0) %}
      #     {% set i2_dc_power = states('sensor.solaredge_i2_dc_power') | float(0) %}
      #     {% set i_total_dc_power = (i1_dc_power + i2_dc_power) | float(0) %}
      #     {% set i1_ac_power = states('sensor.solaredge_i1_ac_power') | float(0) %}
      #     {% set i2_ac_power = states('sensor.solaredge_i2_ac_power') | float(0) %}
      #     {% set i_total_ac_power = (i1_ac_power + i2_ac_power) | float(0) %}
      #     {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %}
      #     {% set m1_ac_power = states('sensor.solaredge_m1_ac_power') | float(0) %}
      #     {% set inverter_efficiency = states('sensor.solar_inverter_efficiency') | float(0) %}
      #     {% set grid_to_battery_w = states('sensor.solar_grid_to_battery_w') | float (0) %}
      #     {% set panel_production_w = states('sensor.solar_panel_production_w') | float (0) %}
      #     {% set panel_to_grid_w = states('sensor.solar_panel_to_grid_w') | float (0) %}
      #     {% set battery_to_grid_w = states('sensor.solar_battery_to_grid_w') | float (0) %}
          
      #     {% if b1_dc_power >= 0 and m1_ac_power >=0 %}
      #       {% if i_total_dc_power < 0 and i_total_ac_power <= 0 %}
      #         {{ i_total_dc_power - m1_ac_power }}
      #       {% else %}
      #         {{ i_total_ac_power - m1_ac_power }}
      #       {% endif %}
      #     {% elif b1_dc_power >= 0 and m1_ac_power <= 0 %}
      #       {% if i_total_dc_power < 0 and i_total_ac_power <= 0 %}
      #         {{ i_total_ac_power + grid_to_battery_w }}
      #       {% else %}
      #         {{ i_total_ac_power }}
      #       {% endif %}
      #     {% elif battery_to_grid_w > 0 %}
      #       {{ panel_production_w - panel_to_grid_w }}
      #     {% elif (b1_dc_power < 0) %} 
      #       {% if (i1_dc_power + b1_dc_power < 0) %} 
      #         0 
      #       {% else %}
      #         {{ ((i_total_dc_power + b1_dc_power) * inverter_efficiency) }}
      #       {% endif %}
      #     {% else %}
      #       0
      #     {% endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_i1_dc_power') | is_number and 
      #     states('sensor.solaredge_i2_dc_power') | is_number and 
      #     states('sensor.solaredge_i1_ac_power') | is_number and 
      #     states('sensor.solaredge_i2_ac_power') | is_number and 
      #     states('sensor.solaredge_b1_dc_power') | is_number and 
      #     states('sensor.solaredge_m1_ac_power') | is_number }}

      # - name: "Solar Panel To Battery W"
      # # replaced by Power PV Battery #
      #   unique_id: solar_panel_to_battery_w
      #   unit_of_measurement: "W"
      #   icon: mdi:solar-power
      #   state: >
      #     {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %}
      #     {% set grid_to_battery_w = states('sensor.solar_grid_to_battery_w') | float(0) %}
      #     {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float(0) %}
      #     {% set i1_ac_power = states('sensor.solaredge_i1_ac_power') | float(0) %}
      #     {% set i2_ac_power = states('sensor.solaredge_i2_ac_power') | float(0) %}
      #     {% set i2_dc_power = states('sensor.solaredge_i2_dc_power') | float(0) %}
      #     {% set i_total_dc_power = (i1_dc_power + i2_dc_power) | float(0) %}
          
      #     {% if (b1_dc_power > 0) %}
      #       {% if (grid_to_battery_w > 0) %}
      #         {% if (i1_dc_power < 0 and i1_ac_power <= 0) %}
      #           {% if ((b1_dc_power + i_total_dc_power) <=0) %}
      #             0
      #           {% else %}
      #             {{ (b1_dc_power + i_total_dc_power) }}
      #           {% endif %}
      #         {% else %}
      #           0
      #         {% endif %}
      #       {% else %}
      #         {{ b1_dc_power }}
      #       {% endif %} 
      #     {% else %}
      #       0
      #     {% endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_b1_dc_power') | is_number }}
        
      # - name: "Solar Panel To Grid W"
      # # replaced by Power PV Grid #
      #   unique_id: solar_panel_to_grid_w
      #   unit_of_measurement: "W"
      #   icon: mdi:solar-power
      #   state: >
      #     {% set panel_production_w = states('sensor.solar_panel_production_w') | float(0) %}
      #     {% set exported_power_w = states('sensor.solar_exported_power_w') | float(0) %}
      #     {% set house_consumption_w = states('sensor.solar_house_consumption_w') | float(0) %}
      #     {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %}
          
      #     {% if (exported_power_w > 0 and panel_production_w > 0) %}
      #       {% if panel_production_w <= house_consumption_w %}
      #         0
      #       {% elif (panel_production_w > exported_power_w) %}
      #         {{ exported_power_w }}
      #       {% else %}
      #         {{ exported_power_w + b1_dc_power  }}
      #       {% endif %}
      #     {% else %}
      #       0
      #     {% endif %}
          
      # - name: "Solar Battery To House W"
      # # replaced by Power Battery Load #
      #   unique_id: solar_battery_to_house_w
      #   unit_of_measurement: "W"
      #   icon: mdi:battery-negative
      #   state: >
      #     {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %} 
      #     {% set battery_efficiency = states('sensor.solar_battery_efficiency') | float(0) %} 
      #     {% set inverter_efficiency = states('sensor.solar_inverter_efficiency') | float(0) %}
      #     {% set battery_to_grid_w = states('sensor.solar_battery_to_grid_w') | float (0) %}
      #     {% set exported_power_w = states('sensor.solar_exported_power_w') | float(0) %}

      #     {% if b1_dc_power < 0 %} 
      #       {% if battery_to_grid_w > 0 and exported_power_w > 0 %}
      #         {{ (b1_dc_power * -1) - battery_to_grid_w }}
      #       {% elif exported_power_w > 0 %}
      #         {{ (b1_dc_power * -1 * battery_efficiency * inverter_efficiency) | float(0) | round (2)}} 
      #       {% else %}
      #         {{ (b1_dc_power * -1 * battery_efficiency * inverter_efficiency) | float(0) | round (2)}}
      #       {% endif %}
      #     {% else %}
      #       0
      #     {% endif %}          
      #   availability: >
      #     {{ states('sensor.solaredge_b1_dc_power') | is_number }}
          
      # - name: "Solar Battery To Grid W"
      # # replaced by Power Battery Discharging #
      #   unique_id: solar_battery_to_grid_w
      #   unit_of_measurement: "W"
      #   icon: mdi:solar-power
      #   state: >
      #     {% set exported_power_w = states('sensor.solar_exported_power_w') | float(0) %}
      #     {% set panel_to_grid_w = states('sensor.solar_panel_to_grid_w') | float(0) %}

      #     {% if ((exported_power_w + 1) > panel_to_grid_w) %}
      #       {{ exported_power_w - panel_to_grid_w }}
      #     {% else %}
      #       0
      #     {% endif %}

      # - name: "Solar Grid To House W"
      # # replaced by Power Grid Load #
      #   unique_id: solar_grid_to_house_w
      #   unit_of_measurement: "W"
      #   icon: mdi:transmission-tower-export
      #   state: >
      #     {% set m1_ac_power = states('sensor.solaredge_m1_ac_power') | float(0) %}
      #     {% set grid_to_battery_w = states('sensor.solar_grid_to_battery_w') | float(0) %}

      #     {% if (m1_ac_power <= 0) %}
      #       {{ (m1_ac_power * -1) - grid_to_battery_w }}
      #     {% else %}
      #       0
      #     {% endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_m1_ac_power') | is_number }}
          
      # - name: "Solar Grid To Battery W"
      # # replaced by Power Grid Battery #
      #   unique_id: solar_grid_to_battery_w
      #   unit_of_measurement: "W"
      #   icon: mdi:battery-positive
      #   state: >
      #     {% set i1_ac_power = states('sensor.solaredge_i1_ac_power') | float(0) %}
      #     {% set i2_ac_power = states('sensor.solaredge_i2_ac_power') | float (0) %}
      #     {% set i_total_ac_power = (i1_ac_power + i2_ac_power) | float(0) %}
      #     {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %}

      #     {% if (i_total_ac_power <= -25 and b1_dc_power > 0) %}
      #       {{ i_total_ac_power * -1 }}
      #     {% else %}
      #       0
      #     {% endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_i1_ac_power') | is_number and states('sensor.solaredge_b1_dc_power') | is_number}}

      # - name: "Solar Battery In W"
      # # replaced by Power Battery Charging #
      #   unique_id: solar_battery_in_w
      #   unit_of_measurement: "W"
      #   icon: mdi:battery-positive
      #   state: >
      #     {% set grid_to_battery_w = states('sensor.solar_grid_to_battery_w') | float(0) %}
      #     {% set panel_to_battery_w = states('sensor.solar_panel_to_battery_w') | float(0) %}

      #     {{ (grid_to_battery_w + panel_to_battery_w) }}

      # - name: "Solar House Consumption W"
      # # replaced by Power Consumption #
      #   unique_id: solar_house_consumption_w
      #   unit_of_measurement: "W"
      #   icon: mdi:home
      #   state: >
      #     {% set panel_to_house_w = states('sensor.solar_panel_to_house_w') | float(0) %}
      #     {% set battery_to_house_w = states('sensor.solar_battery_to_house_w') | float(0) %}
      #     {% set grid_to_house_w = states('sensor.solar_grid_to_house_w') | float(0) %}

      #     {{ (panel_to_house_w + battery_to_house_w + grid_to_house_w) }}

      # - name: "Solar Imported Power W"
      # # replaced by Power Grid Import #
      #   unique_id: solar_imported_power_w
      #   unit_of_measurement: "W"
      #   icon: mdi:transmission-tower-export
      #   state: >
      #     {% set m1_ac_power = states('sensor.solaredge_m1_ac_power') | float(0) %}

      #     {% if (m1_ac_power < 0) %}
      #       {{ (m1_ac_power * -1) }}
      #     {% else %}
      #       0
      #     {% endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_m1_ac_power') | is_number}}

      # - name: "Solar Exported Power W"
      # # replaced by Power Grid Export #
      #   unique_id: solar_exported_power_w
      #   unit_of_measurement: "W"
      #   icon: mdi:transmission-tower-import
      #   state: >
      #     {% set m1_ac_power = states('sensor.solaredge_m1_ac_power') | float(0) %}

      #     {% if (m1_ac_power > 20) %}
      #       {{ (m1_ac_power) }}
      #     {% else %}
      #       0
      #     {% endif %}
      #   availability: >
      #     {{ states('sensor.solaredge_m1_ac_power') | is_number }}
    
### Financials for Octopus Go (check tariffs)
  #    - name: "Solar Accounting Cost Rate Peak"
  #      unique_id: solar_accounting_cost_rate_peak
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.4136

  #    - name: "Solar Accounting Cost Rate Off Peak"
  #      unique_id: solar_accounting_cost_rate_off_peak
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.12

  #    - name: "Solar Accounting Compensation Rate"
  #      unique_id: solar_accounting_compensation_rate
  #      icon: mdi:cash-minus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.041

  #    - name: "Solar Accounting Cost Standing Charge"
  #      unique_id: solar_accounting_cost_standing_charge
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£"
  #      state: >
  #        0.6002

  #    - name: "Solar Accounting Total Daily"
  #      unique_id: solar_accounting_total_daily
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_go_peak_imported_power_daily') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set off_peak_cost = (states('sensor.octopus_go_off_peak_imported_power_daily') | float(0)) * (states('sensor.solar_accounting_cost_rate_off_peak') | float(0)) %}
  #        {% set compensation = (states('sensor.solar_exported_power_daily') | float(0)) * (states('sensor.solar_accounting_compensation_rate') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + off_peak_cost + standing_charge) - compensation) | round(2) }}

  #    - name: "Solar Accounting Total Weekly"
  #      unique_id: solar_accounting_total_weekly
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_go_peak_imported_power_weekly') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set off_peak_cost = (states('sensor.octopus_go_off_peak_imported_power_weekly') | float(0)) * (states('sensor.solar_accounting_cost_rate_off_peak') | float(0)) %}
  #        {% set compensation = (states('sensor.solar_exported_power_weekly') | float(0)) * (states('sensor.solar_accounting_compensation_rate') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + off_peak_cost + (standing_charge * 7)) - compensation) | round(2) }}

  #    - name: "Solar Accounting Total Monthly"
  #      unique_id: solar_accounting_total_monthly
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_go_peak_imported_power_monthly') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set off_peak_cost = (states('sensor.octopus_go_off_peak_imported_power_monthly') | float(0)) * (states('sensor.solar_accounting_cost_rate_off_peak') | float(0)) %}
  #        {% set compensation = (states('sensor.solar_exported_power_monthly') | float(0)) * (states('sensor.solar_accounting_compensation_rate') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + off_peak_cost + (standing_charge * 30)) - compensation) | round(2) }}

  #    - name: "Solar Accounting Total Yearly"
  #      unique_id: solar_accounting_total_yearly
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_go_peak_imported_power_yearly') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set off_peak_cost = (states('sensor.octopus_go_off_peak_imported_power_yearly') | float(0)) * (states('sensor.solar_accounting_cost_rate_off_peak') | float(0)) %}
  #        {% set compensation = (states('sensor.solar_exported_power_yearly') | float(0)) * (states('sensor.solar_accounting_compensation_rate') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + off_peak_cost + (standing_charge * 365)) - compensation) | round(2) }}


  ### Financials for Octopus Flux (check tariffs)

  #    - name: "Solar Accounting Cost Rate Peak"
  #      unique_id: solar_accounting_cost_rate_peak
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.41534

  #    - name: "Solar Accounting Cost Rate Cheap"
  #      unique_id: solar_accounting_cost_rate_cheap
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.17800
          
  #    - name: "Solar Accounting Cost Rate Standard"
  #      unique_id: solar_accounting_cost_rate_standard
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.29667

  #    - name: "Solar Accounting Compensation Rate Peak"
  #      unique_id: solar_accounting_compensation_rate_peak
  #      icon: mdi:cash-minus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.30534

  #    - name: "Solar Accounting Compensation Rate Cheap"
  #      unique_id: solar_accounting_compensation_rate_cheap
  #      icon: mdi:cash-minus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.06800

  #    - name: "Solar Accounting Compensation Rate Standard"
  #      unique_id: solar_accounting_compensation_rate_standard
  #      icon: mdi:cash-minus
  #      unit_of_measurement: "£/kWh"
  #      state: >
  #        0.18667

  #    - name: "Solar Accounting Cost Standing Charge"
  #      unique_id: solar_accounting_cost_standing_charge
  #      icon: mdi:cash-plus
  #      unit_of_measurement: "£"
  #      state: >
  #        0.60024

  #    - name: "Solar Accounting Total Daily"
  #      unique_id: solar_accounting_total_daily
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_flux_import_peak_daily') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set cheap_cost = (states('sensor.octopus_flux_import_cheap_daily') | float(0)) * (states('sensor.solar_accounting_cost_rate_cheap') | float(0)) %}
  #        {% set standard_cost = (states('sensor.octopus_flux_standard_import_daily') | float(0)) * (states('sensor.solar_accounting_cost_rate_standard') | float(0)) %}
  #        {% set compensation_cost_peak = (states('sensor.octopus_flux_export_peak_daily') | float(0)) * (states('sensor.solar_accounting_compensation_rate_peak') | float(0)) %}
  #        {% set compensation_cost_cheap = (states('sensor.octopus_flux_export_cheap_daily') | float(0)) * (states('sensor.solar_accounting_compensation_rate_cheap') | float(0)) %}
  #        {% set compensation_cost_standard = (states('sensor.octopus_flux_export_standard_daily') | float(0)) * (states('sensor.solar_accounting_compensation_rate_standard') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0) %}
  #        {{ ((peak_cost + cheap_cost + standard_cost + standing_charge) - (compensation_cost_cheap + compensation_cost_peak + compensation_cost_standard) | round(2)) }}

  #    - name: "Solar Accounting Total Weekly"
  #      unique_id: solar_accounting_total_weekly
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_flux_import_peak_weekly') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set cheap_cost = (states('sensor.octopus_flux_import_cheap_weekly') | float(0)) * (states('sensor.solar_accounting_cost_rate_cheap') | float(0)) %}
  #        {% set standard_cost = (states('sensor.octopus_flux_import_standard_weekly') | float(0)) * (states('sensor.solar_accounting_cost_rate_standard') | float(0)) %}
  #        {% set compensation_cost_peak = (states('sensor.octopus_flux_export_peak_weekly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_peak') | float(0)) %}
  #        {% set compensation_cost_cheap = (states('sensor.octopus_flux_export_cheap_weekly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_cheap') | float(0)) %}
  #        {% set compensation_cost_standard = (states('sensor.octopus_flux_export_standard_weekly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_standard') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + cheap_cost + standard_cost + (standing_charge * 7)) - (compensation_cost_cheap + compensation_cost_peak + compensation_cost_standard) | round(2)) }}

  #    - name: "Solar Accounting Total Monthly"
  #      unique_id: solar_accounting_total_monthly
  #      icon: mdi:currency-gbp
  #      unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_flux_import_peak_monthly') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %} 
  #        {% set cheap_cost = (states('sensor.octopus_flux_import_cheap_monthly') | float(0)) * (states('sensor.solar_accounting_cost_rate_cheap') | float(0)) %}
  #        {% set standard_cost = (states('sensor.octopus_flux_import_standard_monthly') | float(0)) * (states('sensor.solar_accounting_cost_rate_standard') | float(0)) %}
  #        {% set compensation_cost_peak = (states('sensor.octopus_flux_export_peak_monthly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_peak') | float(0)) %}
  #        {% set compensation_cost_cheap = (states('sensor.octopus_flux_export_cheap_monthly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_cheap') | float(0)) %}
  #        {% set compensation_cost_standard = (states('sensor.octopus_flux_export_standard_monthly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_standard') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + cheap_cost + standard_cost + (standing_charge * (365/12))) - (compensation_cost_cheap + compensation_cost_peak + compensation_cost_standard) | round(2)) }}

  #    - name: "Solar Accounting Total Yearly"
  #      unique_id: solar_accounting_total_yearly
  #      icon: mdi:currency-gbp
  #     unit_of_measurement: "£"
  #      state: >
  #        {% set peak_cost = (states('sensor.octopus_flux_import_peak_yearly') | float(0)) * (states('sensor.solar_accounting_cost_rate_peak') | float(0)) %}
  #        {% set cheap_cost = (states('sensor.octopus_flux_import_cheap_yearly') | float(0)) * (states('sensor.solar_accounting_cost_rate_cheap') | float(0)) %}
  #        {% set standard_cost = (states('sensor.octopus_flux_import_standard_yearly') | float(0)) * (states('sensor.solar_accounting_cost_rate_standard') | float(0)) %}
  #        {% set compensation_cost_peak = (states('sensor.octopus_flux_export_peak_yearly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_peak') | float(0)) %}
  #        {% set compensation_cost_cheap = (states('sensor.octopus_flux_export_cheap_yearly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_cheap') | float(0)) %}
  #        {% set compensation_cost_standard = (states('sensor.octopus_flux_export_standard_yearly') | float(0)) * (states('sensor.solar_accounting_compensation_rate_standard') | float(0)) %}
  #        {% set standing_charge = states('sensor.solar_accounting_cost_standing_charge') | float(0)%}
  #        {{ ((peak_cost + cheap_cost + standard_cost + (standing_charge * 365)) - (compensation_cost_cheap + compensation_cost_peak + compensation_cost_standard) | round(2)) }}   
