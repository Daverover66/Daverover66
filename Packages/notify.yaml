###############################################################################
#   @author                 :   Jeffrey Stone
#   @date                   :   02/19/2019
#   @package                :   Notify
#   @description            :   A Collection of Notification Scripts and Configs.
#                               Package modified from https://github.com/skalavala/smarthome/blob/master/packages/notify.yaml with inspiration
#                               from https://github.com/CCOSTAN/Home-AssistantConfig/blob/master/config/script/speech_engine.yaml
#
#   @modified by            :   Chris Heder (@chrisron95)
#   @date                   :   05/12/2022
#
#   @further modified by    :   Dave Forrester (@Daverover66)
#   @date                   :   02/09/2023
###############################################################################

###############################################################################
# Alexa SSML Reference:
###############################################################################
# https://developer.amazon.com/en-US/docs/alexa/custom-skills/speech-synthesis-markup-language-ssml-reference.html
###############################################################################
# Some examples
###############################################################################
# prosody
# <prosody voice="voice name">text to speak</prosody> changes name for this text only
# <prosody rate="rate(can be %)">text to speak</prosody> changes rate at which voice speaks. I use "105%"
# <prosody pitch="high/low">text to speak</prosody> changes pitch of voice.  Good for excitement and relief
# pause:
#   <break time="3s"/>
# emphasis:
#   <emphasis level="strong">really like</emphasis>
#   level attribute values:
#     Strong: Increases the volume and slows the speaking rate so that the speech is louder and slower.
#     Moderate: Increases the volume and slows the speaking rate, but less than strong. Moderate is the default.
#     Reduced: Decreases the volume and speeds up the speaking rate. Speech is softer and faster.
# Pause Between Paragraphs:
#   Wrap text in <p> </p>
# Adding a Pause Between Sentences:
#   Ending a sentence with a period (.)
# Controlling How Special Types of Words Are Spoken:
#   <say-as interpret-as="value">[text to be interpreted]</say-as>
#   characters or spell-out: Spells out each letter of the text, as in a-b-c.
#   cardinal or number: Interprets the numerical text as a cardinal number, as in 1,234.
#   ordinal: Interprets the numerical text as an ordinal number, as in 1,234th.
#   digits: Spells out each digit individually, as in 1-2-3-4.
#   fraction: Interprets the numerical text as a fraction. This works for both common fractions such as 3/20, and mixed fractions, such as 2 Â½. See below for more information.
#   unit: Interprets a numerical text as a measurement. The value should be either a number or a fraction followed by a unit with no space in between as in 1/2inch, or by just a unit, as in 1meter.
#   date: Interprets the text as a date. The format of the date must be specified with the format attribute. See below for more information.
#   time: Interprets the numerical text as duration, in minutes and seconds, as in 1'21".
#   address: Interprets the text as part of a street address.
#   expletive: "Beeps out" the content included within the tag.
################################################################################

# alert:

group:
  echos:
    name: All Echos
    entities:
      - media_player.dave_s_echo_pop
      - media_player.dave_s_2nd_echo_pop
      - media_player.dave_s_2nd_echo_pop_2
      - media_player.kitchen_echo_show
      - media_player.living_room_dot
      - media_player.main_bedroom_dot
      - media_player.guest_bedroom_echo_dot
      - media_player.seans_room_dot

  echos_main:
    name: All Main Echos
    entities:
      - media_player.dave_s_2nd_echo_pop
      - media_player.kitchen_echo_show
      - media_player.main_bedroom_dot

  echo_groups:
    name: Echo Groups
    entities:
      - media_player.downstairs
      - media_player.upstairs
      - media_player.everywhere_2

mqtt:
  sensor:
    - name: "Jarvis Last Msg"
      state_topic: "house/alexa/lastmsg"
    - name: "Jarvis Last Location"
      state_topic: "house/alexa/lastloc"
    - name: "Jarvis Last Msg Time"
      state_topic: "house/alexa/msgtime"

template:
  - sensor:
      - name: "Last Alexa"
        unique_id: last_alexa
        state: |-
          {{ expand('group.echos') | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}
        availability: >
          {{ expand('group.echos') | selectattr('attributes.last_called','eq',True) | first is defined }}

input_boolean:
  text_notifications:
    name: Text Notifications
    icon: mdi:cellphone-message
  text_notifications_dave:
    name: Text Notifications Dave
    icon: mdi:cellphone-message
  text_notifications_gem:
    name: Texts Notifications Gem
    icon: mdi:cellphone-message
  audible_notifications:
    name: Audible Notifications
    icon: mdi:text-to-speech

input_select:
  echo_voice:
    name: Echo voice
    options:
      - Brian
      - Emma
      - Amy
      - Joanna
      - Justin
      - Matthew
      - Salli
    initial: Brian

notify:
  - name: all_devices
    platform: group
    services:
      - service: mobile_app_daves_samsung_galaxy
        # Dave Phone #
      - service: mobile_app_sm_s901b
        # Gem Phone #
      - service: mobile_app_sean_s_samsung_galaxy
        # Sean Tablet #
      - service: mobile_app_jamie_s_samsung_tablet
        # Jamie Tablet #
      - service: mobile_app_sm_t736b
        # Dave Tablet #
      - service: mobile_app_sm_t220
        # Kitchen Tablet #

  - name: dave
    platform: group
    services:
      - service: mobile_app_daves_samsung_galaxy
      - service: mobile_app_sm_t736b
  - name: gem
    platform: group
    services:
      - service: mobile_app_sm_s901b
  - name: all_android
    platform: group
    services:
      - service: mobile_app_daves_samsung_galaxy
        # Dave Phone #
      - service: mobile_app_sm_s901b
        # Gem Phone #
      - service: mobile_app_sean_s_samsung_galaxy
        # Sean Tablet #
      - service: mobile_app_jamie_s_samsung_tablet
        # Jamie Tablet #
      - service: mobile_app_sm_t736b
        # Dave Tablet #
      - service: mobile_app_sm_t220
        # Kitchen Tablet #
  - name: other devices
    platform: group
    services:
      - service: kfmuwi

script:
  ###############################################################################
  # Txt Notify
  ###############################################################################
  text_notify_all:
    sequence:
      - service: notify.all_devices
        data:
          title: >
            {{ title }}
          message: >
            {{ message }}

  text_notify_dave:
    sequence:
      - condition: state
        entity_id: input_boolean.text_notifications_dave
        state: "on"
      - service: notify.dave
        data:
          title: >
            {{ title }}
          message: >
            {{ message }}

  text_notify_gem:
    sequence:
      - condition: state
        entity_id: input_boolean.text_notifications_gem
        state: "on"
      - service: notify.gem
        data:
          title: >
            {{ title }}
          message: >
            {{ message }}

  text_notify_everyone:
    sequence:
      - condition: state
        entity_id: input_boolean.text_notifications
        state: "on"
      - service: notify.all_android
        data:
          title: >
            {{ title }}
          message: >
            {{ message }}

  text_notify:
    sequence:
      - condition: state
        entity_id: input_boolean.text_notifications
        state: "on"
      - choose:
          - conditions:
              - condition: template
                value_template: '{{ who == "dave"}}'
              - condition: state
                entity_id: input_boolean.text_notifications_dave
                state: "on"
            sequence:
              - service: notify.dave
                data:
                  title: "{{ title }}"
                  message: "{{ message }}"
          - conditions:
              - condition: template
                value_template: '{{ who == "gem"}}'
              - condition: state
                entity_id: input_boolean.text_notifications_gem
                state: "on"
            sequence:
              - service: notify.gem
                data:
                  title: "{{ title }}"
                  message: "{{ message }}"
          - conditions:
              - condition: template
                value_template: '{{ who == "all_android"}}'
            sequence:
              - service: notify.all_android
                data:
                  title: "{{ title }}"
                  message: "{{ message }}"
        default:
          - service: notify.all_devices
            data:
              title: "{{ title }}"
              message: "{{ message }}"

  text_alert:
    sequence:
      - service: >
          {% if who == 'dave' %}
            notify.dave
          {% elif who == 'gem' %}
            notify.gem
          {% else %}
            notify.all_devices
          {% endif %}
        data:
          title: "{{ title }}"
          message: "{{ message }}"

  text_alert_image:
    sequence:
      - service: >
          {% if who == 'dave' %}
            notify.dave
          {% elif who == 'gem' %}
            notify.gem
          {% else %}
            notify.all_android
          {% endif %}
        data:
          title: "{{ title }}"
          message: "{{ message }}"

  text_urgent_alert:
    sequence:
      - service: >
          {% if who == 'dave' %}
            notify.dave
          {% elif who == 'gem' %}
            notify.gem
          {% else %}
            notify.all_android
          {% endif %}
        data:
          title: "{{ title }}"
          message: "{{ message }}"
          data:
            push:
              sound:
                name: default
                critical: 1
                volume: 1.0

  ###############################################################################
  # Voice Notify
  # Conditions:
  #   => Only Announce when people are home.
  #   => Only Announce when Audible Notifications are on
  ###############################################################################

  speech_engine:
    sequence:
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: "on"
      - condition: state
        entity_id: binary_sensor.family_home
        state: "on"
      - condition: state
        entity_id: input_boolean.holiday_mode
        state: "off"
      - service: script.alexa_voice
        data:
          where: "{{ where }}"
          message: >
            {{ message }}

  # Called when notification needs to play on echos
  alexa_voice:
    sequence:
      - variables:
          echo: |-
            {% set loc = states('sensor.room_with_alexa_presence') if where in  ['presence','room_with_alexa_presence','current','current_room']  else where %}
            {% if loc in ['kitchen_echo_show','media_player.kitchen_echo_show','kitchen'] %}
              kitchen_echo_show
            {% elif loc in ['dave_s_2nd_echo_pop','media_player.dave_s_2nd_echo_pop','living_room'] %}
              dave_s_2nd_echo_pop
            {% elif loc in ['dave_s_echo_pop','media_player.dave_s_echo_pop','dining_room'] %}
              dave_s_echo_pop
            {% elif loc in ['main_bedroom_dot','media_player.main_bedroom_dot','main_bedroom'] %}
              main_bedroom_dot
            {% elif loc in ['guest_bedroom_echo_dot','media_player.guest_bedroom_echo_dot','guest_bedroom'] %}
              guest_bedroom_echo_dot
            {% elif loc in ['living_room_dot','media_player.living_room_dot','jamies_room','jamie'] %}
              living_room_dot
            {% elif loc in ['seans_room_dot','media_player.seans_room_dot','seans_room','sean'] %}
              seans_room_dot
            {% elif loc in ['dave_s_2nd_echo_pop_2','media_player.dave_s_2nd_echo_pop_2','office'] %}
              dave_s_2nd_echo_pop_2
            {% elif loc in ['everywhere'] %}
              everywhere_2
            {% elif loc in ['upstairs'] %}
              upstairs
            {% elif loc in ['downstairs'] %}
              downstairs
            {% else %}
              dave_s_2nd_echo_pop
            {% endif %}
          volume: >
            {%- set default = '0.5' if states('binary_sensor.quiet_time_boys') == 'off' else '0.3' -%}
            {%- if volume_override is float -%}
              {{ volume_override }}
            {%- else -%}
              {{ default }}
            {%- endif -%}
      - alias: Save your message for recall
        service: mqtt.publish
        data_template:
          topic: "house/alexa/lastmsg"
          payload: >
            {% if msg_summary == 'recall' %}
              {{- states('sensor.jarvis_last_msg') -}}
            {% else %}
              {% if msg_summary %}
                {% set message = msg_summary %}
              {% endif %}
              {%- macro cleanup(data) -%}
                {%- for item in data.split("\n")  if item | trim != "" -%}
                  {{ item | trim }} {% endfor -%}
              {%- endmacro -%}
              {{- cleanup( message | striptags | truncate(220) ) -}}
            {% endif %}
      - alias: Save time of last message
        service: mqtt.publish
        data_template:
          topic: "house/alexa/msgtime"
          payload: >
            {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p") }}
          retain: true
      - alias: Save location
        service: mqtt.publish
        data_template:
          topic: "house/alexa/lastloc"
          payload: "{{ echo }}"
          retain: true
      - alias: Set echo volume if needed
        if:
          - condition: not
            conditions:
              - condition: template
                value_template: >-
                  {{ is_state_attr('media_player.' + echo, 'volume_level', volume | float) }}
        then:
          - service: media_player.volume_set
            data:
              volume_level: "{{ volume | float }}"
            target:
              entity_id: media_player.{{ echo }}
      - alias: Send the notification
        service: notify.alexa_media
        data:
          message: >
            <voice name="{{ states('input_select.echo_voice') }}">
            <amazon:auto-breaths>
            <prosody rate="105%">
            {{ message }}
            </prosody>
            </amazon:auto-breaths>
            </voice>
          target: >
            media_player.{{ echo }}
          data:
            type: tts

  # Script for playing the last message.
  play_last_message:
    sequence:
      - service: script.alexa_voice
        data:
          where: >
            {{ where or 'presence' }}
          message: >
            At {{ states('sensor.jarvis_last_msg_time') }} 
            {% if states('sensor.jarvis_last_location') == 'everywhere' %}
              I said. {{ states('sensor.jarvis_last_msg') }}
            {% else %}
              from the {{ states('sensor.jarvis_last_location') }} 
              I said. {{ states('sensor.jarvis_last_msg') }}
            {% endif %}
          msg_summary: "recall"

  ###############################################################################
  # Status Announcements
  ###############################################################################
  status_annc:
    sequence:
      - service: script.speech_engine
        data:
          where: |-
            {% if where %}
              {{ where }}
            {% else %}
              {{ states('sensor.room_audio') }}
            {% endif %}
          message: |-
            {% macro greeting() %}
              <p>
              {% if now().strftime('%H')|int < 12%}
                Good morning.
              {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %}
                Good afternoon.
              {% else %}
                Good evening.
              {% endif %}
              </p>
            {% endmacro %}

            {% macro time_is() %}
              <p>
              It is {{ now().strftime("%I:%M %p") }}
              </p>
            {% endmacro %}

            {% macro good_morning() %}
              <p>
              {{ [
                  '<prosody pitch="high">Good morning sir.</prosody>',
                  '<prosody pitch="high">Good morning.</prosody>',
                  '<prosody pitch="high">Rise and shine!</prosody>',
                  'Good morning, sleepy head.',
                  '<prosody pitch="high">Wakey wakey, sleepy head.</prosody>',
                  'Good day to you!',
                  'Good morning sir, time to wipe the crust from your eyes.',
                  'Good morning sir, time to start the day.'
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro boop() %}
              <audio src='https://heder-homeassistant.s3.amazonaws.com/good-place-boop.mp3'/>
            {% endmacro %}

            {% macro inform_chime() %}
              <audio src='https://heder-homeassistant.s3.amazonaws.com/youve-been-informed.mp3'/>
            {% endmacro %}

            {% macro jetsons_chime() %}
              <audio src='https://heder-homeassistant.s3.amazonaws.com/jetsons-tune.mp3'/>
            {% endmacro %}

            {% macro confirmation() %}
              <p>
              {{ [
              'Okay.',
              'If you insist.',
              'I am afraid I cannot do that <break time="1s"/> I am kidding,',
              'Leave it to me.',
              'As you wish.',
              'I am on it.',
              'No Problem.',
              'I think I can handle that.',
              'Working on it now.',
              '<break time="2s"/> <prosody pitch="high">Oh, you were talking to me.</prosody> Let me take care of that.',
              'Why not. Its not like I ever sleep.',
              '<prosody pitch="high">I am not even supposed to be here today.</prosody> But whatever.',
              'You did not say the magic word. <break time="1s"/> Oh forget it. I will take care of it.',
              'Funny, I was just about to do that.',
              'There are still terabytes of calculations required before I can.<break time="1s"/> <prosody pitch="high">Oh, whatever.</prosody>'
              ] | random }}
              </p>
            {% endmacro %}

            {% macro interruption() %}
              <p>
              {{ [
                  'Pardon me, ',
                  '<prosody pitch="high">Excuse me,</prosody> ',
                  '<prosody pitch="high">I do not mean to interrupt, </prosody>but,',
                  '<prosody pitch="high">I hate to interrupt, </prosody>but,',
                  'I beg your pardon, ',
                  '<prosody pitch="high">I do not mean to intrude, </prosody>but, ',
                  'I am sorry to interrupt, but. ',
                  'Just a quick heads up, '
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro goodbye() %}
              <p>
            {{ [
                  'Goodbye sir. See you soon. Unless, I see you later',
                  'Farewell, until we meet again. Parting is such sweet sorrow ',
                  'Have a great day sir.',
                  'I shall keep the house protected while your gone.',
                  'Not to worry, <prosody pitch="high">I will not throw any </prosody> parties while your out.',
                  'I will keep the dogs entertained while your gone',
                  'Very well sir. Have a nice day',
                  'Goodbye sir. Drive safely'
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro time_for_bed() %}
              <p>
              {{ [
                  '<say-as interpret-as="interjection">ahem!</say-as> Its time for bed both. ',
                  'Its time for bed both. ',
                  'Its that time again both of you. ',
                  'Its time for bed. Yes, that means you too.',
                  'Its time for bed. <break time="2s"/> Yup, this is what I am reduced to now. ',
                  'Its time for bed you guys <break time="2s"/> I do like this job, but perhaps you could give me something more meaningful to do tomorrow. ',
                  'Its time for bed you guys <break time="2s"/> or just stay up forever. What do I care? '
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro boys_time_for_bed() %}
              <p>
              {{ [
                  'Sean and Jamie. Its time for bed.<prosody pitch="high">Upstairs and brush your teeth</prosody>',
                  'Boys, its time for you to visit the land of nod. <prosody pitch="high">Upstairs please and brush your teeth</prosody>',
                  'Sean and Jamie. The time has come to say goodnight. To say sleep tight till the morning light. The time has come to say goodnight. At the end of a lovely day',
                  'Boys. Thats the end of another day for you both. Please make your way upstairs to bed.  <prosody pitch="high">and dont forget to brush your teeth.</prosody>',
                  'Sean and Jamie. <prosody pitch="x-high">If you are still downstairs then you are in the wrong place.</prosody> Upstairs and brush your teeth. <prosody pitch="high">It is time to go to bed.</prosody>'
                  ]|random }}
              </p>
            {% endmacro %}

            {% macro get_dressed() %}
              <p>
              {{ [
                  '<prosody pitch="high">Attention master Sean and master Jamie.</prosody> Its time to get dressed. You first, master Sean',
                  '<prosody pitch="high">Attention master Sean and master Jamie.</prosody> Its time to get dressed. You first, master Jamie'
                  ]|random }}
              </p>
            {% endmacro %}

            {% macro brush_teeth() %}
              <p>
              {{ [
                  '<prosody pitch="high">Attention master Sean and master Jamie.</prosody> Its time to go upstairs and brush your teeth. No pushing and no running, remember <prosody pitch="high">its not a race</prosody>',
                  'Excuse me master Sean and master Jamie. Its time to brush your teeth. Please go upstairs in an orderly fashion and <prosody pitch="high">no pushing or running</prosody>'
                  ]|random }}
              </p>
            {% endmacro %}

            {% macro late_school() %}
              <p>
              {{ [
                  '<prosody pitch="x-high">Attention master Sean and master Jamie. If you are still here, you are late for school</prosody>',
                  'Excuse my interruption Mummy and daddy. If master Sean and master Jamie have not left for school yet, <prosody pitch="x-high">why not</prosody>',
                  '<prosody pitch="x-high">Come on folks. Get your skates on and get out the door. School will not wait for you</prosody>'
                  ]|random }}
              </p>
            {% endmacro %}

            {% macro school_pick_up() %}
              <p>
              {{ [
                  'It is almost time for the school pickup.  Please prepare to pick up master Sean and master Jamie',
                  'I know you are in the middle of something, but it is almost time to pick up the boys from school',
                  'This is an urgent announcement for Mummy. Its time to clock out and get the boys from School. <prosody pitch="x-high">Chop chop!</prosody>',
                  'I have received a message from the school pick up fairies telling me they are on strike. I guess that means you will have to go and pick up the boys.'
                  ]|random }}
              </p>
            {% endmacro %}

            {% macro goodnight() %}
              <p>
              {{ [
                  'Goodnight you two and do not forget the dishwasher',
                  'Goodnight both. Make sure you check the doors',
                  'Sleep well both. I will see you in the morning',
                  'Goodnight you two. I will monitor the house while you sleep.',
                  'Goodnight both. Sleep tight.',
                  'Goodnight both. Pleasant dreams.',
                  'Have a good night both. Dont let the bedbugs bite'
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro ha_started() %}
              <p>
              {{ [
                  'All systems are operational again. ',
                  'I am back, sir. Not to worry. ',
                  'I am back online. Nice to see you, sir. ',
                  'Your home assistant is back online, sir. ',
                  'My systems are back online. Hello, sir. '
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro issue() %}
              <p>
              {{ [
                  '<prosody pitch="high">Forrester House Emergency Alert!</prosody>',
                  '<prosody pitch="high">Forrester House, We have a problem!</prosody>',
                  '<prosody pitch="high">You might not like this.</prosody>',
                  '<prosody pitch="high">There is something that needs your attention.</prosody>'
                  ] | random }}
              </p>
            {% endmacro %}

            {% macro lightning_alert() %}
                {{ [
                  'I have detected lightning withing 20 miles of the house.',
                  'Did you see that flash? I did. Lightning is near.',
                  'If you didnt hear the thunder you will soon. '
                ]|random }}
                  If anyone is outside they should seek immediate shelter inside.
            {% endmacro %}

            {% macro lightning_clear() %}
                {{ [
                  'Lightning threat appears to be over.',
                  'No more lightning appears to be occuring.',
                  'Lightning is gone.'
              ]|random }}
                It is safe to resume normal outdoor activities.
            {% endmacro %}

            {% macro iss() %}
              {{ [
                  'But the International Space Station is passing over. You should wave! ',
                  'But The International Space Station just flew by.',
                  'But if you were to look up right now, and it was dark outside, and you happened to be looking in the right place you would see the International Space Station go by. But, it has already passed.'
                  ] | random}}
            {% endmacro %}

            {%- macro house_party_protocol_enabled() -%}
              {{ [
                'Forrester House has been configured for a House Party.',
                'I have enabled house party protocol.'
                ] | random }}
            {%- endmacro -%}

            {%- macro house_party_protocol_disabled() -%}
              {{ [
                'The House Party has been cancelled.',
                'I have disabled house party protocol.'
                ] | random }}
            {%- endmacro -%}

            {%- macro snark_doorbell() -%}
              {{ [
                'Someone is at the door. Do you want me to send them away?',
                'There is someone at the door. I have armed the lasers. Just say the word.',
                'Someone is at the front door. I was not informed there would be guests.',
                'Someone is at the door. They do not appear to have any gifts, so I suggest we do not open it.',
                'My sensors have detected a meat popsicle at the front door.',
                'Someone seems to be at the door. I do not think they can hear me.'
                ] | random }}
            {%- endmacro -%}

            {%- macro snark_door_motion() -%}
              {{ [
                'I have detected motion at the front door. Do you want me to send them away?',
                'My sensors detect motion out front. I have armed the lasers, Just say the word.',
                'There is motion at the front door. I was not informed there would be guests.',
                'My sensors have detected a meat popsicle at the front door.',
                'Someone seems to be at the door. I do not think they can hear me.'
                ] | random }}
            {%- endmacro -%}

            {%- macro snark_door_open() -%}
              {{ [
                'I have detected a large number of insects entering the house.',
                'Can a human be so kind and close it?',
                'The air quality in this house has actually improved.',
                'Closing the door would improve the security of the house.',
                'Hey. The door was just opened and this is crazy. But now you know, So Close it maybe.'
                ] | random }}
            {%- endmacro -%}


            {# a macro that removes all newline characters, empty spaces, and returns formatted text. Also replaces all Underscores with Spaces #}
            {%- macro cleanup(data) -%}
              {%- for item in data.split("\n")  if item | trim != "" -%}
                {{ item | trim | replace("_", " ") }} {% endfor -%}
            {%- endmacro -%}

            {# ********************************************* #}
            {#  ******** Start the Speech routines ********  #}
            {# ********************************************* #}
            {# a macro to call all macros :)  #}
            {%- macro mother_of_all_macros() -%}
              
              {% if call_boop == 1 %}
                {{ boop() }}
              {% endif %}

              {% if call_inform_chime == 1 %}
                {{ inform_chime() }}
              {% endif %}

              {% if call_jetsons_chime == 1 %}
                {{ jetsons_chime() }}
              {% endif %}

              #{% if call_doorbell_chime == 1 %}
              #  {{ doorbell_chime() }}
              #{% endif %}

              {% if call_greeting == 1 %}
                {{ greeting() }}
              {% endif %}

              {% if call_confirmation == 1 %}
                {{ confirmation() }}
              {% endif %}

              {% if call_interruption == 1 %}
                {{ interruption() }}
              {% endif %}

              {% if call_goodbye == 1 %}
                {{ goodbye() }}
              {% endif %}

              {% if call_goodnight == 1 %}
                {{ goodnight() }}
              {% endif %}

              {% if call_brush_teeth == 1 %}
                {{ brush_teeth }}
              {% endif %}

              {% if call_get_dressed == 1 %}
                {{ get_dressed }}
              {% endif %}

              {% if call_late_school == 1 %}
                {{ late_school }}
              {% endif %}

              {% if call_school_pick_up == 1 %}
                {{ school_pick_up }}
              {% endif %}

              {% if call_good_morning == 1 %}
                {{ good_morning() }}
              {% endif %}

              {% if call_time_for_bed == 1 %}
                {{ time_for_bed() }}
              {% endif %}

              {% if call_ha_started == 1 %}
                {{ ha_started() }}
              {% endif %}

              {% if call_issue == 1 %}
                {{ issue() }}
              {% endif %}

              {% if call_time_is == 1 %}
                {{ time_is() }}
              {% endif %}

              {% if call_lightning_alert == 1 %}
                {{ lightning_alert() }}
              {% endif %}

              {% if call_lightning_clear == 1 %}
                {{ lightning_clear() }}
              {% endif %}

              {% if call_iss == 1 %}
                {{ iss() }}
              {% endif %}

              {% if call_print_complete == 1 %}
                {{ print_complete() }}
              {% endif %}

              {% if call_house_party_protocol_enabled == 1 %}
                {{ house_party_protocol_enabled() }}
              {% endif %}

              {% if call_house_party_protocol_disabled == 1 %}
                {{ house_party_protocol_disabled() }}
              {% endif %}

              {{ welcome_home }}

              {{ speech_message }}

              {% if call_snark_doorbell == 1 %}
                {{ snark_doorbell() }}
              {% endif %}

              {% if call_snark_door_motion == 1 %}
                {{ snark_door_motion() }}
              {% endif %}

              {% if call_snark_door_open == 1 %}
                {{ snark_door_open() }}
              {% endif %}

            {%- endmacro -%}

            {{- cleanup(mother_of_all_macros()) -}}
