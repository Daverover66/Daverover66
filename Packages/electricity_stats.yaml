################################################################################## 
#   @author                 :   Remko Van Der Veer                               #
#   @date                   :   11/4/2020                                        #
#   @package                :   energy_stats.yaml                                #
#   @description            :   All energy stats for dashboard & analysis        # 
#                                                                                #
#   @modified by            :   Ryan McLean                                      #
#   @date                   :   05/12/2022                                       #    
#                                                                                #
#   @further modified by    :   Dave Forrester (@Daverover66)                    #
#   @date                   :   26/02/2024                                       #
##################################################################################

###########################
#        helpers          # 
###########################

###########################
#        input text       # 
###########################

input_text:
  # From/to would ideally use input_datetime, but we need the time in a different format
  octopus_energy_target_from:
    icon: mdi:clock-start 
    name: Octopus Energy Target From
    initial: "00:00"
  octopus_energy_target_to:
    icon: mdi:clock-end 
    name: Octopus Energy Target To
    initial: "00:00"
  octopus_energy_target_offset:
    name: Octopus Energy Target Offset
    initial: "-00:00:00"

###########################
#     input number        # 
###########################

input_number:
  octopus_energy_target_hours:
    name: Octopus Energy Target Hours
    initial: 0.5
    step: 0.5
    min: 0
    max: 24
    mode: box 
    
###########################
#       sensors           # 
########################### 

template:
  - sensor:
      - name: "Solar Selfconsumption Ratio"
        unique_id: solar_selfconsumption_ratio
        icon: mdi:percent-outline
        state: >
          {% set panel_to_house_daily = states('sensor.solar_panel_to_house_daily') | float(0) %}
          {% set battery_in_daily = states('sensor.solar_battery_in_daily') | float(0) %}
          {% set exported_power_daily = states('sensor.solar_exported_power_daily') | float(0) %}

          {% if (panel_to_house_daily + battery_in_daily + exported_power_daily <= 0) %}
            0
          {% else %}
            {{ ((panel_to_house_daily + battery_in_daily) / (panel_to_house_daily + battery_in_daily + exported_power_daily) * 100) | round (1) }}
          {% endif %}

      - name: "Solar Selfsufficiency Ratio"
        unique_id: solar_selfsufficiency_ratio
        icon: mdi:percent-outline
        state: >
          {% set house_consumption_daily = states('sensor.solar_house_consumption_daily') | float(0) %}
          {% set imported_power_daily = states('sensor.solar_imported_power_daily') | float(0) %}

          {% if (house_consumption_daily <= 0) %}
            0
          {% else %}
            {{ (1 - (imported_power_daily / house_consumption_daily) * 100) | round (1) }}
          {% endif %}

      - name: "Solar Inverter Efficiency"
        unique_id: solar_inverter_efficiency
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float(0) %}
          {% set i2_dc_power = states('sensor.solaredge_i2_dc_power') | float(0) %}
          {% set i1_ac_power = states('sensor.solaredge_i1_ac_power') | float(0) %}
          {% set i2_ac_power = states('sensor.solaredge_i2_ac_power') | float(0) %}
          {% set inverter_efficiency = states('sensor.solar_inverter_efficiency') %}

          {% if (is_state('sensor.solar_inverter_efficiency', 'unknown')) %}
            1
          {% elif ((i1_dc_power + i2_dc_power) <= 100 or (i1_ac_power + i2_ac_power)  <= 100) %}
            {{ inverter_efficiency }}
          {% else %}
            {{ (i1_ac_power + i2_ac_power ) / (i1_dc_power + i2_dc_power) }}
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_i1_ac_power') | is_number }}
  
      - name: "Inverter 1 Efficiency"
        unique_id: inverter_1_efficiency
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {% set i1_dc_output = states('sensor.solaredge_i1_dc_power') | float(0) %}
          {% set i1_ac_output = states('sensor.solaredge_i1_ac_power') | float(0) %}
          {% set inverter_1_efficiency = states('sensor.inverter_1_efficiency') %}

          {% if is_state('sensor.inverter_1_efficiency', 'unknown') or is_state('sensor.inverter_1_efficiency','unavailable') %}
            1
          {% elif (i1_dc_output < 100 or i1_ac_output  < 100) %}
            {{ inverter_1_efficiency }}
          {% else %}
            {{ (i1_ac_output ) / (i1_dc_output) }}
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_i1_ac_power') | is_number }}

      - name: "Inverter 2 Efficiency"
        unique_id: inverter_2_efficiency
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {% set i2_dc_output = states('sensor.solaredge_i2_dc_power') | float (0) %}
          {% set i2_ac_output = states('sensor.solaredge_i2_ac_power') | float (0) %}
          {% set inverter_2_efficiency = states('sensor.inverter_2_efficiency') %}

          {% if is_state('sensor.inverter_2_efficiency', 'unknown') or is_state('sensor.inverter_2_efficiency','unavailable') %}    
            1
          {% elif (i2_dc_output < 100 or i2_ac_output < 100) %} 
            {{ inverter_2_efficiency }} 
          {% else %}  
            {{ (i2_ac_output) / (i2_dc_output) }}
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_i2_dc_power') | is_number and states('sensor.solaredge_i2_ac_power') | is_number }}

      - name: "Solar Battery Efficiency"
        unique_id: solar_battery_efficiency
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {% set i1_dc_power = states('sensor.solaredge_i1_dc_power') | float(0) %}
          {% set b1_dc_power = states('sensor.solaredge_b1_dc_power') | float(0) %}
          {% set battery_efficiency = states('sensor.solar_battery_efficiency') %}

          {% if (is_state('sensor.solar_battery_efficiency', 'unavailable') or is_state('sensor.solar_battery_efficiency', 'unknown') or (battery_efficiency == 0)) %}
            1
          {% elif (i1_dc_power + b1_dc_power <= 0) %}
            {% if (b1_dc_power >= 0 or i1_dc_power <= 0) %}
              {{ battery_efficiency }}
            {% else %}
              {{ (1 - ((b1_dc_power * -1 - (i1_dc_power)) / b1_dc_power * -1)) }}
            {% endif %} 
          {% else %}
            1
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_i1_dc_power') | is_number and states('sensor.solaredge_i1_ac_power') | is_number and states('sensor.solaredge_b1_dc_power') | is_number }}

####### Battery sensors ##########

      - name: "Battery State of Charge"
        unique_id: battery_state_of_charge
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        state: >
          {{ states('sensor.solaredge_b1_state_of_energy' , rounded = true) }}
        availability: >
          {{ states('sensor.solaredge_b1_state_of_energy') | is_number }}

      - name: "Solar Battery Time to Charge Grid"     
        unique_id: battery_time_to_full_grid
        state: >
          {% set battery_power = (states('sensor.solaredge_b1_dc_power') | int * -1) %}
          {% if battery_power == 0 %}
          {% set battery_power = 0.01 %}
          {% endif %}
          {% set max_energy_w = (states('sensor.solaredge_b1_maximum_energy') | float(0) * 1000) %}
          {% set energy_used_w = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_w %}
          {% set hrs_to_full =  (energy_used_w / 3900) | round(2) %}
          {%- if states('sensor.battery_state_of_charge') | float(0) == 100 %}
            Not Needed 
          {% else %}
            {{ '%02d:%02d' | format((hrs_to_full | int),((hrs_to_full*60) % 60) | round(0)) }}
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_b1_dc_power') | is_number }}

      - name: "Solar Battery Time to Charge Solar"     
        unique_id: battery_time_to_full_solar
        state: >
          {%- set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
          {%- if battery_power == 0 %}
            {%- set battery_power = 0.01 %}
          {%- else %}
            {% set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
          {%- endif %}
          {%- set max_energy_w = (states('sensor.solaredge_b1_maximum_energy') | float(0) * 1000) %}
          {%- set energy_used_w = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_w %}
          {%- set hrs_to_full =  (energy_used_w / battery_power) | round(2) %}
          {% if states('sensor.battery_state_of_charge') | float(0) > 99.5 %}
            Full
          {% elif battery_power*-1 > 0.01 %}
            Discharging   
          {% elif battery_power <= 0.01 %}
            Empty 
          {% else %}
            {{ '%02d:%02d' | format((hrs_to_full | int),((hrs_to_full*60) % 60) | round(0)) }}
          {% endif %}  
        availability: >
          {{ states('sensor.solaredge_b1_dc_power') | is_number }}

      - name: "Solar Battery Time to Empty"     
        unique_id: battery_time_to_empty
        state: >
          {%- set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
          {%- if battery_power == 0 %}
            {%- set battery_power = 0.01 %}
          {%- else %}
            {% set battery_power = (states('sensor.solaredge_b1_dc_power') | float(0)) %}
          {%- endif %}
          {%- set max_energy_w = (states('sensor.solaredge_b1_maximum_energy') | float(0) * 1000) %}
          {%- set energy_remaining = states('sensor.solaredge_b1_state_of_energy') | float(0)%}
          {%- set energy_used_w = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_w %}
          {%- set energy_remaining_w = max_energy_w - energy_used_w %}
          {%- set hrs_to_empty =  (energy_remaining_w | float / battery_power | float) | round(2) %}
          {%- if energy_remaining == 0 %}
            Empty
          {% elif hrs_to_empty < 1%}
            {{ '%02d:%02d' | format((hrs_to_empty * -1| int),((hrs_to_empty*60) % 60) | round(0)) }}
          {% elif states('sensor.battery_state_of_charge') | float(0) > 99.5 %}
            Full
          {% else %}
            Charging 
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_b1_dc_power') | is_number }}

      - name: "Solar Battery Daytime Topup Needed"
        unique_id: solar_battery_daytime_topup_needed 
        state: >
          {%- set battery_power_watts = (float(states('sensor.solaredge_b1_dc_power'),0)) %}
          {%- if battery_power_watts == 0 %}
          {%- set battery_power_watts = 0.01 %}
          {%- else %}
          {% set battery_power_watts = (float(states('sensor.solaredge_b1_dc_power'),0)| round(0) | abs) %}
          {%- endif %}
          {%- set max_energy_kws = (float(states('sensor.solaredge_b1_maximum_energy'),0) * 1000) *3600 %}
          {%- set energy_used_kws = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_kws %}
          {%- set energy_remaining_kws = max_energy_kws - energy_used_kws %}
          {%- set secs_to_empty =  (energy_remaining_kws | float / battery_power_watts | float) | round(0) %}
          {%- set timetogosecs = ((as_timestamp(now().replace(hour=19, minute=0)) - as_timestamp(now()) | int) ) | round(0) %} 
          {%- set state = secs_to_empty - timetogosecs %}
          {% if state < 0 %}
          {% set state = 1800 %}
          {% endif %}
          {% set month = now().month %}
          {% set batt = states('sensor.battery_state_of_charge')|float(-1) %}
              {% if ((is_state('binary_sensor.lunchtime','on') or is_state('binary_sensor.afternoon','on')) and (month in [9,10,11,12,1,2,3,4] and batt < 50)) or (state < 1800) %}
            true
          {% else -%}
            false
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_b1_dc_power') | is_number }} 

      - name: "Solar Battery Empty Time"  
        unique_id: solar_battery_empty_time 
        icon: mdi:clock-digital
        state: >
          {%- set battery_power_watts = (float(states('sensor.solaredge_b1_dc_power'),0)) %}
          {%- if battery_power_watts == 0 %}
          {%- set battery_power_watts = 0.01 %}
          {%- else %}
          {% set battery_power_watts = (float(states('sensor.solaredge_b1_dc_power'),0)| round(0) | abs) %}
          {%- endif %}
          {%- set max_energy_kws = (float(states('sensor.solaredge_b1_maximum_energy'),0) * 1000) *3600 %}
          {%- set energy_used_kws = ((100 - states('sensor.solaredge_b1_state_of_energy') | float(0))/100) * max_energy_kws %}
          {%- set energy_remaining_kws = max_energy_kws - energy_used_kws %}
          {%- set secs_to_empty =  (energy_remaining_kws | float / battery_power_watts | float) | round(0) %}
          {%- set timetogosecs = ((as_timestamp(now().replace(hour=19, minute=0)) - as_timestamp(now()) | int) ) | round(0) %} 
          {% if is_state('sensor.solar_battery_time_to_empty','Charging') %}
            The end of the day. 
          {% else %}
            {{ (as_timestamp(now()) + (secs_to_empty)) | timestamp_custom ("%I:%M %p")}}
          {% endif %}
        availability: >
          {{ states('sensor.solaredge_b1_dc_power') | is_number }} 


      - name: "Solar Lifetime Production"
        unique_id: solar_lifetime_production
        unit_of_measurement: "MWh"
        icon: mdi:solar-power
        state: >
          {% set ac_energy_i1_kwh = states('sensor.solaredge_i1_ac_energy_kwh') | float(0) %}
          {% set ac_energy_i2_kwh = states('sensor.solaredge_i2_ac_energy_kwh') | float(0) %}
          {{ (((ac_energy_i1_kwh + ac_energy_i2_kwh) / 1000) | round (2)) }}
        availability: >
          {{ states('sensor.solaredge_i1_ac_energy_kwh') | is_number }}

      - name: "Solar Inverter Efficiency Int"
        unique_id: solar_inverter_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_inverter_efficiency') | float(0)) * 100) | round(2) }}

      - name: "Inverter 1 Production Int"
        unique_id: inverter_1_production_int
        icon: mdi:solar-power
        unit_of_measurement: "W"
        state: >
          {{ (states('sensor.inverter_1_production') | float(0)) | round(2) }}

      - name: "Inverter 1 Efficiency Int"
        unique_id: inverter_1_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.inverter_1_efficiency') | float(0)) * 100) | round (2) }}

      - name: "Inverter 2 Efficiency Int"
        unique_id: inverter_2_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.inverter_2_efficiency') | float(0)) * 100) | round (2) }}


      - name: "Solar Battery Efficiency Int"
        unique_id: solar_battery_efficiency_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_battery_efficiency')| float(0)) * 100) | round(2) }}

      - name: "Solar Inverter Efficiency Average Int"
        unique_id: solar_inverter_efficiency_average_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_inverter_efficiency_average') | float(0)) * 100) | round(2) }}

      - name: "Solar Battery Efficiency Average Int"
        unique_id: solar_battery_efficiency_average_int
        icon: mdi:percent-outline
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.solar_battery_efficiency_average')| float(0)) * 100) | round(2) }}

sensor:
  - platform: integration
    source: sensor.power_solar_generation
    method: left
    unit_prefix: k
    name: solar_panel_production_kwh
  - platform: integration
    source: sensor.power_battery_load
    method: left
    unit_prefix: k
    name: solar_battery_out_kwh
  - platform: integration
    source: sensor.power_pv_battery
    method: left
    unit_prefix: k
    name: solar_battery_in_kwh
  - platform: integration
    source: sensor.power_consumption
    method: left
    unit_prefix: k
    name: solar_house_consumption_kwh
  - platform: integration
    source: sensor.power_grid_import
    method: left
    unit_prefix: k
    name: solar_imported_power_kwh
  - platform: integration
    source: sensor.power_grid_export
    method: left
    unit_prefix: k
    name: solar_exported_power_kwh
  - platform: integration
    source: sensor.power_pv_load
    method: left
    unit_prefix: k
    name: solar_panel_to_house_kwh
  - platform: integration 
    source: sensor.power_grid_battery 
    method: left 
    unit_prefix: k
    name: solar_grid_to_battery_kwh 
  - platform: integration 
    source: sensor.power_battery_grid  
    method: left 
    unit_prefix: k
    name: solar_battery_to_grid_kwh 
  - platform: integration 
    source: sensor.power_battery_charging   
    method: left 
    unit_prefix: k
    name: solar_battery_charge_kwh 
  - platform: integration 
    source: sensor.power_battery_discharging   
    method: left 
    unit_prefix: k
    name: solar_battery_discharge_kwh 

  - platform: statistics
    name: "Solar Battery Efficiency Average"
    unique_id: solar_battery_efficiency_average
    state_characteristic: mean
    sampling_size: 1200
    max_age:
      hours: 24
    entity_id: sensor.solar_battery_efficiency

  - platform: statistics
    name: "Solar Inverter Efficiency Average"
    unique_id: solar_inverter_efficiency_average
    state_characteristic: mean
    sampling_size: 1200
    max_age:
      hours: 24
    entity_id: sensor.solar_inverter_efficiency

utility_meter:

### Daily
  solar_panel_production_daily:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Daily
    cycle: daily
  solar_battery_in_daily:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Daily
    cycle: daily
  solar_battery_out_daily:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Daily
    cycle: daily
  solar_house_consumption_daily:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Daily
    cycle: daily
  solar_imported_power_daily:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Daily
    cycle: daily
  solar_imported_power_daily_solaredge:
    source: sensor.solaredge_m1_imported_kwh
    name: Solar Imported Power Daily Solar Edge
    cycle: daily
  solar_exported_power_daily:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Daily
    cycle: daily
  solar_panel_to_house_daily:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Daily
    cycle: daily
  solar_grid_to_battery_daily:
    source: sensor.solar_grid_tobattery_kwh 
    name: Solar Grid To Battery Daily 
    cycle: daily 
  solar_battery_to_grid_daily:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Daily 
    cycle: daily 
  solar_battery_charge_daily:
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Daily 
    cycle: daily 
  solar_battery_discharge_daily:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Daily 
    cycle: daily 

### Weekly
  solar_panel_to_house_weekly:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Weekly
    cycle: weekly
  solar_imported_power_weekly:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Weekly
    cycle: weekly
  solar_house_consumption_weekly:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Weekly
    cycle: weekly
  solar_panel_production_weekly:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Weekly
    cycle: weekly
  solar_battery_in_weekly:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Weekly
    cycle: weekly
  solar_battery_out_weekly:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Weekly
    cycle: weekly
  solar_exported_power_weekly:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Weekly
    cycle: weekly
  solar_grid_to_battery_weekly:
    source: sensor.solar_grid_to_battery_kwh 
    name: Solar Grid To Battery Daily 
    cycle: weekly 
  solar_battery_to_grid_weekly:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Weekly  
    cycle: weekly  
  solar_battery_charge_weekly :
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Weekly  
    cycle: weekly  
  solar_battery_discharge_weekly:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Weekly  
    cycle: weekly 

### Monthly
  solar_panel_to_house_monthly:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Monthly
    cycle: monthly
  solar_imported_power_monthly:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Monthly
    cycle: monthly
  solar_house_consumption_monthly:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Monthly
    cycle: monthly
  solar_panel_production_monthly:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Monthly
    cycle: monthly
  solar_battery_in_monthly:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Monthly
    cycle: monthly
  solar_battery_out_monthly:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Monthly
    cycle: monthly
  solar_exported_power_monthly:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Monthly
    cycle: monthly
  solar_grid_to_battery_monthly:
    source: sensor.solar_grid_to_battery_kwh 
    name: Solar Grid To Battery Weekly  
    cycle: monthly 
  solar_battery_to_grid_monthly:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Monthly 
    cycle: monthly 
  solar_battery_charge_monthly:
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Monthly  
    cycle: monthly  
  solar_battery_discharge_monthly:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Monthly 
    cycle: monthly  

### Annually
  solar_panel_to_house_yearly:
    source: sensor.solar_panel_to_house_kwh
    name: Solar Panel To House Yearly
    cycle: yearly
  solar_imported_power_yearly:
    source: sensor.solar_imported_power_kwh
    name: Solar Imported Power Yearly
    cycle: yearly
  solar_house_consumption_yearly:
    source: sensor.solar_house_consumption_kwh
    name: Solar House Consumption Yearly
    cycle: yearly
  solar_panel_production_yearly:
    source: sensor.solar_panel_production_kwh
    name: Solar Panel Production Yearly
    cycle: yearly
  solar_battery_in_yearly:
    source: sensor.solar_battery_in_kwh
    name: Solar Battery In Yearly
    cycle: yearly
  solar_battery_out_yearly:
    source: sensor.solar_battery_out_kwh
    name: Solar Battery Out Yearly
    cycle: yearly
  solar_exported_power_yearly:
    source: sensor.solar_exported_power_kwh
    name: Solar Exported Power Yearly
    cycle: yearly
  solar_grid_to_battery_yearly:
    source: sensor.solar_grid_to_battery_kwh 
    name: Solar Grid To Battery Yearly 
    cycle: yearly 
  solar_battery_to_grid_yearly:
    source: sensor.solar_battery_to_grid_kwh 
    name: Solar Battery To Grid Yearly 
    cycle: yearly
  solar_battery_charge_yearly:
    source: sensor.solar_battery_charging_kwh 
    name: Solar Battery Charge Yearly  
    cycle: yearly 
  solar_battery_discharge_yearly:
    source: sensor.solar_battery_discharging_kwh 
    name: Solar Battery Discharge Yearly 
    cycle: yearly 
