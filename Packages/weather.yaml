###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   02/19/2019
#   @package        :   Weather
#   @description    :   Weather and NWS Alerts
#   @original       :   https://github.com/Vasiley/Home-Assistant-Main/blob/master/packages/weather_alerts_nws.yaml
# 
#   @amended        :   Dave Forrester 
#   @date           :   09/03/2025
###############################################################################


input_boolean:
  freeze_warning:
    name: Freeze Warning
    icon: mdi:snowflake-alert
  weather_alert_texts:
    name: Weather Alert Texts
    icon: mdi:telegram
  lightning_warning:
    name: Lightning Warning
    icon: mdi:flash-alert
  tstorm_alarm:
    name: T-Storm Alarm
    icon: mdi:speaker-wireless
  raining:
    name: Raining

#########################
# Gets Met Office Alerts 
#########################

sensor:
  - platform: feedparser
    name: Met Office RSS Feed DG Lothian and Borders Weather Warnings
    feed_url: 'https://www.metoffice.gov.uk/public/data/PWSCache/WarningsRSS/Region/dg'
    date_format: '%a, %b %d %I:%M %p'
    inclusions:
      - summary
      - link

  - platform: statistics
    name: Inside Humidity Stats
    entity_id: sensor.average_indoor_humidity_level
    state_characteristic: mean
    sampling_size: 500
  - platform: history_stats
    name: Chill Time Yesterday
    entity_id: binary_sensor.chill_hours
    state: "on"
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    duration:
      hours: 24
  - platform: history_stats
    name: Freeze Time Yesterday
    entity_id: binary_sensor.freeze_hours
    state: "on"
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    duration:
      hours: 24
  - platform: statistics
    name: "Daily Avg Wind Speed"
    entity_id: sensor.gw2000a_wind_speed
    state_characteristic: mean
    max_age:
      hours: 24
  - platform: statistics
    name: "Avg Wind Speed"
    entity_id: sensor.gw2000a_wind_speed
    state_characteristic: mean
    max_age:
      minutes: 10
  - platform: statistics
    name: "Daily Max Wind Speed"
    entity_id: sensor.gw2000a_wind_gust
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Temp"
    entity_id: sensor.gw2000a_outdoor_temperature
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Low Temp"
    entity_id: sensor.gw2000a_outdoor_temperature
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Humidity"
    entity_id: sensor.gw2000a_humidity 
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Min Humidity"
    entity_id: sensor.gw2000a_humidity
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Rainfall Last 24h"
    unique_id: rainfall_last_24h
    entity_id: sensor.gw2000adaily_rain_rate
    state_characteristic: change
    max_age:
      hours: 24
    precision: 1
  - platform: statistics
    name: "Rainfall Last Week"
    unique_id: rainfall_last_week 
    entity_id: sensor.gw2000a_daily_rain_rate
    state_characteristic: change
    max_age:
      days: 7
    precision: 1
  - platform: statistics
    name: "Daily Max Pressure" 
    entity_id: sensor.gw2000a_relative_pressure 
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Low Pressure"
    entity_id: sensor.gw2000a_relative_pressure 
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Solar Radiation" 
    entity_id: sensor.gw2000a_solar_radiation
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Solar Lux" 
    entity_id: sensor.gw2000a_solar_lux
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max UV Index" 
    entity_id: sensor.gw2000a_uv_index 
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Soil Temp" 
    entity_id: sensor.gw2000a_soil_temperature_1
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Min Soil Temp"
    entity_id: sensor.gw2000a_soil_temperature_1 
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Soil Moisture" 
    entity_id: sensor.gw2000a_soil_moisture_1
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Min Soil Moisture"
    entity_id: sensor.gw2000a_soil_moisture_1
    state_characteristic: value_min
    max_age:
      hours: 24

  - platform: rest
    unique_id: nasa_moon_phase
    resource_template: https://svs.gsfc.nasa.gov/api/dialamoon/{{ states("sensor.nasa_date_and_time_format") }} 
    name: Nasa Moon Phase Info
    value_template: "{{ value_json.image.url }}"
    json_attributes:
      - image

template:

  - binary_sensor:
    - name: lightning_detected
      unique_id: lightning_detected_sensor
      state: >
        {% set strike_count = states('sensor.gw2000a_lightning_strikes') | int  %}
        {{ strike_count > 0 }}
      device_class: safety

    - name: chill_hours
      unique_id: chill_hours_sensor
      state: >
        {{ states('sensor.gw2000a_outdoor_temperature')  | int < 10 }}
      device_class: cold
  
    - name: freeze_hours
      unique_id: freeze_hours_sensor
      state: >
        {{ states('sensor.gw2000a_outdoor_temperature')  | float(0) < 0 }}
      device_class: cold

  - sensor:
    - name: lightning distance miles 
      unique_id: lightning_distance_miles 
      unit_of_measurement: "Miles" 
      state: >
        {% set km = states('sensor.gw2000a_lightning_strike_distance')|int %}
        {{ ((km*5)/8)|round(0)}}

    - name: soil_moisture_battery 
      unique_id: soil_moisture_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_soil_battery_1')|float(0) %}
          {{((batvolt/1.45)*100)|round}}
      device_class: battery
      
    - name: soil_temperature_battery 
      unique_id: soil_temperature_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_soil_temperature_1_battery')|float(0) %}
          {{((batvolt/1.45)*100)|round}}
      device_class: battery

    - name: rain-gauge_battery 
      unique_id: rain_gauge_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_wh40_battery')|float(0) %}
          {{((batvolt/1.45)*100)|round}}
      device_class: battery

    - name: wittboy_battery 
      unique_id: wittboy_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_wh90_battery')|float(0) %}
          {{((batvolt/2.9)*100)|round}}
      device_class: battery

  - sensor:
    - name: "Weather Alerts Borders" # for conditional card & markdown card as weather_alerts can be !=0 but have no SB content
      state: >
          {{ state_attr('sensor.met_office_rss_feed_dg_lothian_and_borders_weather_warnings','entries')
            | map(attribute='summary')
            | select('search', 'Scottish Borders') 
            | list
            | count
          }}

######################################
#    Hourly Forecast 
######################################
  - trigger:
    - platform: state
      entity_id: weather.openweathermap
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
    action:
      - action: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.openweathermap
        response_variable: hourly
    sensor:
      - name: Forecast Hourly
        unique_id: weather_forecast_hourly
        state: "{{ states('weather.openweathermap') }}"
        attributes:
          forecast: "{{ hourly['weather.openweathermap'].forecast }}"

#########################################
#     Gets total rainfall for the day   # 
#########################################

  - trigger:
    - platform: time_pattern
      hours: /1
    action: 
      - action: weather.get_forecasts 
        target: 
          entity_id: weather.openweathermap
        data: 
          type: hourly
        response_variable: my_forecast
    sensor:
      - name: Weather Total Expected Rainfall 24 Hours
        unique_id: weather_total_expected_rainfall_24_hrs
        icon: mdi:weather-pouring
        unit_of_measurement: mm
        state: >
          {% set ns = namespace() %}
          {% set ns.totalrainfall = 0 %}
          {% for daypart in range(0,7) %}
            {% set rainfall = my_forecast["weather.openweathermap"].forecast[daypart].precipitation %}
            {% set rainfall_probability = my_forecast["weather.openweathermap"].forecast[daypart].precipitation_probability / 100 %}
            {% if rainfall_probability > 0 %}
              {% set rainfall = rainfall * rainfall_probability %}
            {% endif %}
            {% set ns.totalrainfall = ns.totalrainfall + rainfall %}
          {% endfor %}
          {{ (ns.totalrainfall | float(0) *100) | round(2) }}

###############################
# Current Forecast 
############################### 

  - trigger:
    - platform: state
      entity_id: weather.openweathermap
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
    action:
      - action: weather.get_forecasts
        data:
          type: daily
        target:
          entity_id: weather.openweathermap
        response_variable: daily
    sensor:
      - name: Current Forecast
        unique_id: current_forecast
        state: "{{ states('weather.openweathermap') }}"
        attributes:
          forecast: "{{ daily['weather.openweathermap'].forecast }}"

  - sensor:

    - name: current_weather_warnings 
      icon: mdi:weather-windy 
      state: >- 
        {% if states('sensor.weather_alerts_borders') != '0' %}
        {% for item in state_attr('sensor.met_office_rss_feed_dg_lothian_and_borders_weather_warnings','entries') %}
          {% for type, icon in
            [
              ('extreme heat', 'weather-sunny-alert'),
              ('fog', 'weather-fog'),
              ('ice', 'car-traction-control'),
              ('lightning', 'weather-lightning'),
              ('rain', 'weather-pouring'),
              ('rain, wind', 'weather-pouring'),
              ('snow', 'weather-snowy-heavy'),
              ('snow, ice', 'weather-snowy-heavy'),
              ('thunderstorm', 'weather-lightning'),
              ('thunderstorms', 'weather-lightning-rainy'),
              ('wind', 'weather-windy')
            ]
            if type == item.summary | regex_findall_index('.*warning of (.*) affecting.*', ignorecase=True) and item.summary | regex_findall('Scottish Borders', ignorecase=True) %}
            {% set color = item.summary.split(' ')[0] %}
            {% set summary = item.summary | regex_findall_index('(.*) affecting Dumfries, Galloway, Lothian & Borders: (.*) valid from (.*) to (.*)', ignorecase=True) %}
            {% set link = item.link %}
            {% set time_utc_from = summary[2][0:2] ~':'~ summary[2][2:4] %}
            {% set time_utc_to = summary[3][0:2] ~':'~ summary[3][2:4] %}
            {% set date_from = summary[2][5:8] +'-'+ summary[2][9:11] +'-'+ summary[2][12:] %}
            {% set date_to = summary[3][5:8] +'-'+ summary[3][9:11] +'-'+ summary[3][12:] %}
            {% set time_local_from = ((now().date() ~ ' ' ~ time_utc_from ~ "+00:00") | as_datetime | as_local).strftime('%H:%M') %}  
            {% set time_local_to = ((now().date() ~ ' ' ~ time_utc_to ~ "+00:00") | as_datetime | as_local).strftime('%H:%M') %}
              A {{ summary[0] }} is valid from {{ time_local_from }} on {{ date_from }} to {{ time_local_to }} on {{ date_to }}.
          {% endfor %}
        {% endfor %}
        {% endif %}
        

    - name: current_forecast_summary 
      icon: mdi:weather-sunny
      state : >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
          {{ forecast.condition }}
      attributes:
        high_temp: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
          {{ forecast.temperature }}
        overnight_low: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.templow }}
        wind_bearing: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
          {{ forecast.wind_bearing }}
        wind_speed: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
          {{ forecast.wind_speed }}
        precipitation: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
          {{ forecast.precipitation }}
        frost_risk: >- 
          {% set frost_risk = states('sensor.outdside_thermal_comfort_frost_risk') %}
          {{ frost_risk }}

    - name: current_forecast_detail
      icon: mdi:weather-sunny
      state: >-
        {%- macro getReport() -%}
          {{ [
            'Today in Clovenfords ', 
            'Later Today ',
            'For the rest of the day'
            ] | random }}
          expect a high of {{ state_attr('sensor.current_forecast_summary','high_temp') }} degrees
          {%- if states('sensor.current_forecast_summary') == 'sunny' and is_state('binary_sensor.night','off')%}
            {{ [
                'with glorious sunshine.', 
                'with sunshine.',
                'with sunny conditions prevailing.'
                ] | random }}
          {%- elif states('sensor.current_forecast_summary') == 'sunny' and is_state('binary_sensor.night','on') %}
            {{ [
              'with no clouds.', 
              'with clear skies.'
              ] | random }}
          {%- elif states('sensor.current_forecast_summary') == 'clear-night' %}
            {{ [
              'with no clouds.', 
              'with clear skies.'
              ] | random }}
          {%- elif states('sensor.current_forecast_summary') == 'rainy' %}
            {{ [
              'with rain.', 
              'with showers.',
              'and rainy.'
              ] | random }}
            {{ [
              'Rainfall accumulation today is likely to be ', 
              'Total Rainfall amount today will be '
              ] | random }}
              around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
              in the next 24 hours
          {%- elif states('sensor.current_forecast_summary') == 'snowy' %}
            {{ [
              'with snow.', 
              'with snow showers.'
              ] | random }}
            {{ [
              'Snowfall accumulation today is likely to be ', 
              'Total snowfall amount today will be '
              ] | random }}
              around  {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
              in the next 24 hours
          {%- elif states('sensor.current_forecast_summary') == 'snowy-rainy' %}
            {{ [
                'with a mix of snow and rain, ', 
                'with snow and rain showers, ',
                'with sleet, '
                ] | random }}
              in the region of  {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
              possible in the next 24 hours    
          {%- elif states('sensor.current_forecast') == 'windy' %}
            {{ [
              'and windy.', 
              'with lots of wind.'
              ] | random }}
          {%- elif states('sensor.current_forecast_summary') == 'fog' %}
            {{ [
              'and foggy.', 
              'with some fog.'
              ] | random }}
          {% elif states('sensor.current_forecast_summary') == 'cloudy' %}
            {{ [
              'with clouds.', 
              'with cloudy skies.'
              ] | random }}
          {% elif states('sensor.current_forecast_summary') == 'partlycloudy' %}
            {{ [
                'with some clouds.', 
                'with partly cloudy skies.',
                'with scattered clouds'
                ] | random }}
          {%- elif states('sensor.current_forecast_summary') == 'hail' %}
            {{ [
              'with severve thunderstorms possible.', 
              'with hail possible.'
              ] | random }}
            {{ [
              'Rainfall accumulation today is likely to be ', 
              'Total Rainfall amount today will be '
              ] | random }}
              around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
              in the next 24 hours
          {%- elif states('sensor.current_forecast_summary') == 'lightning' %}
            {{ [
              'with thunderstorms possible.', 
              'with the potential of thunderstorms.'
              ] | random }}
            {{ [
              'Rainfall accumulation today is likely to be ', 
              'Total Rainfall amount today will be '
              ] | random }}
              around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
              in the next 24 hours
          {% endif -%}

          {{ [
              ' Later tonight expect a low of ', 
              ' Overnight tonight, expect a low of '
              ] | random }}
          {{ state_attr('sensor.current_forecast_summary','overnight_low') }} degrees. 
          {% if state_attr('sensor.current_forecast_summary','frost_risk') == 'frost_risk' %}
          {{ [
              ' With a chance of frost. So you might want to consider covering plants up tonight. ', 
              ' With frosty conditions ahead. So I suggest you turn the greenhouse heater on.',
              ' It is going to freeze overnight so get those plants covered up.',
              ' Its going to be a chilly night tonight, so protect those tender plants. '
              ] | random }}
          {% endif %}
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}


    - name: tomorrow_forecast_summary 
      icon: mdi:weather-sunny
      state : >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.condition }}
      attributes:
        high_temp: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.temperature }}
        overnight_low: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[2] %}
          {{ forecast.templow }}
        wind_bearing: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.wind_bearing }}
        wind_speed: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.wind_speed }}
        precipitation: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.precipitation }}
        frost_risk: >- 
          {% set frost_risk = states('sensor.outdside_thermal_comfort_frost_risk') %}
          {{ frost_risk }}

    - name: tomorrow_forecast_detail
      icon: mdi:weather-sunny
      state: >-
        {%- macro getReport() -%}
          {{ [
            'Tomorrow in Clovenfords ', 
            'For the next day ',
            'Tomorrow '
            ] | random }}
          expect a high of {{ state_attr('sensor.tomorrow_forecast_summary','high_temp') }}
          {%- if states('sensor.tomorrow_forecast') == 'sunny' %}
            {{ [
                'with glorious sunshine.', 
                'with sun.',
                'with sunny conditions prevailing.'
                ] | random }}
          {%- elif states('sensor.tomorrow_forecast_summary') == 'rainy' %}
            {{ [
              'with rain.', 
              'with showers.',
              'and rainy.'
              ] | random }}
            {{ [
              'Rainfall accumulation tomorrow is likely to be ', 
              'Total Rainfall amount tomorrow will be '
              ] | random }}
              around {{ state_attr('sensor.tomorrow_forecast_summary','precipitation') }} millimetres.
          {%- elif states('sensor.tomorrow_forecast_summary') == 'snowy' %}
            {{ [
              'with snow.', 
              'with snow showers.'
              ] | random }}
            {{ [
              'Snowfall accumulation ', 
              'Total snowfall amounts '
              ] | random }}
              expected to be {{ state_attr('sensor.tomorrow_forecast_summary','precipitation') }} millimetres.
          {%- elif states('sensor.tomorrow_forecast_summary') == 'snowy-rainy' %}
            {{ [
                'with a mix of rain and snow possible.', 
                'with snow and rain showers.',
                'with sleet.'
                ] | random }}
            Total accumulation of around {{ state_attr('sensor.tomorrow_forecast_summary','precipitation') }} millimetres is
              possible.    
          {%- elif states('sensor.tomorrow_forecast_summary') == 'windy' %}
            {{ [
              'and windy.', 
              'with lots of wind.'
              ] | random }}
          {%- elif states('sensor.tomorrow_forecast_summary') == 'fog' %}
            {{ [
              'and foggy.', 
              'with some fog.'
              ] | random }}
          {% elif states('sensor.tomorrow_forecast_summary') == 'cloudy' %}
            {{ [
              'with clouds.', 
              'with cloudy skies.'
              ] | random }}
          {% elif states('sensor.tomorrow_forecast_summary') == 'partlycloudy' %}
            {{ [
                'with some clouds.', 
                'with partly cloudy skies.',
                'with scattered clouds'
                ] | random }}
          {%- elif states('sensor.tomorrow_forecast_summary') == 'hail' %}
            {{ [
              'with severve thunderstorms possible.', 
              'with hail possible.'
              ] | random }}
            {{ [
              'Rainfall accumulation tomorrow is exptected to be ', 
              'Total Rainfall amount tomorrow will be '
              ] | random }}
              around {{ state_attr('sensor.tomorrow_forecast_summary','precipitation') }} millimetres.
          {%- elif states('sensor.tomorrow_forecast_summary') == 'lightning' %}
            {{ [
              'with thunderstorms possible.', 
              'with the potential of thunderstorms.'
              ] | random }}
            {{ [
              'Rainfall accumulation today is expected to be ', 
              'Total Rainfall amount today will be '
              ] | random }}
              around {{ state_attr('sensor.tomorrow_forecast_summary','precipitation') }} millimetres.
          {% endif -%}

          {{ [
              ' Tomorrow night expect a low of '
              ] | random }}
          {{ state_attr('sensor.tomorrow_forecast_summary','overnight_low') }} degrees. 
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}

    - name: current_conditions_summary 
      state: >-
        {%- macro getReport() -%}
          The Weather in Clovenfords
          {{ [
            ' is ', 
            ' is currently '
            ] | random }}
          {{states('sensor.gw2000a_outdoor_temperature')|round}} degrees 
          {% if is_state('sensor.current_forecast_summary', 'rainy') %}
            {{ [
            'with rain.', 
            'with showers.'
            ] | random }}
          {% elif is_state('sensor.current_forecast_summary', 'cloudy') %}
            {{ [
            'with clouds.', 
            'with cloudy skies.'
            ] | random }}
          {% elif is_state('sensor.current_forecast_summary', 'partlycloudy') %}
            {{ [
            'with some clouds.', 
            'with partly cloudy skies.',
            'with scattered clouds.'
            ] | random }}
          {% elif is_state('sensor.current_forecast_summary', 'sunny') %}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ [
              'and sunny.', 
              'with sun.'
              ] | random }}
            {% else %}
              {{ [
              'and clear.', 
              'with clear skies.'
              ] | random }}
            {% endif %}
          {% else %}
            and {{ states('sensor.openweathermap_weather') }}
          {% endif %}
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}

    - name: current_conditions_detail
      state: >-
        {%- macro getReport() -%}
          The Weather in Clovenfords
            {{ [
            ' is ', 
            ' is currently '
            ] | random }}
            {{states('sensor.gw2000a_outdoor_temperature')|round}} degrees 
          {% if is_state('weather.home', 'rainy') %}
            {{ [
            'with rain.', 
            'with showers.'
            ] | random }}
          {% elif is_state('weather.home', 'cloudy') %}
            {{ [
            'with clouds.', 
            'with cloudy skies.'
            ] | random }}
          {% elif is_state('weather.home', 'partlycloudy') %}
            {{ [
            'with some clouds.', 
            'with partly cloudy skies.',
            'with scattered clouds.'
            ] | random }}
          {% elif is_state('weather.home', 'sunny') %}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ [
              'and sunny.', 
              'with sun.'
              ] | random }}
            {% else %}
              {{ [
              'and clear.', 
              'with clear skies.'
              ] | random }}
            {% endif %}
          {% else %}
            and {{ states('weather.openweathermap') }}.
          {% endif %}
          {%- if is_state('binary_sensor.night','off')%}
            {{ [ 
              'Later Today, ',
              'For the rest of the day,'
              ] | random }}
            expect a high of {{ state_attr('sensor.current_forecast_summary','high_temp') }}
            {%- if states('sensor.current_forecast_summary') == 'sunny' and is_state('binary_sensor.night','off')%}
              {{ [
                  'and sunny.', 
                  'with sun.',
                  'with sunny conditions prevailing.'
                  ] | random }}
            {%- elif states('sensor.current_forecast_summary') == 'sunny' and is_state('binary_sensor.night','on') %}
              {{ [
                'and clear.', 
                'with clear skies.'
                ] | random }}
            {%- elif states('sensor.current_forecast_summary') == 'clear-night' %}
              {{ [
                'and clear.', 
                'with clear skies.'
                ] | random }}
            {%- elif states('sensor.current_forecast_summary') == 'rainy' %}
              {{ [
                'with rain.', 
                'with showers.',
                'and rainy.'
                ] | random }}
              {{ [
              'Rainfall accumulation today is expected to be ', 
              'Total Rainfall amount today will be '
              ] | random }}
              around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
                in the next 24 hours.
            {%- elif states('sensor.current_forecast_summary') == 'snowy' %}
              {{ [
                'with snow.', 
                'with snow showers.'
                ] | random }}
              {{ [
                'Snowfall accumulation ', 
                'Total snowfall amount '
                ] | random }}
                near {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
                possible in the next 24 hours.
            {%- elif states('sensor.current_forecast_summary') == 'snowy-rainy' %}
              {{ [
                  'with a mix of rain and snow possible.', 
                  'with snow and rain showers.',
                  'with sleet.'
                  ] | random }}
                Expect around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
                possible in the next 24 hours.
            {%- elif states('sensor.current_forecast_summary') == 'windy' %}
              {{ [
                'and windy.', 
                'with lots of wind.'
                ] | random }}
            {%- elif states('sensor.current_forecast_summary') == 'fog' %}
              {{ [
                'and foggy.', 
                'with some fog.'
                ] | random }}
            {% elif states('sensor.current_forecast_summary') == 'cloudy' %}
              {{ [
                'with clouds.', 
                'with cloudy skies.'
                ] | random }}
            {% elif states('sensor.current_forecast_summary') == 'partlycloudy' %}
              {{ [
                  'with some clouds.', 
                  'with partly cloudy skies.',
                  'with scattered clouds'
                  ] | random }}
            {%- elif states('sensor.current_forecast_summary') == 'hail' %}
              {{ [
                'with severve thunderstorms possible.', 
                'with hail possible.'
                ] | random }}
              {{ [
              'Rainfall accumulation today is expected to be ', 
              'Total Rainfall amount today will be '
              ] | random }}
              around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
                in the next 24 hours.
            {%- elif states('sensor.current_forecast_summary') == 'lightning' %}
              {{ [
                'with thunderstorms possible.', 
                'with the potential of thunderstorms.'
                ] | random }}
              {{ [
                'Rainfall accumulation ', 
                'Total Rainfall amount '
                ] | random }}
                expected around {{ states('sensor.weather_total_expected_rainfall_24_hours') }} millimetres
                in the next 24 hours.
            {% endif -%}

          {{ [
              ' Later tonight expect a low of ', 
              ' Overnight tonight, expect a low of '
              ] | random }}
          {{ state_attr('sensor.current_forecast_summary','overnight_low') }} degrees. 
          {% if state_attr('sensor.current_forecast_summary','frost_risk') == 'frost_risk' %}
          {{ [
              ' With a chance of frost. So you might want to consider covering plants up tonight. ', 
              ' With frosty conditions ahead. So I suggest you turn the greenhouse heater on.',
              '. It is going to freeze overnight so get those plants covered up.',
              '. Its going to be a chilly night tonight, so protect those tender plants. '
              ] | random }}
          {% endif %}
        {%- else -%}
          {% if state_attr('sensor.current_forecast_summary','frost_risk') == 'frost_risk' %}
          {{ [
              ' With a chance of frost. So you might want to consider covering plants up tonight. ', 
              ' With frosty conditions ahead. So I suggest you turn the greenhouse heater on.',
              '. It is going to freeze overnight so get those plants covered up.',
              '. Its going to be a chilly night tonight, so protect those tender plants. '
              ] | random }}
          {% endif %}
        {% endif %} 
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}

    - name: outside_pressure
      state: "{{ states('sensor.gw2000a_absolute_pressure') }}"
    - name: todays_high_temp
      device_class: temperature
      state: >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
        {{ forecast.temperature }}
    - name: tonights_low_temp
      device_class: temperature
      state: >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
        {{ forecast.templow }}

    - name: clothing_forecast
      state: >-
        {% if is_state('binary_sensor.overnight', 'off') %}
          {% set temp = states('sensor.high_temperature_today')|int %}
        {% else %}  
          {% set temp = states('sensor.gw2000a_outdoor_temperature')|round %}
        {% endif %}
        {%- if temp|int >= 18 %}
          {%- if temp|int < 25 %}
            Nice
          {% elif temp|int > 25 %}
            Hot
          {% else %}
            Toasty
          {%- endif %}
        {% elif temp|int < 18 %}
          {%- if temp|int < 1 %}
            Freezing
          {% elif temp|int > 10 %}
            Chilly
          {% else %}
            Cold
          {%- endif %}
        {% else %}
          Unknown
        {%- endif %}

    - name: clothing_forecast_detail
      state: >-
        {%- macro getReport() -%}
        {% if is_state('binary_sensor.morning','on') %}
          A little later the high temperature should be near {{ states('sensor.high_temperature_today') }} 
          {% if is_state('sensor.clothing_forecast', 'Freezing') %} 
            so I suggest wearing a woolly hat and a thick coat.
          {% elif is_state('sensor.clothing_forecast','Cold') %} 
            so I suggest wearing a hat and a warm coat.
          {% elif is_state('sensor.clothing_forecast', 'Chilly') %}
            so I suggest wearing warm clothing.
          {% elif is_state('sensor.clothing_forecast', 'Nice') %}
            {{ [ 
              'Which means it is '
            ] | random }}         
            {{ [ 'almost perfect outside. ',
              'pretty nice outside. ',
              'a good day to be outside. ',
              'rather enjoyable outside. ',
            ] | random }} 
            I suggest wearing shorts and short sleeves.
          {% elif is_state('sensor.clothing_forecast', 'Toasty') %}
            {{ [ 'That is ',
              'Which means it is ',
              'That is going to be '
            ] | random }} 
            {{ [ 'a bit warm. ',
              ' rather warm outside. ',
              ' almost too hot outside. ',
              ' a little warm. ',
            ] | random }} 
            so I suggest wearing shorts and short sleeves. 
          {% elif is_state('sensor.clothing_forecast', 'Hot') %}
            {{ [ 'That is ',
              'Which means it is ',
              'That is going to be '
            ] | random }} 
            {{ [ 'hot.',
              'hotter than the sun. ',
              'hotter than hot. but in a lot of bad ways. ',
              'hotter than the sun outside. ',
              'super hot. ',
              'hotter than the inside of a volcano. '
            ] | random }} 
            so I suggest wearing as little as possible.
          {% else %}
              {{ [ 'That is ',
              'Which means it is ',
              'That is going to be '
            ] | random }} 
              {{ states.sensor.clothing_forecast.state }} today so I suggest wearing shorts.
          {% endif %} 
        {% else %}
          Based on the current temperature
          {% if is_state('sensor.clothing_forecast', 'Freezing') %}
            It is freezing. so I suggest wearing a winter coat, hat and gloves if you are going out.
          {% elif is_state('sensor.clothing_forecast','Cold') %}
            It is cold outside. so I suggest wearing a thick jumper and coat.
          {% elif is_state('sensor.clothing_forecast', 'Chilly') %}
            It is chilly right now. so I suggest wearing a warm coat 
            if you are going to venture outside.
          {% elif is_state('sensor.clothing_forecast', 'Nice') %}
            It is            
            {{ [ 'nice outside. ',
              'pretty nice outside. ',
              'a good day to be outside. ',
              'rather enjoyable outside. ',
            ] | random }} 
            So I suggest wearing shorts and a tee shirt.
          {% elif is_state('sensor.clothing_forecast', 'Toasty') %}
            It is 
            {{ [ 'a bit warm ',
              ' rather warm ',
              ' almost too hot ',
              ' a little warm ',
            ] | random }} 
            outside. So I suggest wearing shorts an a tee shirt. 
          {% elif is_state('sensor.clothing_forecast', 'Hot') %}
            It is 
            {{ [ 'hot',
              'hotter than the sun ',
              'hotter than hot. but in a lot of bad ways ',
              'hotter than the sun outside ',
              'super hot ',
              'hotter than the inside of a volcano '
            ] | random }} 
            outside. So I suggest staying indoors.
          {% else %}
            It is {{ states.sensor.clothing_forecast.state }} right now. so I suggest wearing shorts.
          {% endif %} 
        {% endif %}
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}

    - name: sun_status
      state: >-
        {%- if is_state('sun.sun', 'below_horizon') -%}
          You have  
          {%- set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() -%}
          {% set hours = seconds / 60 -%}
          {%- if seconds / ( 60 * 60 ) > 1 -%}
            {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
          {%- else -%}
            {{""}} {{ (seconds // 60) | int }} minutes
          {%- endif -%}
          {{ [
            ' until the sun rises.',
            ' until the sun is up.',
            ' until sunrise.',
            ' until sun up.'
          ]|random }}
        {%- else %}
          You have 
          {%- set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %}
          {%- set hours = seconds / 60 -%}
          {%- if seconds / ( 60 * 60 ) > 1 -%}
            {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
          {%- else -%}
            {{""}} {{ (seconds // 60) | int }} minutes
          {%- endif -%}
          {{ [
            ' until the sun sets for the day.',
            ' until the sun slips below the horizon.',
            ' until sunset. '
          ]|random }}
        {%- endif -%}

    - name: moon_phase
      state: >-
        {% if state_translated('sensor.moon_phase') == 'Full moon' %}
          {{ ['Check out the full moon tonight!',
              'By the way, tonight is a full moon. ',
              'The moon is big and bright! And full. ',
              'If you want to see the full moon tonight is the night.'
              ] | random }}
        {% elif state_translated('sensor.moon_phase') == 'Waning gibbous' %}
          Tonights moon phase is waning gibbous.
        {% elif state_translated('sensor.moon_phase') == 'Last quarter' %}
          Tonights moon phase is last quarter.
        {% elif state_translated('sensor.moon_phase') == 'Waning crescent' %}
          Tonights moon phase is waning crescent.
        {% elif state_translated('sensor.moon_phase') == 'New moon' %}
          Tonights moon is dark and new.
        {% elif state_translated('sensor.moon_phase') == 'Waxing crescent' %}
          Tonights moon phase is waxing crescent.
        {% elif state_translated('sensor.moon_phase') == 'First quarter' %}
          Tonights moon phase is first quarter.
        {% elif state_translated('sensor.moon_phase') == 'Waxing gibbous' %}
          Tonights moon phase is waxing gibbous.
        {% endif %} 

  
    - name: weather_wind_direction 
      unique_id: weather_wind_direction 
      state: >
        {% set direction = ['Northerly','NorNorEast','NorEast','EastNorEast','Easterly','EastSowEast','SowEast','SowSowEast','Southerly','SowSowWest','SowWest','WestSowWest','Westerly','WestNorWest','NorWest','NorNorWest'] %}
        {% set degree = states('sensor.gw2000a_wind_direction')|float %}
        {{ direction[((degree+11.25)/22.5)|int] }}

# MQTT Stored Sensors
mqtt:
  sensor:
    - name: "Max Wind Gust"
      state_topic: "house/weather/maxwind"
    - name: "ATH Wind Gust"
      state_topic: "house/weather/athwind"
    - name: "Total Rain Fall"
      state_topic: "house/weather/totalrainfall"
    - name: "ATH 24h Rain"
      state_topic: "house/weather/athdailyrain"
    - name: "Days with Rain"
      state_topic: "house/weather/daysrain"
    - name: "Days without Rain"
      state_topic: "house/weather/daysnorain"
    - name: "Total Lightning Strikes"
      state_topic: "house/weather/totalstrikes" 
    - name: "Max Lightning Strikes"
      state_topic: "house/weather/maxstrikes"
    - name: "Max Temp"
      state_topic: "house/weather/maxtemp"
    - name: "Low Temp"
      state_topic: "house/weather/lowtemp"
    - name: "ATH Max Temp"
      state_topic: "house/weather/athmaxtemp"
    - name: "ATH Low Temp"
      state_topic: "house/weather/athlowtemp"
    - name: "Monthly Max Temp"
      state_topic: "house/weather/monthlymaxtemp"
    - name: "Monthly Low Temp"
      state_topic: "house/weather/monthlylowtemp"
    - name: "Min Pressure"
      state_topic: "house/weather/minpress"
    - name: "Max Pressure"
      state_topic: "house/weather/maxpress"
    - name: "Monthly Min Pressure"
      state_topic: "house/weather/monthlyminpress"
    - name: "Monthly Max Pressure"
      state_topic: "house/weather/monthlymaxpress"
    - name: "ATH Min Pressure"
      state_topic: "house/weather/athminpress"
    - name: "ATH Max Pressure"
      state_topic: "house/weather/athmaxpress"
    - name: "Min Humidity"
      state_topic: "house/weather/minhum"
    - name: "Max Humidity"
      state_topic: "house/weather/maxhum"
    - name: "Monthly Min Humidity"
      state_topic: "house/weather/monthlyminhum"
    - name: "Monthly Max Humidity"
      state_topic: "house/weather/monthlymaxhum"
    - name: "ATH Min Humidity"
      state_topic: "house/weather/athminhum"
    - name: "ATH Max Humidity"
      state_topic: "house/weather/athmaxhum"
    - name: "Chill Hours"
      state_topic: "house/weather/chillhours"
    - name: "Freeze Hours"
      state_topic: "house/weather/freezehours" 
    - name: "Yesterday Rainfall"
      state_topic: "house/weather/yesterday_rainfall_mm"
    - name: "Weekly Rainfall"
      state_topic: "house/weather/weekly_rainfall"
    - name: "ws_wind_speed"
      unique_id: ws_wind_speed
      state_topic: "house/weather/new_wind_speed"
    - name: "Max Solar Radiation"
      state_topic: "house/weather/maxsolrad"
    - name: "ATH Max Solar Radiation"
      state_topic: "house/weather/athmaxsolrad"
    - name: "Max Solar Lux"
      state_topic: "house/weather/maxsollux"
    - name: "ATH Max Solar Lux"
      state_topic: "house/weather/athmaxsollux"
    - name: "Max UV Index"
      state_topic: "house/weather/maxuv"
    - name: "ATH Max UV Index"
      state_topic: "house/weather/athmaxuv"
    - name: "Min Soil Temperature"
      state_topic: "house/weather/minsoiltemp"
    - name: "Max Soil Temperature"
      state_topic: "house/weather/maxsoiltemp"
    - name: "Monthly Min Soil Temperature"
      state_topic: "house/weather/monthlyminsoiltemp"
    - name: "Monthly Max Soil Temperature"
      state_topic: "house/weather/monthlymaxsoiltemp"
    - name: "ATH Min Soil Temperature"
      state_topic: "house/weather/athminsoiltemp"
    - name: "ATH Max Soil Temperature"
      state_topic: "house/weather/athmaxsoiltemp"
    - name: "Min Soil Moisture"
      state_topic: "house/weather/minsoilmoist"
    - name: "Max Soil Moisture"
      state_topic: "house/weather/maxsoilmoist"
    - name: "Monthly Min Soil Moisture"
      state_topic: "house/weather/monthlyminsoilmoist"
    - name: "Monthly Max Soil Moisture"
      state_topic: "house/weather/monthlymaxsoilmoist"
    - name: "ATH Min Soil Moisture"
      state_topic: "house/weather/athminsoilmoist"
    - name: "ATH Max Soil Moisture"
      state_topic: "house/weather/athmaxsoilmoist"




