###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   02/19/2019
#   @package        :   Weather
#   @description    :   Weather and NWS Alerts
#   @original       :   https://github.com/Vasiley/Home-Assistant-Main/blob/master/packages/weather_alerts_nws.yaml
# 
#   @amended        :   Dave Forrester 
#   @date           :   28/04/2025
###############################################################################


input_boolean:
  freeze_warning:
    name: Freeze Warning
    icon: mdi:snowflake-alert
  weather_alert_texts:
    name: Weather Alert Texts
    icon: mdi:telegram
  lightning_warning:
    name: Lightning Warning
    icon: mdi:flash-alert
  tstorm_alarm:
    name: T-Storm Alarm
    icon: mdi:speaker-wireless
  raining:
    name: Raining
    

#########################
# Gets Met Office Alerts 
#########################

sensor:
  - platform: feedparser
    name: Met Office RSS Feed DG Lothian and Borders Weather Warnings
    feed_url: 'https://www.metoffice.gov.uk/public/data/PWSCache/WarningsRSS/Region/dg'
    date_format: '%a, %b %d %I:%M %p'
    inclusions:
      - summary
      - link

  - platform: statistics
    name: Inside Humidity Stats
    entity_id: sensor.average_indoor_humidity_level
    state_characteristic: mean
    sampling_size: 500
  - platform: history_stats
    name: Chill Time Yesterday
    entity_id: binary_sensor.chill_hours
    state: "on"
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    duration:
      hours: 24
  - platform: history_stats
    name: Freeze Time Yesterday
    entity_id: binary_sensor.freeze_hours
    state: "on"
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    duration:
      hours: 24
  - platform: statistics
    name: "Daily Avg Wind Speed"
    entity_id: sensor.gw2000a_wind_speed
    state_characteristic: mean
    max_age:
      hours: 24
  - platform: statistics
    name: "Avg Wind Speed"
    entity_id: sensor.gw2000a_wind_speed
    state_characteristic: mean
    max_age:
      minutes: 10
  - platform: statistics
    name: "Daily Max Wind Speed"
    entity_id: sensor.gw2000a_wind_gust
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Temp"
    entity_id: sensor.gw2000a_outdoor_temperature
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Low Temp"
    entity_id: sensor.gw2000a_outdoor_temperature
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Humidity"
    entity_id: sensor.gw2000a_humidity 
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Min Humidity"
    entity_id: sensor.gw2000a_humidity
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Rainfall Last 24h"
    unique_id: rainfall_last_24h
    entity_id: sensor.gw2000adaily_rain_rate
    state_characteristic: change
    max_age:
      hours: 24
    precision: 1
  - platform: statistics
    name: "Rainfall Last Week"
    unique_id: rainfall_last_week 
    entity_id: sensor.gw2000a_daily_rain_rate
    state_characteristic: change
    max_age:
      days: 7
    precision: 1
  - platform: statistics
    name: "Daily Max Pressure" 
    entity_id: sensor.gw2000a_relative_pressure 
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Low Pressure"
    entity_id: sensor.gw2000a_relative_pressure 
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Solar Radiation" 
    entity_id: sensor.gw2000a_solar_radiation
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Solar Lux" 
    entity_id: sensor.gw2000a_solar_lux
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max UV Index" 
    entity_id: sensor.gw2000a_uv_index 
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Soil Temp" 
    entity_id: sensor.gw2000a_soil_temperature_1
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Min Soil Temp"
    entity_id: sensor.gw2000a_soil_temperature_1 
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Soil Moisture" 
    entity_id: sensor.gw2000a_soil_moisture_1
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Min Soil Moisture"
    entity_id: sensor.gw2000a_soil_moisture_1
    state_characteristic: value_min
    max_age:
      hours: 24

  - platform: rest
    unique_id: nasa_moon_phase
    resource_template: https://svs.gsfc.nasa.gov/api/dialamoon/{{ states("sensor.nasa_date_and_time_format") }} 
    name: Nasa Moon Phase Info
    value_template: "{{ value_json.image.url }}"
    json_attributes:
      - image

template:

  - binary_sensor:
    - name: lightning_detected
      unique_id: lightning_detected_sensor
      state: >
        {% set strike_count = states('sensor.gw2000a_lightning_strikes') | int  %}
        {{ strike_count > 0 }}
      device_class: safety

    - name: chill_hours
      unique_id: chill_hours_sensor
      state: >
        {{ states('sensor.gw2000a_outdoor_temperature')  | int < 10 }}
      device_class: cold
  
    - name: freeze_hours
      unique_id: freeze_hours_sensor
      state: >
        {{ states('sensor.gw2000a_outdoor_temperature')  | float(0) < 0 }}
      device_class: cold
     

  - sensor:
    - name: lightning distance miles 
      unique_id: lightning_distance_miles 
      unit_of_measurement: "Miles" 
      state: >
        {% set km = states('sensor.gw2000a_lightning_strike_distance')|int %}
        {{ ((km*5)/8)|round(0)}}

    - name: soil_moisture_battery 
      unique_id: soil_moisture_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_soil_battery_1')|float(0) %}
          {{((batvolt/1.45)*100)|round}}
      device_class: battery
      
    - name: soil_temperature_battery 
      unique_id: soil_temperature_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_soil_temperature_1_battery')|float(0) %}
          {{((batvolt/1.45)*100)|round}}
      device_class: battery

    - name: rain-gauge_battery 
      unique_id: rain_gauge_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_wh40_battery')|float(0) %}
          {{((batvolt/1.45)*100)|round}}
      device_class: battery

    - name: wittboy_battery 
      unique_id: wittboy_battery 
      state: >
        {% set batvolt = states('sensor.gw2000a_wh90_battery')|float(0) %}
          {{((batvolt/2.9)*100)|round}}
      device_class: battery

  - sensor:
    - name: "Weather Alerts Borders" # for conditional card & markdown card as weather_alerts can be !=0 but have no SB content
      state: >
          {{ state_attr('sensor.met_office_rss_feed_dg_lothian_and_borders_weather_warnings','entries')
            | map(attribute='summary')
            | select('search', 'Scottish Borders') 
            | list
            | count
          }}

######################################
#    Hourly Forecast 
######################################
  - trigger:
    - platform: state
      entity_id: weather.openweathermap
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
    action:
      - action: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.openweathermap
        response_variable: hourly
    sensor:
      - name: Forecast Hourly
        unique_id: weather_forecast_hourly
        state: "{{ states('weather.openweathermap') }}"
        attributes:
          forecast: "{{ hourly['weather.openweathermap'].forecast }}"

#########################################
#     Gets total rainfall for the day   # 
#########################################

  - trigger:
    - platform: time_pattern
      hours: /1
    action: 
      - action: weather.get_forecasts 
        target: 
          entity_id: weather.openweathermap
        data: 
          type: hourly
        response_variable: my_forecast
    sensor:
      - name: Weather Total Expected Rainfall 24 Hours
        unique_id: weather_total_expected_rainfall_24_hrs
        icon: mdi:weather-pouring
        unit_of_measurement: mm
        state: >
          {% set ns = namespace() %}
          {% set ns.totalrainfall = 0 %}
          {% for daypart in range(0,7) %}
            {% set rainfall = my_forecast["weather.openweathermap"].forecast[daypart].precipitation %}
            {% set rainfall_probability = my_forecast["weather.openweathermap"].forecast[daypart].precipitation_probability / 100 %}
            {% if rainfall_probability > 0 %}
              {% set rainfall = rainfall * rainfall_probability %}
            {% endif %}
            {% set ns.totalrainfall = ns.totalrainfall + rainfall %}
          {% endfor %}
          {{ (ns.totalrainfall | float(0) *100) | round(2) }}

###############################
# Current Forecast 
############################### 

  - trigger:
    - platform: state
      entity_id: weather.openweathermap
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
    action:
      - action: weather.get_forecasts
        data:
          type: daily
        target:
          entity_id: weather.openweathermap
        response_variable: daily
    sensor:
      - name: Current Forecast
        unique_id: current_forecast
        state: "{{ states('weather.openweathermap') }}"
        attributes:
          forecast: "{{ daily['weather.openweathermap'].forecast }}"

  - sensor:

    - name: current_weather_warnings
      icon: mdi:weather-alert
      state: >-
        {% set warnings = [] %}
        {% if states('sensor.weather_alerts_borders') != '0' %}
          {% for item in state_attr('sensor.met_office_rss_feed_dg_lothian_and_borders_weather_warnings','entries') %}
            {% if 'Scottish Borders' in item.summary %}
              {% set match = item.summary | regex_findall_index('(.*) affecting Dumfries, Galloway, Lothian & Borders: (.*) valid from (.*) to (.*)', ignorecase=True) %}
              {% if match %}
                {% set color = match[0] %}
                {% set type = match[1] %}
                {% set from_dt = match[2] %}
                {% set to_dt = match[3] %}
    
                {# Parse times #}
                {% set from_time = from_dt[0:2] ~ ':' ~ from_dt[2:4] %}
                {% set to_time = to_dt[0:2] ~ ':' ~ to_dt[2:4] %}
                {% set from_date = from_dt[5:8] ~ '-' ~ from_dt[9:11] ~ '-' ~ from_dt[12:] %}
                {% set to_date = to_dt[5:8] ~ '-' ~ to_dt[9:11] ~ '-' ~ to_dt[12:] %}
    
                {# Convert UTC to local #}
                {% set from_local = ((from_date ~ ' ' ~ from_time ~ '+00:00') | as_datetime | as_local) %}
                {% set to_local = ((to_date ~ ' ' ~ to_time ~ '+00:00') | as_datetime | as_local) %}
    
                {# Friendly date language #}
                {% set now_date = now().date() %}
                {% if from_local.date() == now_date %}
                  {% set from_day = 'today' %}
                {% elif from_local.date() == now_date + timedelta(days=1) %}
                  {% set from_day = 'tomorrow' %}
                {% else %}
                  {% set from_day = from_local.strftime('%A') %}
                {% endif %}
    
                {% if to_local.date() == now_date %}
                  {% set to_day = 'tonight' %}
                {% elif to_local.date() == now_date + timedelta(days=1) %}
                  {% set to_day = 'tomorrow night' %}
                {% else %}
                  {% set to_day = 'on ' ~ to_local.strftime('%A') %}
                {% endif %}
    
                {# Build message with AM/PM times #}
                {% set message = color ~ ' ' ~ type ~ ' warning from ' ~ from_local.strftime('%I:%M %p') ~ ' ' ~ from_day ~ ' until ' ~ to_local.strftime('%I:%M %p') ~ ' ' ~ to_day %}
                {% set _ = warnings.append(message) %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ warnings | join('. ') if warnings else 'No weather warnings have been reported.' }}

        

    - name: current_forecast_summary
      icon: mdi:weather-sunny
      state: >-
        {% set forecast = state_attr('sensor.current_forecast','forecast') %}
        {% if forecast is not none and forecast|length > 0 %}
          {{ forecast[0].condition }}
        {% else %}
          unknown
        {% endif %}
      attributes:
        high_temp: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast') %}
          {% if forecast is not none and forecast|length > 0 %}
            {{ forecast[0].temperature }}
          {% else %}
            unknown
          {% endif %}
        overnight_low: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast') %}
          {% if forecast is not none and forecast|length > 1 %}
            {{ forecast[1].templow }}
          {% else %}
            unknown
          {% endif %}
        wind_bearing: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast') %}
          {% if forecast is not none and forecast|length > 0 %}
            {{ forecast[0].wind_bearing }}
          {% else %}
            unknown
          {% endif %}
        wind_speed: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast') %}
          {% if forecast is not none and forecast|length > 0 %}
            {{ forecast[0].wind_speed }}
          {% else %}
            unknown
          {% endif %}
        precipitation: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast') %}
          {% if forecast is not none and forecast|length > 0 %}
            {{ forecast[0].precipitation }}
          {% else %}
            unknown
          {% endif %}
        frost_risk: >- 
          {% set frost_risk = states('sensor.outdside_thermal_comfort_frost_risk') %}
          {% if frost_risk not in ['unknown', 'unavailable'] %}
            {{ frost_risk }}
          {% else %}
            unknown
          {% endif %}

    - name: current_forecast_detail
      icon: mdi:weather-sunny
      state: >-
        {# Capture everything safely first #}
        {% set summary_state = states('sensor.current_forecast_summary') %}
        {% set high_temp = state_attr('sensor.current_forecast_summary', 'high_temp') %}
        {% set overnight_low = state_attr('sensor.current_forecast_summary', 'overnight_low') %}
        {% set frost_risk = state_attr('sensor.current_forecast_summary', 'frost_risk') %}
        {% set expected_rainfall = states('sensor.weather_total_expected_rainfall_24_hours') %}
    
        {%- macro getReport() -%}
          {%- if summary_state != 'unknown' -%}
            {{ ['Today in Clovenfords', 'Later Today', 'For the rest of the day'] | random }}
            
            {%- if high_temp not in ['unknown', None] %}
              expect a high of {{ high_temp }} degrees
            {%- endif %}
    
            {%- if summary_state == 'sunny' and is_state('binary_sensor.night', 'off') %}
              {{ ['with glorious sunshine.', 'with sunshine.', 'with sunny conditions prevailing.'] | random }}
            {%- elif summary_state == 'sunny' and is_state('binary_sensor.night', 'on') %}
              {{ ['with no clouds.', 'with clear skies.'] | random }}
            {%- elif summary_state == 'clear-night' %}
              {{ ['with no clouds.', 'with clear skies.'] | random }}
            {%- elif summary_state == 'rainy' %}
              {{ ['with rain.', 'with showers.', 'and rainy.'] | random }}
              {%- if expected_rainfall not in ['unknown', None] %}
                {{ ['Rainfall accumulation today is likely to be', 'Total Rainfall amount today will be'] | random }}
                around {{ expected_rainfall }} millimetres in the next 24 hours.
              {%- endif %}
            {%- elif summary_state == 'snowy' %}
              {{ ['with snow.', 'with snow showers.'] | random }}
              {%- if expected_rainfall not in ['unknown', None] %}
                {{ ['Snowfall accumulation today is likely to be', 'Total snowfall amount today will be'] | random }}
                around {{ expected_rainfall }} millimetres in the next 24 hours.
              {%- endif %}
            {%- elif summary_state == 'snowy-rainy' %}
              {{ ['with a mix of snow and rain,', 'with snow and rain showers,', 'with sleet,'] | random }}
              {%- if expected_rainfall not in ['unknown', None] %}
                around {{ expected_rainfall }} millimetres possible in the next 24 hours.
              {%- endif %}
            {%- elif summary_state == 'windy' %}
              {{ ['and windy.', 'with lots of wind.'] | random }}
            {%- elif summary_state == 'fog' %}
              {{ ['and foggy.', 'with some fog.'] | random }}
            {%- elif summary_state == 'cloudy' %}
              {{ ['with clouds.', 'with cloudy skies.'] | random }}
            {%- elif summary_state == 'partlycloudy' %}
              {{ ['with some clouds.', 'with partly cloudy skies.', 'with scattered clouds.'] | random }}
            {%- elif summary_state == 'hail' %}
              {{ ['with severe thunderstorms possible.', 'with hail possible.'] | random }}
              {%- if expected_rainfall not in ['unknown', None] %}
                {{ ['Rainfall accumulation today is likely to be', 'Total Rainfall amount today will be'] | random }}
                around {{ expected_rainfall }} millimetres in the next 24 hours.
              {%- endif %}
            {%- elif summary_state == 'lightning' %}
              {{ ['with thunderstorms possible.', 'with the potential of thunderstorms.'] | random }}
              {%- if expected_rainfall not in ['unknown', None] %}
                {{ ['Rainfall accumulation today is likely to be', 'Total Rainfall amount today will be'] | random }}
                around {{ expected_rainfall }} millimetres in the next 24 hours.
              {%- endif %}
            {%- endif %}
    
            {%- if overnight_low not in ['unknown', None] %}
              {{ ['Later tonight expect a low of', 'Overnight tonight, expect a low of'] | random }}
              {{ overnight_low }} degrees.
            {%- endif %}
            
            {%- if frost_risk == 'frost_risk' %}
              {{ [
                'With a chance of frost. So you might want to consider covering plants up tonight.',
                'With frosty conditions ahead. So I suggest you turn the greenhouse heater on.',
                'It is going to freeze overnight so get those plants covered up.',
                'It\'s going to be a chilly night tonight, so protect those tender plants.'
              ] | random }}
            {%- endif %}
          
          {%- else -%}
            {{ [
              'Weather forecast is currently unavailable, but it\'s always a great day to make the most of it!',
              'Forecast data is missing right now. Whatever the weather, hope you have a fantastic day!',
              'Unable to retrieve today\'s forecast. Fingers crossed for sunshine!',
              'The skies are keeping secrets today. Enjoy your day, rain or shine!',
              'No forecast available at the moment. Good time for an adventure!'
            ] | random }}
          {%- endif -%}
        {%- endmacro -%}
    
        {# Macro to cleanup and remove blank lines/spaces #}
        {%- macro cleanup(data) -%}
          {%- for item in data.split("\n") if item | trim != "" -%}
            {{ item | trim }} {% endfor %}
        {%- endmacro -%}
    
        {{- cleanup(getReport()) -}}


    - name: tomorrow_forecast_summary 
      icon: mdi:weather-sunny
      state : >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.condition }}
      attributes:
        high_temp: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.temperature }}
        overnight_low: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[2] %}
          {{ forecast.templow }}
        wind_bearing: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.wind_bearing }}
        wind_speed: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.wind_speed }}
        precipitation: >-
          {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
          {{ forecast.precipitation }}
        frost_risk: >- 
          {% set frost_risk = states('sensor.outdside_thermal_comfort_frost_risk') %}
          {{ frost_risk }}

    - name: tomorrow_forecast_detail
      icon: mdi:weather-sunny
      state: >-
        {%- macro getReport() -%}
          {% set condition = states('sensor.tomorrow_forecast_summary') %}
          {% set high_temp = state_attr('sensor.tomorrow_forecast_summary', 'high_temp') %}
          {% set low_temp = state_attr('sensor.tomorrow_forecast_summary', 'overnight_low') %}
          {% set precipitation = state_attr('sensor.tomorrow_forecast_summary', 'precipitation') %}
          
          {{ [
              'Tomorrow in Clovenfords,',
              'For the next day,',
              'Tomorrow,'
            ] | random }}
          expect a high of {{ high_temp | round(0) }} degrees, 
          
          {%- if condition == 'sunny' %}
            {{ [
                'with glorious sunshine.',
                'with plenty of sun.',
                'with sunny conditions prevailing.'
              ] | random }}
          {%- elif condition == 'rainy' %}
            {{ [
                'with rain throughout the day.',
                'with showers expected.',
                'with a rainy outlook.'
              ] | random }}
            {{ [
                'Rainfall accumulation tomorrow is likely to be around',
                'Total rainfall tomorrow will be approximately'
              ] | random }}
            {{ precipitation }} millimetres.
          {%- elif condition == 'snowy' %}
            {{ [
                'with snow expected.',
                'with snow showers possible.'
              ] | random }}
            {{ [
                'Snowfall accumulation is expected to be around',
                'Total snowfall tomorrow could reach'
              ] | random }}
            {{ precipitation }} millimetres.
          {%- elif condition == 'snowy-rainy' %}
            {{ [
                'with a mix of rain and snow possible.',
                'with sleet or snow showers.'
              ] | random }}
            Total accumulation around {{ precipitation }} millimetres is possible.
          {%- elif condition == 'windy' %}
            {{ [
                'and it will be windy.',
                'with strong winds expected.'
              ] | random }}
          {%- elif condition == 'fog' %}
            {{ [
                'and foggy conditions are likely.',
                'with patches of fog.'
              ] | random }}
          {%- elif condition == 'cloudy' %}
            {{ [
                'with cloudy skies throughout the day.',
                'with overcast conditions.'
              ] | random }}
          {%- elif condition == 'partlycloudy' %}
            {{ [
                'with some scattered clouds.',
                'with partly cloudy skies.'
              ] | random }}
          {%- elif condition == 'hail' %}
            {{ [
                'with severe thunderstorms possible.',
                'with hail expected in some areas.'
              ] | random }}
            {{ [
                'Rainfall accumulation tomorrow is expected to be around',
                'Total rainfall tomorrow will likely reach'
              ] | random }}
            {{ precipitation }} millimetres.
          {%- elif condition == 'lightning' %}
            {{ [
                'with thunderstorms possible.',
                'with the potential for lightning and storms.'
              ] | random }}
            {{ [
                'Rainfall accumulation tomorrow is expected to be around',
                'Total rainfall tomorrow will likely reach'
              ] | random }}
            {{ precipitation }} millimetres.
          {% endif %}
          
          {{ [
              'Tomorrow night, expect a low of',
              'Overnight, temperatures will fall to',
              'By late tomorrow night, it should be around'
            ] | random }}
          {{ low_temp | round(0) }} degrees.
        {%- endmacro -%}
    
        {# Helper macro to clean up whitespace and format output #}
        {%- macro cleanup(data) -%}
          {%- for item in data.split("\n") if item | trim != "" -%}
            {{ item | trim }} {% endfor -%}
        {%- endmacro -%}
    
        {# Main macro call #}
        {{- cleanup(getReport()) -}}


    - name: current_conditions_summary
      state: >-
        {%- macro get_temperature() -%}
          {% set temp = states('sensor.gw2000a_outdoor_temperature') %}
          {% if temp not in ['unknown', 'unavailable', 'none'] %}
            {{ temp | float | round }} degrees
          {% else %}
            temperature data currently unavailable
          {% endif %}
        {%- endmacro -%}
    
        {%- macro describe_sky(condition) -%}
          {%- if condition == 'rainy' -%}
            {{ ['with rain.', 'with showers.'] | random }}
          {%- elif condition == 'cloudy' -%}
            {{ ['with clouds.', 'with cloudy skies.'] | random }}
          {%- elif condition == 'partlycloudy' -%}
            {{ ['with some clouds.', 'with partly cloudy skies.', 'with scattered clouds.'] | random }}
          {%- elif condition == 'sunny' -%}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ ['and sunny.', 'with sun.'] | random }}
            {% else %}
              {{ ['and clear.', 'with clear skies.'] | random }}
            {% endif %}
          {%- else -%}
            and {{ condition }}
          {%- endif %}
        {%- endmacro -%}
    
        {%- macro get_report() -%}
          The weather in Clovenfords 
          {{ ['is', 'is currently', 'currently sits at', 'right now is'] | random }}
          {{ get_temperature() }}
          {{ describe_sky(states('sensor.current_forecast_summary')) }}
        {%- endmacro -%}
    
        {%- macro cleanup(data) -%}
          {%- for item in data.split("\n") if item | trim != "" -%}
            {{ item | trim }} {% endfor -%}
        {%- endmacro -%}
    
        {{- cleanup(get_report()) -}}


    - name: current_conditions_detail
      state: >-
        {%- macro get_temperature() -%}
          {% set temp = states('sensor.gw2000a_outdoor_temperature') %}
          {% if temp not in ['unknown', 'unavailable', 'none'] %}
            {{ temp | float | round }} degrees
          {% else %}
            temperature is currently unavailable
          {% endif %}
        {%- endmacro -%}
    
        {%- macro describe_sky(condition) -%}
          {%- if condition == 'rainy' -%}
            {{ ['with rain', 'with showers'] | random }}
          {%- elif condition == 'cloudy' -%}
            {{ ['with clouds', 'with cloudy skies'] | random }}
          {%- elif condition == 'partlycloudy' -%}
            {{ ['with some clouds', 'with partly cloudy skies', 'with scattered clouds'] | random }}
          {%- elif condition == 'sunny' -%}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ ['and sunny', 'with sun', 'with sunny skies'] | random }}
            {% else %}
              {{ ['and clear', 'with clear skies'] | random }}
            {% endif %}
          {%- elif condition == 'snowy' -%}
            {{ ['with snow', 'with snow showers'] | random }}
          {%- elif condition == 'snowy-rainy' -%}
            {{ ['with a mix of rain and snow', 'with sleet', 'with snow and rain showers'] | random }}
          {%- elif condition == 'windy' -%}
            {{ ['and windy', 'with strong winds'] | random }}
          {%- elif condition == 'fog' -%}
            {{ ['and foggy', 'with foggy conditions'] | random }}
          {%- elif condition == 'hail' -%}
            {{ ['with severe storms', 'with hail expected'] | random }}
          {%- elif condition == 'lightning' -%}
            {{ ['with thunderstorms', 'with lightning storms'] | random }}
          {%- else -%}
            with {{ condition }}
          {%- endif %}
        {%- endmacro -%}
    
        {%- macro get_precipitation() -%}
          {% set rain = states('sensor.weather_total_expected_rainfall_24_hours') %}
          {% if rain not in ['unknown', 'unavailable', 'none'] %}
            {{ ['Expect around', 'Looking at about'] | random }} {{ rain }} millimetres of rain today.
          {% endif %}
        {%- endmacro -%}
    
        {%- macro get_snowfall() -%}
          {% set snow = states('sensor.weather_total_expected_rainfall_24_hours') %}
          {% if snow not in ['unknown', 'unavailable', 'none'] %}
            {{ ['Expect up to', 'Looking at nearly'] | random }} {{ snow }} millimetres of snow.
          {% endif %}
        {%- endmacro -%}
    
        {%- macro frost_warning() -%}
          {% if state_attr('sensor.current_forecast_summary','frost_risk') == 'frost_risk' %}
            {{ [
              ' Frost is possible tonight. Cover your plants.', 
              ' A freeze is expected. Bring sensitive plants indoors.',
              ' Expect a chilly night. Protect your plants if needed.'
              ] | random }}
          {% endif %}
        {%- endmacro -%}
    
        {%- macro opening_line() -%}
          {{ [
            'Right now in Clovenfords,', 
            'Currently in Clovenfords,', 
            'Here\'s the latest from Clovenfords:',
            'Weather update for Clovenfords:'
          ] | random }}
        {%- endmacro -%}
    
        {%- macro get_report() -%}
          {{ opening_line() }}
          It's {{ get_temperature() }} {{ describe_sky(states('weather.home')) }}.
    
          {%- if is_state('binary_sensor.night','off') %}
            {{ ['Today\'s high will be', 'Look for a high around'] | random }}
            {{ state_attr('sensor.current_forecast_summary','high_temp') }} degrees 
            {{ describe_sky(states('sensor.current_forecast_summary')) }}.
    
            {%- if states('sensor.current_forecast_summary') in ['rainy', 'hail', 'lightning'] %}
              {{ get_precipitation() }}
            {%- elif states('sensor.current_forecast_summary') in ['snowy', 'snowy-rainy'] %}
              {{ get_snowfall() }}
            {%- endif %}
          {%- endif %}
    
          {{ ['Tonight\'s low will be', 'Overnight low near'] | random }}
          {{ state_attr('sensor.current_forecast_summary','overnight_low') }} degrees.
    
          {{ frost_warning() }}
        {%- endmacro -%}
    
        {%- macro cleanup(data) -%}
          {%- for item in data.split("\n") if item | trim != "" -%}
            {{ item | trim }} {% endfor -%}
        {%- endmacro -%}
    
        {{- cleanup(get_report()) -}}


    - name: outside_pressure
      state: "{{ states('sensor.gw2000a_absolute_pressure') }}"
    - name: todays_high_temp
      device_class: temperature
      state: >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[0] %}
        {{ forecast.temperature }}
    - name: tonights_low_temp
      device_class: temperature
      state: >-
        {% set forecast = state_attr('sensor.current_forecast','forecast')[1] %}
        {{ forecast.templow }}

    - name: clothing_forecast
      state: >-
        {% if is_state('binary_sensor.overnight', 'off') %}
          {% set temp = states('sensor.high_temperature_today')|int %}
        {% else %}
          {% set temp = states('sensor.gw2000a_outdoor_temperature')|round %}
        {% endif %}
    
        {% if temp >= 25 %}
          Hot
        {% elif temp >= 18 %}
          Nice
        {% elif temp >= 11 %}
          Chilly
        {% elif temp >= 1 %}
          Cold
        {% elif temp < 1 %}
          Freezing
        {% else %}
          Unknown
        {% endif %}


    - name: clothing_forecast_detail
      state: >-
        {%- macro get_report() -%}
          {% set clothing = states('sensor.clothing_forecast') %}
          
          {% if is_state('binary_sensor.morning', 'on') %}
            A little later, the high should be near {{ states('sensor.high_temperature_today') }} degrees.
    
            {% if clothing == 'Freezing' %}
              I'd suggest a thick coat and a woolly hat.
            {% elif clothing == 'Cold' %}
              A warm coat and a hat would be a good idea.
            {% elif clothing == 'Chilly' %}
              Best to wear warm clothing today.
            {% elif clothing == 'Nice' %}
              {{ ['Which means it should be', 'That makes it', 'It\'s shaping up to be'] | random }}
              {{ ['pretty nice outside.', 'almost perfect weather.', 'a good day to be outdoors.'] | random }}
              Shorts and short sleeves should be fine.
            {% elif clothing == 'Toasty' %}
              {{ ['It\'ll be', 'Expect it to be', 'It\'s going to feel'] | random }}
              {{ ['a bit warm.', 'rather warm.', 'almost too hot.'] | random }}
              Shorts and short sleeves are recommended.
            {% elif clothing == 'Hot' %}
              {{ ['Brace yourself, it\'ll be', 'It\'s going to be', 'Expect it to feel'] | random }}
              {{ ['hotter than the sun.', 'super hot.', 'like a volcano out there.'] | random }}
              Stay cool — wear as little as possible!
            {% else %}
              It should be {{ clothing.lower() }} today, so dress accordingly.
            {% endif %}
            
          {% else %}
            Right now, based on the current temperature:
    
            {% if clothing == 'Freezing' %}
              It's freezing! I'd recommend a winter coat, hat, and gloves.
            {% elif clothing == 'Cold' %}
              It's cold out there. Dress warmly with a thick jumper and coat.
            {% elif clothing == 'Chilly' %}
              It's chilly. Wear a warm coat if you're heading out.
            {% elif clothing == 'Nice' %}
              It's {{ ['nice outside.', 'pretty pleasant.', 'a good day to be outdoors.'] | random }}
              Shorts and a tee shirt would be great.
            {% elif clothing == 'Toasty' %}
              It's {{ ['a little warm', 'rather warm', 'almost too hot'] | random }} outside.
              Shorts and a tee shirt are perfect.
            {% elif clothing == 'Hot' %}
              It's {{ ['hotter than the sun', 'super hot', 'volcano-level hot'] | random }} right now.
              If you can, stay indoors!
            {% else %}
              It's {{ clothing.lower() }} outside. Dress appropriately.
            {% endif %}
          {% endif %}
        {%- endmacro -%}
    
        {%- macro cleanup(data) -%}
          {{ data.replace("\n", " ").replace("  ", " ") | trim }}
        {%- endmacro -%}
    
        {{ cleanup(get_report()) }}


    - name: sun_status
      state: >-
        {%- if is_state('sun.sun', 'below_horizon') -%}
          You have  
          {%- set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() -%}
          {% set hours = seconds / 60 -%}
          {%- if seconds / ( 60 * 60 ) > 1 -%}
            {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
          {%- else -%}
            {{""}} {{ (seconds // 60) | int }} minutes
          {%- endif -%}
          {{ [
            ' until the sun rises.',
            ' until the sun is up.',
            ' until sunrise.',
            ' until sun up.'
          ]|random }}
        {%- else %}
          You have 
          {%- set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %}
          {%- set hours = seconds / 60 -%}
          {%- if seconds / ( 60 * 60 ) > 1 -%}
            {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
          {%- else -%}
            {{""}} {{ (seconds // 60) | int }} minutes
          {%- endif -%}
          {{ [
            ' until the sun sets for the day.',
            ' until the sun slips below the horizon.',
            ' until sunset. '
          ]|random }}
        {%- endif -%}

    - name: moon_phase
      state: >-
        {% if state_translated('sensor.moon_phase') == 'Full moon' %}
          {{ ['Check out the full moon tonight!',
              'By the way, tonight is a full moon. ',
              'The moon is big and bright! And full. ',
              'If you want to see the full moon tonight is the night.'
              ] | random }}
        {% elif state_translated('sensor.moon_phase') == 'Waning gibbous' %}
          Tonights moon phase is waning gibbous.
        {% elif state_translated('sensor.moon_phase') == 'Last quarter' %}
          Tonights moon phase is last quarter.
        {% elif state_translated('sensor.moon_phase') == 'Waning crescent' %}
          Tonights moon phase is waning crescent.
        {% elif state_translated('sensor.moon_phase') == 'New moon' %}
          Tonights moon is dark and new.
        {% elif state_translated('sensor.moon_phase') == 'Waxing crescent' %}
          Tonights moon phase is waxing crescent.
        {% elif state_translated('sensor.moon_phase') == 'First quarter' %}
          Tonights moon phase is first quarter.
        {% elif state_translated('sensor.moon_phase') == 'Waxing gibbous' %}
          Tonights moon phase is waxing gibbous.
        {% endif %} 

  
    - name: weather_wind_direction 
      unique_id: weather_wind_direction 
      state: >
        {% set direction = ['Northerly','NorNorEast','NorEast','EastNorEast','Easterly','EastSowEast','SowEast','SowSowEast','Southerly','SowSowWest','SowWest','WestSowWest','Westerly','WestNorWest','NorWest','NorNorWest'] %}
        {% set degree = states('sensor.gw2000a_wind_direction')|float %}
        {{ direction[((degree+11.25)/22.5)|int] }}

# MQTT Stored Sensors
mqtt:
  sensor:
    - name: "Max Wind Gust"
      state_topic: "house/weather/maxwind"
    - name: "ATH Wind Gust"
      state_topic: "house/weather/athwind"
    - name: "Total Rain Fall"
      state_topic: "house/weather/totalrainfall"
    - name: "ATH 24h Rain"
      state_topic: "house/weather/athdailyrain"
    - name: "Days with Rain"
      state_topic: "house/weather/daysrain"
    - name: "Days without Rain"
      state_topic: "house/weather/daysnorain"
    - name: "Total Lightning Strikes"
      state_topic: "house/weather/totalstrikes" 
    - name: "Max Lightning Strikes"
      state_topic: "house/weather/maxstrikes"
    - name: "Max Temp"
      state_topic: "house/weather/maxtemp"
    - name: "Low Temp"
      state_topic: "house/weather/lowtemp"
    - name: "ATH Max Temp"
      state_topic: "house/weather/athmaxtemp"
    - name: "ATH Low Temp"
      state_topic: "house/weather/athlowtemp"
    - name: "Monthly Max Temp"
      state_topic: "house/weather/monthlymaxtemp"
    - name: "Monthly Low Temp"
      state_topic: "house/weather/monthlylowtemp"
    - name: "Min Pressure"
      state_topic: "house/weather/minpress"
    - name: "Max Pressure"
      state_topic: "house/weather/maxpress"
    - name: "Monthly Min Pressure"
      state_topic: "house/weather/monthlyminpress"
    - name: "Monthly Max Pressure"
      state_topic: "house/weather/monthlymaxpress"
    - name: "ATH Min Pressure"
      state_topic: "house/weather/athminpress"
    - name: "ATH Max Pressure"
      state_topic: "house/weather/athmaxpress"
    - name: "Min Humidity"
      state_topic: "house/weather/minhum"
    - name: "Max Humidity"
      state_topic: "house/weather/maxhum"
    - name: "Monthly Min Humidity"
      state_topic: "house/weather/monthlyminhum"
    - name: "Monthly Max Humidity"
      state_topic: "house/weather/monthlymaxhum"
    - name: "ATH Min Humidity"
      state_topic: "house/weather/athminhum"
    - name: "ATH Max Humidity"
      state_topic: "house/weather/athmaxhum"
    - name: "Chill Hours"
      state_topic: "house/weather/chillhours"
    - name: "Freeze Hours"
      state_topic: "house/weather/freezehours" 
    - name: "Yesterday Rainfall"
      state_topic: "house/weather/yesterday_rainfall_mm"
    - name: "Weekly Rainfall"
      state_topic: "house/weather/weekly_rainfall"
    - name: "ws_wind_speed"
      unique_id: ws_wind_speed
      state_topic: "house/weather/new_wind_speed"
    - name: "Max Solar Radiation"
      state_topic: "house/weather/maxsolrad"
    - name: "ATH Max Solar Radiation"
      state_topic: "house/weather/athmaxsolrad"
    - name: "Max Solar Lux"
      state_topic: "house/weather/maxsollux"
    - name: "ATH Max Solar Lux"
      state_topic: "house/weather/athmaxsollux"
    - name: "Max UV Index"
      state_topic: "house/weather/maxuv"
    - name: "ATH Max UV Index"
      state_topic: "house/weather/athmaxuv"
    - name: "Min Soil Temperature"
      state_topic: "house/weather/minsoiltemp"
    - name: "Max Soil Temperature"
      state_topic: "house/weather/maxsoiltemp"
    - name: "Monthly Min Soil Temperature"
      state_topic: "house/weather/monthlyminsoiltemp"
    - name: "Monthly Max Soil Temperature"
      state_topic: "house/weather/monthlymaxsoiltemp"
    - name: "ATH Min Soil Temperature"
      state_topic: "house/weather/athminsoiltemp"
    - name: "ATH Max Soil Temperature"
      state_topic: "house/weather/athmaxsoiltemp"
    - name: "Min Soil Moisture"
      state_topic: "house/weather/minsoilmoist"
    - name: "Max Soil Moisture"
      state_topic: "house/weather/maxsoilmoist"
    - name: "Monthly Min Soil Moisture"
      state_topic: "house/weather/monthlyminsoilmoist"
    - name: "Monthly Max Soil Moisture"
      state_topic: "house/weather/monthlymaxsoilmoist"
    - name: "ATH Min Soil Moisture"
      state_topic: "house/weather/athminsoilmoist"
    - name: "ATH Max Soil Moisture"
      state_topic: "house/weather/athmaxsoilmoist"




