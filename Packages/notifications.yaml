############################################################################### 
 #   @author         :   Jeffrey Stone 
 #   @date           :   06/10/2020 
 #   @package        :   notifications.yaml
 #   @description    :   All Jarvis Announcements 
 # 
 #   @modified by    :   Dave Forrester (@Daverover66)
 #   @date           :   31/08/2023 
 ############################################################################### 

# Sensors to grab data from MQTT for use in scripts

 mqtt:
   sensor:
   - name: "Jarvis Last Msg"
     state_topic: "house/polly/lastmsg"
   - name: "Jarvis Last Location"
     state_topic: "house/polly/lastloc"
   - name: "Jarvis Last Msg Time"
     state_topic: "house/polly/msgtime"  

# To call the speech engine script below use the following as a guide:

 - service: script.speech_engine_simplified
   data: 
     where: '{{ states(''sensor.room_audio'') }}'
     message: >
       At {{ states('sensor.jarvis_last_msg_time') }} in the {{ states('sensor.jarvis_last_location') }} I said. {{ states('sensor.jarvis_last_msg') }}
     msg_summary: "recall"

script:  
  sequence:
  - condition: state
    entity_id: input_boolean.audible_notifications
    state: "on"
  - condition: state
    entity_id: binary_sensor.family_home
    state: "on"
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: "off"
  - service: notify.alexa_media
    data:
      message: >-
        <voice name="{{ voice }}"> 
        <amazon:auto-breaths>
        <prosody rate="105%">
        {{ message }}
        </prosody>
        </amazon:auto-breaths> 
        </voice>
      target: >-
        {% if where in ['Kitchen','media_player.kitchen_echo_show'] %}
          media_player.kitchen_echo_show
        {% elif where in ['Main Bedroom','media_player.main_bedroom_dot'] %}
          media_player.main_bedroom_dot
        {% elif where in ['Guest Bedroom','media_player.guest_bedroom_echo_dot']
        %}
          media_player.guest_bedroom_echo_dot
        {% elif where in ['Living Room','media_player.dave_s_2nd_echo_pop'] %}
          media_player.dave_s_2nd_echo_pop
        {% elif where in ['Dining Room','media_player.dave_s_echo_pop'] ==
        "Dining Room"%}
          media_player.dave_s_echo_pop
        {% elif where in ['Office','media_player.dave_s_2nd_echo_pop_2'] %}
          media_player.dave_s_2nd_echo_pop_2
        {% elif where in ['Jamies Room','media_player.living_room_dot'] %}
          media_player.living_room_dot
        {% elif where in ['Seans Room','media_player.seans_room_dot'] %}
          media_player.seans_room_dot
        {% elif where in ['Everywhere','media_player.everywhere_2'] %}
          media_player.everywhere_2
        {% elif where in ['Upstairs','media_player.upstairs'] %}
          media_player.upstairs
        {% elif where in ['Downstairs','media_player.downstairs'] %}
          media_player.downstairs
        {% else %}
          media_player.dave_s_2nd_echo_pop
        {% endif %}
      data:
        type: >-
          {% if where in
          ['Downstairs','Upstairs','Everywhere','media_player.downstairs','media_player.upstairs','media_player.everywhere_2']%}
            announce
          {% else %}
            tts
          {% endif %}
mode: single

# A simplified Speech Engine that for your text to speech notifications.
 # speech_engine_simplified:
   # sequence:
      # Any conditions you want to include.

      # - condition: state
      #   entity_id: input_boolean.audible_notifications
      #   state: 'on'

      # Call your TTS Service
      
# service: speech_engine_simplified
       # data_template:
        #  entity_id: >-
          #  {{ where }}
      #    message: >-
         #   {{ message }}
       #   cache: true

      # Save your message for recall
      - service: mqtt.publish
        data_template:
          topic: 'house/polly/lastmsg'
          payload: >
            {% if msg_summary == 'recall' %}
              {% set msg_summary = '{{states(''sensor.jarvis_last_msg'')}}' %}
            {% else %}
              {% if msg_summary %}
                {% set message = msg_summary %}
              {% endif %}
              {%- macro cleanup(data) -%}
                {%- for item in data.split("\n")  if item | trim != "" -%}
                  {{ item | trim }} {% endfor -%}
              {%- endmacro -%}
              {{- cleanup( message | striptags | truncate(220) ) -}}
            {% endif %}

      # Save time of last message
      - service: mqtt.publish
        data_template:
          topic: 'house/polly/msgtime'
          payload: >
            {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p") }}
          retain: true

      # Save location
      - service: mqtt.publish
        data_template:
          topic: 'house/polly/lastloc'
          payload: '{{ where }}'
          retain: true

  # Script for playing the last message.
  # You can call this from a routing on the Google Home or Amazon Echo
  # Or from an automation tiggered by a button.
  play_last_message:
    sequence:
      - service: script.speech_engine_for_tts
        data: 
            where: '{{ states(''sensor.room_audio'') }}'
            message: >
              At {{ states('sensor.jarvis_last_msg_time') }} 
              in the {{ states('sensor.jarvis_last_location') }} 
              I said. {{ states('sensor.jarvis_last_msg') }}
            msg_summary: "recall"

  













